{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"This documentation will clearly show you how to undertake all IdentityServer configuration tasks: Including authorizing new client applications by application type Configure protected & identity resources Manage users and assigning them identity roles and identity claims. After reading these documents, you will also understand how to deploy the AdminUI using Docker, IIS & Azure including download, configuration and installation. As of 6.3 AdminUI is a single site hosting both the SPA and API For additional support email support@identityserver.com","title":"About"},{"location":"Access_Policy/Access_Policy.html","text":"Introduction Access Policy maps claim values to permissions, each time a user attempts to perform some administrator functionality their claims are evaluated against the policy to produce a set of permissions. Only if they have the appropriate permission will they be able to execute the functionality. Managing Your Access Policy In order to manage your access policy, you will need to have the \u2018All\u2019 permission. Access Policy Management is available in the Settings tab, new policies can be added and removed here. After making any changes you will need to save your changes in order for them to take effect. To make use of this new policy, you will need to give this new claim to a user. Users can get permissions from multiple access policy statements. Only users with the \u2018All\u2019 permission are able to assign claims referenced in the access policy to themselves or other users. Warning: any user that already has the claim in the access policy you are adding will be given the permission. This is also true if an access policy is removed, where any users with that claim will lose that permission. Permissions Users without any permissions will be greeted with an unauthorized screen after logging in. There are three read/write permissions available, each giving access to different actions within AdminUI: User Manager This permission grants control over User and Role management Identity Server Manager This permission allows users to create and modify ClaimTypes, Clients, Identity Resources, and Protected Resources All This permission allows all of the above and control over Access Policy Management As of AdminUI 5.5.0/4.6.0 there are 3 read only permissions available: User Manager Read Only This permission a user the ability to view Users and Roles Identity Server Manager Read Only This permission allows to view ClaimTypes, Clients, Identity Resources, and Protected Resources All Read Only This permission combines the two read only permissions above By default, the 'AdminUI Administrator' role is set up by default with the All permission. This mapping cannot be removed. Access Policies and External User Stores If you are using an external user store (e.g. AzureAD) you may need to create access policies based on known claim types for your users. For example, you may want to create an access policy based on an external user's email claim type. To do this, navigate to the Access Policy view and click the 'Add Policy' button. Next, choose the claim type you wish to create the access policy against (in our case the email claim type), as well as the claim value you expect to satisfy the policy. Lastly, choose the AdminUI permission you wish to grant users who satisfy these conditions. Adding an Access Policy to a Client or User After creating your Access Policy as described in the Managing Your Access Policy section above you can add it to your client by clicking the 'Add Claim' button. You will be greeted with a modal that requires you to enter the 'Type' and 'Value' of the Claim you are wishing to add. These values correspond to the Claim Type and Claim Value of the access policy you have created. For example, if you are adding a client that requires the AdminUI Administrator Access Policy as shown below: You should be entering the Claim Type 'role' and the Claim Value 'AdminUI Administrator' into the 'Add Claim' modal in the edit client view as shown below. After saving these changes, your client should be able to interact with the AdminUI API correctly. Viewing Client Access Policies From the Clients page, click the edit client button then navigate to the 'Advanced' tab, then click the 'Claims' button. Here you can see the various Claims assigned to a client and is where you add your Access Policies to your clients.","title":"Access Policy"},{"location":"Access_Policy/Access_Policy.html#introduction","text":"Access Policy maps claim values to permissions, each time a user attempts to perform some administrator functionality their claims are evaluated against the policy to produce a set of permissions. Only if they have the appropriate permission will they be able to execute the functionality.","title":"Introduction"},{"location":"Access_Policy/Access_Policy.html#managing-your-access-policy","text":"In order to manage your access policy, you will need to have the \u2018All\u2019 permission. Access Policy Management is available in the Settings tab, new policies can be added and removed here. After making any changes you will need to save your changes in order for them to take effect. To make use of this new policy, you will need to give this new claim to a user. Users can get permissions from multiple access policy statements. Only users with the \u2018All\u2019 permission are able to assign claims referenced in the access policy to themselves or other users. Warning: any user that already has the claim in the access policy you are adding will be given the permission. This is also true if an access policy is removed, where any users with that claim will lose that permission.","title":"Managing Your Access Policy"},{"location":"Access_Policy/Access_Policy.html#permissions","text":"Users without any permissions will be greeted with an unauthorized screen after logging in. There are three read/write permissions available, each giving access to different actions within AdminUI: User Manager This permission grants control over User and Role management Identity Server Manager This permission allows users to create and modify ClaimTypes, Clients, Identity Resources, and Protected Resources All This permission allows all of the above and control over Access Policy Management As of AdminUI 5.5.0/4.6.0 there are 3 read only permissions available: User Manager Read Only This permission a user the ability to view Users and Roles Identity Server Manager Read Only This permission allows to view ClaimTypes, Clients, Identity Resources, and Protected Resources All Read Only This permission combines the two read only permissions above By default, the 'AdminUI Administrator' role is set up by default with the All permission. This mapping cannot be removed.","title":"Permissions"},{"location":"Access_Policy/Access_Policy.html#access-policies-and-external-user-stores","text":"If you are using an external user store (e.g. AzureAD) you may need to create access policies based on known claim types for your users. For example, you may want to create an access policy based on an external user's email claim type. To do this, navigate to the Access Policy view and click the 'Add Policy' button. Next, choose the claim type you wish to create the access policy against (in our case the email claim type), as well as the claim value you expect to satisfy the policy. Lastly, choose the AdminUI permission you wish to grant users who satisfy these conditions.","title":"Access Policies and External User Stores"},{"location":"Access_Policy/Access_Policy.html#adding-an-access-policy-to-a-client-or-user","text":"After creating your Access Policy as described in the Managing Your Access Policy section above you can add it to your client by clicking the 'Add Claim' button. You will be greeted with a modal that requires you to enter the 'Type' and 'Value' of the Claim you are wishing to add. These values correspond to the Claim Type and Claim Value of the access policy you have created. For example, if you are adding a client that requires the AdminUI Administrator Access Policy as shown below: You should be entering the Claim Type 'role' and the Claim Value 'AdminUI Administrator' into the 'Add Claim' modal in the edit client view as shown below. After saving these changes, your client should be able to interact with the AdminUI API correctly.","title":"Adding an Access Policy to a Client or User"},{"location":"Access_Policy/Access_Policy.html#viewing-client-access-policies","text":"From the Clients page, click the edit client button then navigate to the 'Advanced' tab, then click the 'Claims' button. Here you can see the various Claims assigned to a client and is where you add your Access Policies to your clients.","title":"Viewing Client Access Policies"},{"location":"Audit/Auditing.html","text":"Auditing within AdminUI Audit records can either be viewed through the main navigation bar option Auditing, or through the Auditing tab on a User or Resource. On these pages you can: Filter audit records Time based Source, Origin of the audit event Action, the action of the event Resource, the entity the action was applied to Source, the entity performing the action Download audit records in CSV format To view audit records you need to either have the Auditing permission or All permission. Auditing Configuration The following configuration settings can be used to control Auditing within AdminUI AuditRecordsConnectionString The database connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English (en-GB), supported cultures and their values are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Set to true or false , if missing will default to true , if false no audit records will be generated for read actions e.g when a user views resources though AdminUI IdentityServer Auditing Events that happen inside IdentityServer can be recorded into the same audit database as AdminUI, providing a single view of all Identity related events. To learn how to integrate your IdentityServer auditing into AdminUI, follow our walkthrough here","title":"Auditing"},{"location":"Audit/Auditing.html#auditing-within-adminui","text":"Audit records can either be viewed through the main navigation bar option Auditing, or through the Auditing tab on a User or Resource. On these pages you can: Filter audit records Time based Source, Origin of the audit event Action, the action of the event Resource, the entity the action was applied to Source, the entity performing the action Download audit records in CSV format To view audit records you need to either have the Auditing permission or All permission.","title":"Auditing within AdminUI"},{"location":"Audit/Auditing.html#auditing-configuration","text":"The following configuration settings can be used to control Auditing within AdminUI AuditRecordsConnectionString The database connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English (en-GB), supported cultures and their values are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Set to true or false , if missing will default to true , if false no audit records will be generated for read actions e.g when a user views resources though AdminUI","title":"Auditing Configuration"},{"location":"Audit/Auditing.html#identityserver-auditing","text":"Events that happen inside IdentityServer can be recorded into the same audit database as AdminUI, providing a single view of all Identity related events. To learn how to integrate your IdentityServer auditing into AdminUI, follow our walkthrough here","title":"IdentityServer Auditing"},{"location":"Claim_Types/Managing_Claimtypes.html","text":"Searching for Claim Types You can find Claim Types in the application using the Search functionality. Start typing and the Claim Type will appear if there is a match. Create Claim To create a Claim Type click the \"Add Claim Type\" on the Claim Types list screen. A dialog will appear enabling you to create a new the Claim Type: Once you have entered all details for your Claim Type, click the \"Add\" button, you should then see a success dialogue informing you that your Claim Type has been created. Editing a Claim Type Select the Claim Type you want to edit, this will open the Claim Type details screen. From this screen you can modify the properties of the Claim Type. Once you have made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Deleting a Claim Type Claim Types can be deleted through the \"Delete\" button on the Claim Types details screen. On deletion, any user that has a claim of that type will have that claim removed. This action cannot be undone. Reserved Claim Types Some Claim Types that are integral to IdentityServer functionality will be marked as reserved , they cannot be deleted and have restricted editability.","title":"Claim Types"},{"location":"Claim_Types/Managing_Claimtypes.html#searching-for-claim-types","text":"You can find Claim Types in the application using the Search functionality. Start typing and the Claim Type will appear if there is a match.","title":"Searching for Claim Types"},{"location":"Claim_Types/Managing_Claimtypes.html#create-claim","text":"To create a Claim Type click the \"Add Claim Type\" on the Claim Types list screen. A dialog will appear enabling you to create a new the Claim Type: Once you have entered all details for your Claim Type, click the \"Add\" button, you should then see a success dialogue informing you that your Claim Type has been created.","title":"Create Claim"},{"location":"Claim_Types/Managing_Claimtypes.html#editing-a-claim-type","text":"Select the Claim Type you want to edit, this will open the Claim Type details screen. From this screen you can modify the properties of the Claim Type. Once you have made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved.","title":"Editing a Claim Type"},{"location":"Claim_Types/Managing_Claimtypes.html#deleting-a-claim-type","text":"Claim Types can be deleted through the \"Delete\" button on the Claim Types details screen. On deletion, any user that has a claim of that type will have that claim removed. This action cannot be undone.","title":"Deleting a Claim Type"},{"location":"Claim_Types/Managing_Claimtypes.html#reserved-claim-types","text":"Some Claim Types that are integral to IdentityServer functionality will be marked as reserved , they cannot be deleted and have restricted editability.","title":"Reserved Claim Types"},{"location":"Clients/Adding_Clients.html","text":"Adding a Client From the Clients page, click the \"Add Client\" button Client Type Choose the client type you require from the 8 available options: Single Page App A client-side application running in a browser. Web App A server-side application running on your infrastructure. Native A desktop or mobile application running on a user's device. Machine A machine-to-machine method of communication. Device An IoT application or otherwise browserless or input constrained device. SAML Service Provider A SAML 2.0 service provider commonly used by government and educational institutions. WS-Fed Relying Party A WS-Federation relying party commonly used by older Microsoft applications. Single Page App (legacy) A client-side application running in a browser using previous OAuth Working Group recommendations. Proceed with the required Client and follow instructions for each client type. For this example i will be setting up a Single Page application, many of these steps are relevant when setting up other client types. After selecting the SPA options you will see a dialogue enabling you to add the following: Client ID Unique identifier Display Name Application name that will be seen on Consent Screens Display URL Application URL that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens. Note - must be HTTPS Description Application description for use within AdminUI Require Consent Specifies whether a consent screen is required for this client Click next once all details have been filled in as required: SPA Callback Url You will be asked to enter a Callback URL, which is the endpoint where tokens will be sent to. This can be configured more after setup, and is the full path of the redirect URL. This must be over HTTPS: SPA Logout Url You will next be asked to enter a Post-Logout URL. This is optional and you can configure more after setup - it is where users can be returned to after logging out. This must be HTTPS: SPA Identity Resources You will next be asked to select the Identity Resources that this client can access: SPA Protected Resources At this point, you can now choose the Protected Resources that this client can access: SPA Details Review You will get the chance to finally review all details at the end of the application process, when you will see a summary of all details entered so far. To edit, click the pencil icon and you will be returned to the page to amend those details. For instance, editing the Display Name will return you to the Basic Details Back If at any point after entering the basic details you wish to go back, you can navigate backwards and forwards within the application using the links at the foot of the modal, or cancel out of the entire process: Success Once clicking submit, you will have successfully added a SPA Client. Secrets For relevant clients, you will be asked to optionally add some secrets. You can select a Secret Type of either a Shared Secret or an X509 Certificate Thumbprint . Once you have filled out and entered the required Secret details, click \"Add\" and the Secret will be added to the client on creation","title":"Adding Clients"},{"location":"Clients/Adding_Clients.html#adding-a-client","text":"From the Clients page, click the \"Add Client\" button","title":"Adding a Client"},{"location":"Clients/Adding_Clients.html#client-type","text":"Choose the client type you require from the 8 available options: Single Page App A client-side application running in a browser. Web App A server-side application running on your infrastructure. Native A desktop or mobile application running on a user's device. Machine A machine-to-machine method of communication. Device An IoT application or otherwise browserless or input constrained device. SAML Service Provider A SAML 2.0 service provider commonly used by government and educational institutions. WS-Fed Relying Party A WS-Federation relying party commonly used by older Microsoft applications. Single Page App (legacy) A client-side application running in a browser using previous OAuth Working Group recommendations. Proceed with the required Client and follow instructions for each client type. For this example i will be setting up a Single Page application, many of these steps are relevant when setting up other client types. After selecting the SPA options you will see a dialogue enabling you to add the following: Client ID Unique identifier Display Name Application name that will be seen on Consent Screens Display URL Application URL that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens. Note - must be HTTPS Description Application description for use within AdminUI Require Consent Specifies whether a consent screen is required for this client Click next once all details have been filled in as required:","title":"Client Type"},{"location":"Clients/Adding_Clients.html#spa-callback-url","text":"You will be asked to enter a Callback URL, which is the endpoint where tokens will be sent to. This can be configured more after setup, and is the full path of the redirect URL. This must be over HTTPS:","title":"SPA Callback Url"},{"location":"Clients/Adding_Clients.html#spa-logout-url","text":"You will next be asked to enter a Post-Logout URL. This is optional and you can configure more after setup - it is where users can be returned to after logging out. This must be HTTPS:","title":"SPA Logout Url"},{"location":"Clients/Adding_Clients.html#spa-identity-resources","text":"You will next be asked to select the Identity Resources that this client can access:","title":"SPA Identity Resources"},{"location":"Clients/Adding_Clients.html#spa-protected-resources","text":"At this point, you can now choose the Protected Resources that this client can access:","title":"SPA Protected Resources"},{"location":"Clients/Adding_Clients.html#spa-details-review","text":"You will get the chance to finally review all details at the end of the application process, when you will see a summary of all details entered so far. To edit, click the pencil icon and you will be returned to the page to amend those details. For instance, editing the Display Name will return you to the Basic Details","title":"SPA Details Review"},{"location":"Clients/Adding_Clients.html#back","text":"If at any point after entering the basic details you wish to go back, you can navigate backwards and forwards within the application using the links at the foot of the modal, or cancel out of the entire process:","title":"Back"},{"location":"Clients/Adding_Clients.html#success","text":"Once clicking submit, you will have successfully added a SPA Client.","title":"Success"},{"location":"Clients/Adding_Clients.html#secrets","text":"For relevant clients, you will be asked to optionally add some secrets. You can select a Secret Type of either a Shared Secret or an X509 Certificate Thumbprint . Once you have filled out and entered the required Secret details, click \"Add\" and the Secret will be added to the client on creation","title":"Secrets"},{"location":"Clients/Adding_a_Saml_client.html","text":"Setting up a SAML Client with AdminUI and SAML2P In order to set up a new SAML Service Provider client you will need to Navigate to /clients and click the \"Add Client\" button and select SAML Service Provider from the list of client types. *Note you will need a license for SAML2P in order to integrate with a SAML Client. You can get a demo license by visiting our SAML2P product page If you have a SAML metadata document from the SAML Identity Provider you are connecting to, you can fill in most of these fields using that. Name Type Description EntityID SAML Entity ID SAML Entity ID (This will be in the metadata document) DisplayName Client display name Client Display Name used in AdminUI, this has no effect on the Client itself Description (Optional) Description of the client Description of the Client, may be left blank. ASC Endpoint (http:// or https://) AssertionConsumerService AssertionConsumerService, can be found in your metadata file, made of an Endpoint, an Index and a binding type. SLO Endpoint (Optional) (http:// or https://) SingleLogoutService SingleLogoutService, can be found in your metadata file, made of an Endpoint, an Index and a binding type. *ACS/SLO Endpoints are required to be in a valid http:// or https:// format. Although it is always recommended to use TLS in production for security. If additional ACS/SLO Endpoints are required, they may be set after Client creation in the Client Configuration pages. Find out more info on how to configure a SAML Client The next screen allows you to enter the Identity Resources your client will be able to access. This list comes from the list of predefined Identity Resources. You must select at least one Identity Resource to proceed to the next screen. The final screen allows you to view the summary of the proposed client application and make any appropriate changes. Configuring a SAML Client. Once a SAML Client has been created it can be further configured by finding the Client within the Clients page and clicking on it. Here it is possible to modify more advanced settings, add additional resources, modify ACS/SLO Endpoints and access audits specific to the Client. The SAML tab contains the Clients SAML specific settings; Name Description ACS Endpoints Add, remove or edit ACS endpoints SLO Endpoints Add, remove or edit SLO endpoints Claims Mappings Map AdminUI Claim Types to Saml ClaimTypes Request Add, remove and configure signing certificates Response Add, replace or remove and configure an encryption certificate To find out about all of the possible configurable options for a SAML Service Provider, vist our SAML2P documentation","title":"Adding a SAML Client"},{"location":"Clients/Adding_a_Saml_client.html#setting-up-a-saml-client-with-adminui-and-saml2p","text":"In order to set up a new SAML Service Provider client you will need to Navigate to /clients and click the \"Add Client\" button and select SAML Service Provider from the list of client types. *Note you will need a license for SAML2P in order to integrate with a SAML Client. You can get a demo license by visiting our SAML2P product page If you have a SAML metadata document from the SAML Identity Provider you are connecting to, you can fill in most of these fields using that. Name Type Description EntityID SAML Entity ID SAML Entity ID (This will be in the metadata document) DisplayName Client display name Client Display Name used in AdminUI, this has no effect on the Client itself Description (Optional) Description of the client Description of the Client, may be left blank. ASC Endpoint (http:// or https://) AssertionConsumerService AssertionConsumerService, can be found in your metadata file, made of an Endpoint, an Index and a binding type. SLO Endpoint (Optional) (http:// or https://) SingleLogoutService SingleLogoutService, can be found in your metadata file, made of an Endpoint, an Index and a binding type. *ACS/SLO Endpoints are required to be in a valid http:// or https:// format. Although it is always recommended to use TLS in production for security. If additional ACS/SLO Endpoints are required, they may be set after Client creation in the Client Configuration pages. Find out more info on how to configure a SAML Client The next screen allows you to enter the Identity Resources your client will be able to access. This list comes from the list of predefined Identity Resources. You must select at least one Identity Resource to proceed to the next screen. The final screen allows you to view the summary of the proposed client application and make any appropriate changes.","title":"Setting up a SAML Client with AdminUI and SAML2P"},{"location":"Clients/Adding_a_Saml_client.html#configuring-a-saml-client","text":"Once a SAML Client has been created it can be further configured by finding the Client within the Clients page and clicking on it. Here it is possible to modify more advanced settings, add additional resources, modify ACS/SLO Endpoints and access audits specific to the Client. The SAML tab contains the Clients SAML specific settings; Name Description ACS Endpoints Add, remove or edit ACS endpoints SLO Endpoints Add, remove or edit SLO endpoints Claims Mappings Map AdminUI Claim Types to Saml ClaimTypes Request Add, remove and configure signing certificates Response Add, replace or remove and configure an encryption certificate To find out about all of the possible configurable options for a SAML Service Provider, vist our SAML2P documentation","title":"Configuring a SAML Client."},{"location":"Clients/Adding_a_WsFed_client.html","text":"Setting up a WS-Federation Relying Party In order to set up a new WS-Federation Relying Party Provider client, you will need to navigate to the /clients and click the \u2018Add Client\u2019 button and select \u2018WS-Fed Replying Party\u2019 from the list of client types. Please note that you will need a license for WS-Federation in order to integrate with the WS-Federation Relying Party. You can get a demo license by visiting our Ws-Fed product page . The unique WS-fed wizard screens will contain the following fields: Name Type Description Realm String value registered Unique name for the client Display name Client display name Has no effect no the client itself, will be displayed on the user consent screen Description (optional) Description of the client Callback Url (http:// or https://) A url endpoint Takes a Url for the endpoint which will be used to receive the authentication tokens e.g https://mydomain.com/sign-in The Callback Url is required to be in a valid http:// or https:// format. Although it is always recommended to use TLS in production. The next screen allows you to enter the Identity Resources your client will be able to access. This list comes from the list of predefined Identity Resources. You must select at least one Identity Resource to proceed to the next screen. The final screen you can view the summary of the proposed client application and make any appropriate changes. Configuring WS-Fed Client Once a WS-Fed Client has been created it can be configured by finding the Client within the Clients page and clicking on it. Here it is possible to modify more advanced settings, add additional resources, modify token type and access audit specific to the Client. The WS-Fed tab contains the Client\u2019s WS-Federation specific settings; Name Description Token Type Select from default, SAML 1.1 or SAML 2.0 Signature Algorithm Use the default or change to a specific RSA algorithm Digest Algorithm Use the default or change to use a specific SHA algorithm SAML Name Id Format Enter the format that will be used for the SAML name id To find out all the configurable options for a WS-Fed Service provider, check out our WS-Fed documentation","title":"Adding a WS-Fed Client"},{"location":"Clients/Adding_a_WsFed_client.html#setting-up-a-ws-federation-relying-party","text":"In order to set up a new WS-Federation Relying Party Provider client, you will need to navigate to the /clients and click the \u2018Add Client\u2019 button and select \u2018WS-Fed Replying Party\u2019 from the list of client types. Please note that you will need a license for WS-Federation in order to integrate with the WS-Federation Relying Party. You can get a demo license by visiting our Ws-Fed product page . The unique WS-fed wizard screens will contain the following fields: Name Type Description Realm String value registered Unique name for the client Display name Client display name Has no effect no the client itself, will be displayed on the user consent screen Description (optional) Description of the client Callback Url (http:// or https://) A url endpoint Takes a Url for the endpoint which will be used to receive the authentication tokens e.g https://mydomain.com/sign-in The Callback Url is required to be in a valid http:// or https:// format. Although it is always recommended to use TLS in production. The next screen allows you to enter the Identity Resources your client will be able to access. This list comes from the list of predefined Identity Resources. You must select at least one Identity Resource to proceed to the next screen. The final screen you can view the summary of the proposed client application and make any appropriate changes.","title":"Setting up a WS-Federation Relying Party"},{"location":"Clients/Adding_a_WsFed_client.html#configuring-ws-fed-client","text":"Once a WS-Fed Client has been created it can be configured by finding the Client within the Clients page and clicking on it. Here it is possible to modify more advanced settings, add additional resources, modify token type and access audit specific to the Client. The WS-Fed tab contains the Client\u2019s WS-Federation specific settings; Name Description Token Type Select from default, SAML 1.1 or SAML 2.0 Signature Algorithm Use the default or change to a specific RSA algorithm Digest Algorithm Use the default or change to use a specific SHA algorithm SAML Name Id Format Enter the format that will be used for the SAML name id To find out all the configurable options for a WS-Fed Service provider, check out our WS-Fed documentation","title":"Configuring WS-Fed Client"},{"location":"Clients/Clone_a_client.html","text":"Clone Client Client cloning is the process of taking all the information from an existing client to create a new one. To use this feature, view a client and press the clone button. When you press the Clone button you will see the following dialogue: Client ID The Unique identifier Display Name Application name that will be seen on Consent Screens Using this dialogue you can change the Client ID to a value which best fits your requirements, along with the Display Name. The remaining client information will be taken from the current client. Once you press the Save button a new client will be created. You will automatically navigate to the new client. Clone Secrets Clone Secrets Clone existing secrets This option is available when trying to clone a client that can hold a secret value. This includes Web App, Native and Machine client types. Clone Certificates Clone Certificates Clone existing certificates This option is available when trying to clone a client that can hold certificate values. This is only available for the SAML client type.","title":"Clone Client"},{"location":"Clients/Clone_a_client.html#clone-client","text":"Client cloning is the process of taking all the information from an existing client to create a new one. To use this feature, view a client and press the clone button. When you press the Clone button you will see the following dialogue: Client ID The Unique identifier Display Name Application name that will be seen on Consent Screens Using this dialogue you can change the Client ID to a value which best fits your requirements, along with the Display Name. The remaining client information will be taken from the current client. Once you press the Save button a new client will be created. You will automatically navigate to the new client.","title":"Clone Client"},{"location":"Clients/Clone_a_client.html#clone-secrets","text":"Clone Secrets Clone existing secrets This option is available when trying to clone a client that can hold a secret value. This includes Web App, Native and Machine client types.","title":"Clone Secrets"},{"location":"Clients/Clone_a_client.html#clone-certificates","text":"Clone Certificates Clone existing certificates This option is available when trying to clone a client that can hold certificate values. This is only available for the SAML client type.","title":"Clone Certificates"},{"location":"Clients/Deleting_clients.html","text":"Delete Clients During the Edit Clients dialogue, a Delete button option will appear. If this is clicked, you will be warned as to whether you want to permanently delete this Client. You can change your mind and close the dialogue or not delete, or click \"Delete\" to proceed with this deletion.","title":"Deleting Clients"},{"location":"Clients/Deleting_clients.html#delete-clients","text":"During the Edit Clients dialogue, a Delete button option will appear. If this is clicked, you will be warned as to whether you want to permanently delete this Client. You can change your mind and close the dialogue or not delete, or click \"Delete\" to proceed with this deletion.","title":"Delete Clients"},{"location":"Clients/Editing_clients.html","text":"Editing a Client Access the Client Details by selecting the Client you want to edit in the Clients list You will notice that there are several key tabs, which we will cover in detail. You will observe the tabs available to edit are Details , Resources , Application URLs and Advanced . On the Details tab, there is a display of the following: Client ID Readonly display of the Unique identifier Display URL Application URL that will be seen on Consent Screens Display Name Application name that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens (Must be HTTPS) Description Application description for use within AdminUI Status The status of the Client (e.g. Disabled/Enabled) There is the option to Save the updated changes, or to Delete the Client, which will be covered in more detail later. Editing Client Resources It is possible to assign and unassign Client Resources via the Resources tab of the Client Details Edit page. Click the Client \"Resources\" tab: You will then be able to switch between either Protected Resources or Identity Resources. Assigning Client Resources To assign Client Resources, after selecting either the Protected Resources or Identity Resources button, you will see a dialogue used throughout AdminUI that allows you to assign or unassign resources via clicking the arrow: Successful Client Details Edit Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Your changes should be active in the Client immediately. Updating Application URLs Through the Client interface on the Application URLs tab, you will see the option to updated Application URLs. You can add a new URL via the text-box, and the \"plus\" button icon to add to the list of Application URLs. There are several options for each URL: Callback can send tokens to this URL Signout can redirect to this URL after signout CORS Domain that can make cross-origin requests Advanced Tokens Configuration Tokens can be configured further via the Advanced Screen. Advanced Claims Configuration Claims can be configured via the Advanced tab by selecting Claims. Advanced Restrictions Configuration Restrictions configuration can be added via the Advanced Clients tab.","title":"Editing Clients"},{"location":"Clients/Editing_clients.html#editing-a-client","text":"Access the Client Details by selecting the Client you want to edit in the Clients list You will notice that there are several key tabs, which we will cover in detail. You will observe the tabs available to edit are Details , Resources , Application URLs and Advanced . On the Details tab, there is a display of the following: Client ID Readonly display of the Unique identifier Display URL Application URL that will be seen on Consent Screens Display Name Application name that will be seen on Consent Screens Logo URL Application Logo that will be seen on Consent Screens (Must be HTTPS) Description Application description for use within AdminUI Status The status of the Client (e.g. Disabled/Enabled) There is the option to Save the updated changes, or to Delete the Client, which will be covered in more detail later.","title":"Editing a Client"},{"location":"Clients/Editing_clients.html#editing-client-resources","text":"It is possible to assign and unassign Client Resources via the Resources tab of the Client Details Edit page. Click the Client \"Resources\" tab: You will then be able to switch between either Protected Resources or Identity Resources.","title":"Editing Client Resources"},{"location":"Clients/Editing_clients.html#assigning-client-resources","text":"To assign Client Resources, after selecting either the Protected Resources or Identity Resources button, you will see a dialogue used throughout AdminUI that allows you to assign or unassign resources via clicking the arrow:","title":"Assigning Client Resources"},{"location":"Clients/Editing_clients.html#successful-client-details-edit","text":"Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Your changes should be active in the Client immediately.","title":"Successful Client Details Edit"},{"location":"Clients/Editing_clients.html#updating-application-urls","text":"Through the Client interface on the Application URLs tab, you will see the option to updated Application URLs. You can add a new URL via the text-box, and the \"plus\" button icon to add to the list of Application URLs. There are several options for each URL: Callback can send tokens to this URL Signout can redirect to this URL after signout CORS Domain that can make cross-origin requests","title":"Updating Application URLs"},{"location":"Clients/Editing_clients.html#advanced-tokens-configuration","text":"Tokens can be configured further via the Advanced Screen.","title":"Advanced Tokens Configuration"},{"location":"Clients/Editing_clients.html#advanced-claims-configuration","text":"Claims can be configured via the Advanced tab by selecting Claims.","title":"Advanced Claims Configuration"},{"location":"Clients/Editing_clients.html#advanced-restrictions-configuration","text":"Restrictions configuration can be added via the Advanced Clients tab.","title":"Advanced Restrictions Configuration"},{"location":"Clients/Read_only_client.html","text":"Read Only API (admin_api_readonly Scope) The addition of the admin_api_readonly scope allows you to create a client that has read only access to the Users endpoint of AdminUI API. This allows a client to access user information but not manipulate it in any way. Creating a Read Only Client Creating a client to use the admin_api_readonly scope is the same as creating any other client, however, when assigning the permitted API Scopes to the client, instead of assigning the admin_api scope, we instead assign the admin_api_readonly scope.","title":"Read Only Client"},{"location":"Clients/Read_only_client.html#read-only-api-admin_api_readonly-scope","text":"The addition of the admin_api_readonly scope allows you to create a client that has read only access to the Users endpoint of AdminUI API. This allows a client to access user information but not manipulate it in any way.","title":"Read Only API (admin_api_readonly Scope)"},{"location":"Clients/Read_only_client.html#creating-a-read-only-client","text":"Creating a client to use the admin_api_readonly scope is the same as creating any other client, however, when assigning the permitted API Scopes to the client, instead of assigning the admin_api scope, we instead assign the admin_api_readonly scope.","title":"Creating a Read Only Client"},{"location":"Clients/Searching_for_clients.html","text":"Searching for Clients You can find Clients in the application using the Search functionality. Start typing and the client will appear if there is a match.","title":"Searching for Clients"},{"location":"Clients/Searching_for_clients.html#searching-for-clients","text":"You can find Clients in the application using the Search functionality. Start typing and the client will appear if there is a match.","title":"Searching for Clients"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html","text":"AdminUI configuration is set using environment variables. These can be setup in different forms, including a web.config file, a docker-compose.yml file or Azure appsettings. Note: In Azure or IIS environments variables are nested with either __ (Linux environments) or : (Windows environments). E.g: DataProtection:Persistence:Type Running AdminUI On a Different Port If you need to configure the ports for the website you can add the following section to your appsettings.json file: \"Kestrel\": { \"Endpoints\": { \"Http\": { //Your new Url Here \"Url\": \"http://localhost:5020\" } } } If you would like to see all possible config options for the Kestrel property you can find them here . AdminUI Configuration Settings Note: In AdminUI 4.2.0 and 5.1.0 onwards, the env.js file is no longer used for configuration and changes do not need to be made to this file. It can be removed if you choose. AuthorityUrl The IdentityServer installation protecting AdminUI UiUrl The AdminUI website AzureAppServiceLogging (optional) Used for debugging - see the enable logging page for more details. AdminUIClientSecret The AdminUI client shared secret value in plain text DbProvider Supported types and their values are: SqlServer MySql (Note: AdminUI requires the MySQL setting lower_case_table_names to be false ) PostgreSql IdentityConnectionString The connection string for the Identity database (Users, Claim Types, Roles etc.) IdentityServerConnectionString The connection string for the IdentityServer database (Clients, Resources, Persited Grants etc.) OperationalConnectionString (Optional) The connection string for the Persisted Grants DbContext. If not supplied, AdminUI will use the IdentityServerConnectionString DataProtectionConnectionString (Optional) The connection string for the DataProtectionKey DbContext. If not supplied, AdminUI will use the IdentityServerConnectionString . Only needs configuring if you are using a database to store protection keys. RequireHttpsMetadata When true ensures IdentityServer discovery endpoint uses TLS. Should be true for production LicenseKey A valid license key for AdminUI AdminUIClientSecret The AdminUI client shared secret value in plain text TargetIdentityServer4 If set to true, AdminUI will target IdentityServer4 schema. If set to false, AdminUI will target Duende IdentityServer schema. Defaults to false. PasswordPolicy RequireDigit Defaults to true RequireLowercase Defaults to true RequireNonAlphanumeric Defaults to true RequireUppercase Defaults to true RequiredLength Defaults to 6 RequiredUniqueChars Defaults to 1 UsernamePolicy AllowedUserNameCharacters - Defaults to abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+ RequireUniqueEmail - Defaults to true AuditRecordsConnectionString The database connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English en-GB . Supported languages are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Defaults to true . If false , no audit records will be generated for read actions (e.g when a user views resources though AdminUI) LoggingMinimumLevel Defaults to info . Supported logging levels are debug info warning error critical LoggingOutputTemplate Defaults to [{Timestamp:dd-MM-yyyy HH:mm:ss} {Level}] {Message}{NewLine}{Exception} . For more infomation see the serilog docs . AddUserPassword Defaults to false . If true , allows for setting a users password on creation (this is for demo purposes only, do not use in production), see more here AzureAppServiceLogging (optional) Used for debugging the API - see the enable logging page for more details. Feature Flags DefaultUserValidation - Defaults to false . If set to true AdminUI will not prompt you to remove the default user if present. EnableEnforcerAuthorization - Defaults to false . If set to true will use the Enforcer authorization engine for more fine grained access control. More info can be found in our 6.3 release article EnableSharedScopes - Defaults to false . If set to true AdminUI will allow scopes to be shared between protected resources. EnableSessionManagement - Defaults to true . Allows the management of the IdentityServer Duende session management feature . If set to false AdminUI will not show the SessionManagment tables when viewing or editing users. DataProtection Used for configuration of Cookie protection and peristence. Persistence - The type of persistence can be FileSystem or Database, these require different setup as shown below Type - FileSystem Location - Location to persist keys OR Type - Database DbProvider Supported types and their values are: SqlServer MySql (Note: AdminUI requires the MySQL setting lower_case_table_names to be false ) PostgreSql DataProtectionConnectionString - The connection string for the data protection database Protection The certficate or keyvault that will protect the cookies. The two available types are KeyVault and Certifcate. A Certificate can be provided by location or by thumbprint. Type - KeyVault KeyIdentifier - The Azure KeyVault certificate identifier used for key encryption. ClientId - The Application Client Id Vault - The KeyVault public Uri Secret - (Optional) The client secret to use for authentication. Optional valid only for Azure hosted scenarios OR Type - Certificate (To protect with certificate you can provide either a thumbprint or a location) CertificateType - Thumbprint Thumbprint - The thumbprint of the certificate that is installed either for the user or the machine. OR CertificateType - File Location - The location on disk of the certificate. We recommend using a PFX file as private key access is necessary. Password (Optional) - The password for the certificate Filesystem data protection and persistence is intended for IIS installations - we recommend a using the KeyVault method for protection alongside a database for persistence and protection when installing AdminUI in Azure. TargetIdentityServer4 Flag The TargetIdentityServer4 flag in the API Configuration is used to determine what version of IdentityServer you want your AdminUI to target. If you're working with an IdentityServer4 database, you'll want to set this flag to true . If you're working with a Duende IdentityServer database, you'll want to set this flag to false . This configuration setting will change how AdminUI displays certain entities such as Protected Resources, as well as if it will display certain views. This setting will also change what migrations will be run by the migration tool. Example Configurations appsettings.json: { \"UiUrl\": \"http://localhost:5000\", \"AuthorityUrl\": \"https://localhost:5003\", \"AzureAppServiceLogging\": false, \"LoggingMinimumLevel\": \"Info\", \"EFLoggingMinimumLevel\": \"Warning\", \"DbProvider\": \"SqlServer\", \"IdentityConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\", \"IdentityServerConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\", \"AuditRecordsConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\", \"DataProtectionConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\", \"RequireHttpsMetadata\": false, \"LicenseKey\": \"\", \"PasswordPolicy\": { \"RequireDigit\": true, \"RequireLowercase\": true, \"RequireNonAlphanumeric\": true, \"RequireUppercase\": true, \"RequiredLength\": 6, \"RequiredUniqueChars\": 1 }, \"UsernamePolicy\": { \"AllowedUserNameCharacters\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+\", \"RequireUniqueEmail\": false }, \"ReferenceTokens\": { \"UseReferenceTokens\": false, \"Secret\": \"\" }, \"TargetIdentityServer4\": false, \"FeatureFlags\": { \"DefaultUserValidation\": true, \"AddUserPassword\": false, \"EnableEnforcerAuthorization\": false, \"EnableSharedScopes\": false, \"EnableSessionManagement\": true }, \"DataProtection\": { \"Persistence\": { \"Type\": \"Database\", \"DbProvider\": \"SqlServer\", \"DataProtectionConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\" }, \"Protection\": { \"Type\": \"Certificate\", \"CertificateType\": \"Thumbprint\", \"Thumbprint\": \"c09fb8e928ef97fbd2a78be9bfe99341a2175af4\" } } }","title":"Configuring AdminUI"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html#running-adminui-on-a-different-port","text":"If you need to configure the ports for the website you can add the following section to your appsettings.json file: \"Kestrel\": { \"Endpoints\": { \"Http\": { //Your new Url Here \"Url\": \"http://localhost:5020\" } } } If you would like to see all possible config options for the Kestrel property you can find them here .","title":"Running AdminUI On a Different Port"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html#adminui-configuration-settings","text":"Note: In AdminUI 4.2.0 and 5.1.0 onwards, the env.js file is no longer used for configuration and changes do not need to be made to this file. It can be removed if you choose. AuthorityUrl The IdentityServer installation protecting AdminUI UiUrl The AdminUI website AzureAppServiceLogging (optional) Used for debugging - see the enable logging page for more details. AdminUIClientSecret The AdminUI client shared secret value in plain text DbProvider Supported types and their values are: SqlServer MySql (Note: AdminUI requires the MySQL setting lower_case_table_names to be false ) PostgreSql IdentityConnectionString The connection string for the Identity database (Users, Claim Types, Roles etc.) IdentityServerConnectionString The connection string for the IdentityServer database (Clients, Resources, Persited Grants etc.) OperationalConnectionString (Optional) The connection string for the Persisted Grants DbContext. If not supplied, AdminUI will use the IdentityServerConnectionString DataProtectionConnectionString (Optional) The connection string for the DataProtectionKey DbContext. If not supplied, AdminUI will use the IdentityServerConnectionString . Only needs configuring if you are using a database to store protection keys. RequireHttpsMetadata When true ensures IdentityServer discovery endpoint uses TLS. Should be true for production LicenseKey A valid license key for AdminUI AdminUIClientSecret The AdminUI client shared secret value in plain text TargetIdentityServer4 If set to true, AdminUI will target IdentityServer4 schema. If set to false, AdminUI will target Duende IdentityServer schema. Defaults to false. PasswordPolicy RequireDigit Defaults to true RequireLowercase Defaults to true RequireNonAlphanumeric Defaults to true RequireUppercase Defaults to true RequiredLength Defaults to 6 RequiredUniqueChars Defaults to 1 UsernamePolicy AllowedUserNameCharacters - Defaults to abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+ RequireUniqueEmail - Defaults to true AuditRecordsConnectionString The database connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English en-GB . Supported languages are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Defaults to true . If false , no audit records will be generated for read actions (e.g when a user views resources though AdminUI) LoggingMinimumLevel Defaults to info . Supported logging levels are debug info warning error critical LoggingOutputTemplate Defaults to [{Timestamp:dd-MM-yyyy HH:mm:ss} {Level}] {Message}{NewLine}{Exception} . For more infomation see the serilog docs . AddUserPassword Defaults to false . If true , allows for setting a users password on creation (this is for demo purposes only, do not use in production), see more here AzureAppServiceLogging (optional) Used for debugging the API - see the enable logging page for more details. Feature Flags DefaultUserValidation - Defaults to false . If set to true AdminUI will not prompt you to remove the default user if present. EnableEnforcerAuthorization - Defaults to false . If set to true will use the Enforcer authorization engine for more fine grained access control. More info can be found in our 6.3 release article EnableSharedScopes - Defaults to false . If set to true AdminUI will allow scopes to be shared between protected resources. EnableSessionManagement - Defaults to true . Allows the management of the IdentityServer Duende session management feature . If set to false AdminUI will not show the SessionManagment tables when viewing or editing users. DataProtection Used for configuration of Cookie protection and peristence. Persistence - The type of persistence can be FileSystem or Database, these require different setup as shown below Type - FileSystem Location - Location to persist keys OR Type - Database DbProvider Supported types and their values are: SqlServer MySql (Note: AdminUI requires the MySQL setting lower_case_table_names to be false ) PostgreSql DataProtectionConnectionString - The connection string for the data protection database Protection The certficate or keyvault that will protect the cookies. The two available types are KeyVault and Certifcate. A Certificate can be provided by location or by thumbprint. Type - KeyVault KeyIdentifier - The Azure KeyVault certificate identifier used for key encryption. ClientId - The Application Client Id Vault - The KeyVault public Uri Secret - (Optional) The client secret to use for authentication. Optional valid only for Azure hosted scenarios OR Type - Certificate (To protect with certificate you can provide either a thumbprint or a location) CertificateType - Thumbprint Thumbprint - The thumbprint of the certificate that is installed either for the user or the machine. OR CertificateType - File Location - The location on disk of the certificate. We recommend using a PFX file as private key access is necessary. Password (Optional) - The password for the certificate Filesystem data protection and persistence is intended for IIS installations - we recommend a using the KeyVault method for protection alongside a database for persistence and protection when installing AdminUI in Azure.","title":"AdminUI Configuration Settings"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html#targetidentityserver4-flag","text":"The TargetIdentityServer4 flag in the API Configuration is used to determine what version of IdentityServer you want your AdminUI to target. If you're working with an IdentityServer4 database, you'll want to set this flag to true . If you're working with a Duende IdentityServer database, you'll want to set this flag to false . This configuration setting will change how AdminUI displays certain entities such as Protected Resources, as well as if it will display certain views. This setting will also change what migrations will be run by the migration tool.","title":"TargetIdentityServer4 Flag"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html#example-configurations","text":"","title":"Example Configurations"},{"location":"Configuration_and_Integration/Configuring_AdminUI.html#appsettingsjson","text":"{ \"UiUrl\": \"http://localhost:5000\", \"AuthorityUrl\": \"https://localhost:5003\", \"AzureAppServiceLogging\": false, \"LoggingMinimumLevel\": \"Info\", \"EFLoggingMinimumLevel\": \"Warning\", \"DbProvider\": \"SqlServer\", \"IdentityConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\", \"IdentityServerConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\", \"AuditRecordsConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\", \"DataProtectionConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\", \"RequireHttpsMetadata\": false, \"LicenseKey\": \"\", \"PasswordPolicy\": { \"RequireDigit\": true, \"RequireLowercase\": true, \"RequireNonAlphanumeric\": true, \"RequireUppercase\": true, \"RequiredLength\": 6, \"RequiredUniqueChars\": 1 }, \"UsernamePolicy\": { \"AllowedUserNameCharacters\": \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+\", \"RequireUniqueEmail\": false }, \"ReferenceTokens\": { \"UseReferenceTokens\": false, \"Secret\": \"\" }, \"TargetIdentityServer4\": false, \"FeatureFlags\": { \"DefaultUserValidation\": true, \"AddUserPassword\": false, \"EnableEnforcerAuthorization\": false, \"EnableSharedScopes\": false, \"EnableSessionManagement\": true }, \"DataProtection\": { \"Persistence\": { \"Type\": \"Database\", \"DbProvider\": \"SqlServer\", \"DataProtectionConnectionString\": \"Server=localhost;User Id=AdminUI;Password=Password123!;Database=IdentityExpressDb;\" }, \"Protection\": { \"Type\": \"Certificate\", \"CertificateType\": \"Thumbprint\", \"Thumbprint\": \"c09fb8e928ef97fbd2a78be9bfe99341a2175af4\" } } }","title":"appsettings.json:"},{"location":"Configuration_and_Integration/Enabling_Logging.html","text":"AdminUI outputs to the console by default, which most hosting options can read from. Logging with IIS Setting the stdoutLogEnabled attribute to true in the web.config or IIS configuration manager enables logging. This attribute is found in: system.webServer > aspNetCore . The log file output location is controlled by the stdoutLogFile attribute. In the example below, logging has been enabled in the web.config and all log files will be output to the .\\logs\\ directory. The log files will also be prefixed with stdout : <aspNetCore stdoutLogEnabled=\"true\" stdoutLogFile=\".\\logs\\stdout\" ...> ... </aspNetCore> Note: Ensure that the folder exists and that IIS has permissions to write to it. Logging with Azure Our recommended way to get logs out of AdminUI is to: Set the AzureAppServiceLogging application setting to true. Enable Application Logging (filesystem) in the App Service Logs section of the Azure portal: This will automatically set the log location of AdminUI to Home\\LogFiles\\Application\\Admin in the app service. Using this option will allow you to see logs from the Log stream page in the Azure portal. If you are having trouble getting logs out of your Azure installation by using the setting above then you can change the web.config. To get logs out in this scenario you can change the stdoutLogFile to a location in the log files directory. This should look something like the following: <aspNetCore processPath=\".\\IdentityExpress.Manager.UI.exe\" arguments=\"\" stdoutLogEnabled=\"true\" stdoutLogFile=\"\\\\?\\%home%\\LogFiles\\AdminUI\" ...> Alternatively if you deploy AdminUI as part of your CI/CD process as of 4.2.0 and 5.1.0 we supply an xml transform file that does the above for you on deployment. The caveat is that you wont see these logs in the Log Stream section of Azure. AdminUI will now output logs under the LogFiles\\Application directory at the root of your app service. Logging with Docker Docker should automatically record any logs with Docker logging . Most tools and systems that work with Docker logging will continue to work as expected. Minimum Entity Framework Logging Level By default, the AdminUI will only log Warning level database commands. To change this, update the EFLoggingMinimumLevel variable in the AdminUI config.","title":"Enabling Logging"},{"location":"Configuration_and_Integration/Enabling_Logging.html#logging-with-iis","text":"Setting the stdoutLogEnabled attribute to true in the web.config or IIS configuration manager enables logging. This attribute is found in: system.webServer > aspNetCore . The log file output location is controlled by the stdoutLogFile attribute. In the example below, logging has been enabled in the web.config and all log files will be output to the .\\logs\\ directory. The log files will also be prefixed with stdout : <aspNetCore stdoutLogEnabled=\"true\" stdoutLogFile=\".\\logs\\stdout\" ...> ... </aspNetCore> Note: Ensure that the folder exists and that IIS has permissions to write to it.","title":"Logging with IIS"},{"location":"Configuration_and_Integration/Enabling_Logging.html#logging-with-azure","text":"Our recommended way to get logs out of AdminUI is to: Set the AzureAppServiceLogging application setting to true. Enable Application Logging (filesystem) in the App Service Logs section of the Azure portal: This will automatically set the log location of AdminUI to Home\\LogFiles\\Application\\Admin in the app service. Using this option will allow you to see logs from the Log stream page in the Azure portal. If you are having trouble getting logs out of your Azure installation by using the setting above then you can change the web.config. To get logs out in this scenario you can change the stdoutLogFile to a location in the log files directory. This should look something like the following: <aspNetCore processPath=\".\\IdentityExpress.Manager.UI.exe\" arguments=\"\" stdoutLogEnabled=\"true\" stdoutLogFile=\"\\\\?\\%home%\\LogFiles\\AdminUI\" ...> Alternatively if you deploy AdminUI as part of your CI/CD process as of 4.2.0 and 5.1.0 we supply an xml transform file that does the above for you on deployment. The caveat is that you wont see these logs in the Log Stream section of Azure. AdminUI will now output logs under the LogFiles\\Application directory at the root of your app service.","title":"Logging with Azure"},{"location":"Configuration_and_Integration/Enabling_Logging.html#logging-with-docker","text":"Docker should automatically record any logs with Docker logging . Most tools and systems that work with Docker logging will continue to work as expected.","title":"Logging with Docker"},{"location":"Configuration_and_Integration/Enabling_Logging.html#minimum-entity-framework-logging-level","text":"By default, the AdminUI will only log Warning level database commands. To change this, update the EFLoggingMinimumLevel variable in the AdminUI config.","title":"Minimum Entity Framework Logging Level"},{"location":"Configuration_and_Integration/Integrating_with_IdentityServer.html","text":"After using the IdentityServer Quickstarts to evaluate the framework, it is then possible to integrate AdminUI for production use. Note: Quickstarts built using the ASP.NET Core Identity Visual Studio templates are not recommended for production, due to their fragility and abuse of anti-patterns. AdminUI uses a custom ASP.NET Core Identity schema. This schema extends from the ASP.NET Core Identity Entity Framework defaults, which means any existing registration, password reset or login functionality will continue to work with the AdminUI user store. Note: Existing users will need to be exported to use the AdminUI schema. For more details, see AdminUI Migrations . This schema is available on nuget using the IdentityExpress.Identity package. An AdminUI IdentityServer integration example is also available to demonstrate a working IdentityServer installation using this nuget package and schema. Use the following command to install using the nuget package manager console: install-package IdentityExpress.Identity To use the AdminUI IdentityExpress.Identity schema, any existing ASP.NET Identity registrations need to be updated: // Register Identity using IdentityExpress entities and stores services.AddIdentity<IdentityExpressUser, IdentityExpressRole>() .AddUserStore<IdentityExpressUserStore>() .AddRoleStore<IdentityExpressRoleStore>() .AddIdentityExpressUserClaimsPrincipalFactory(); // Register the DbContext for the IdentityExpress schema services.AddDbContext<IdentityExpressDbContext>(); Alternatively, there is a shortcut extension method: services.AddIdentityExpressAdminUiConfiguration() .AddIdentityExpressUserClaimsPrincipalFactory(); Any existing registrations for SignInManager or use of IdentityUser should also be updated.","title":"Integrating with Identity Server"},{"location":"Configuration_and_Integration/Integrating_with_Quickstarts.html","text":"After using the IdentityServer Quickstarts to evaluate the framework, it is then possible to integrate AdminUI for production use. Note: Quickstarts built using the ASP.NET Core Identity Visual Studio templates are not recommended for production, due to their fragility and abuse of anti-patterns. Update Packages When using the code from the samples repository , ensure all packages are up-to-date (excluding pre-releases). Required Packages AdminUI uses a custom ASP.NET Core Identity schema. This schema extends from the ASP.NET Core Identity Entity Framework defaults, which means any existing registration, password reset or login functionality will continue to work with the AdminUI user store. This schema is available on nuget using the IdentityExpress.Identity package. Use the following command to install using the nuget package manager console: install-package IdentityExpress.Identity Registration & Usage Changes Some base entities with AdminUI/IdentityServer specifics need to be updated: Delete Models\\ApplicationUser.cs Replace all usages of ApplicationUser with IdentityExpressUser Replace all usages of IdentityRole with IdentityExpressRole Delete Data\\ApplicationDbContext.cs Replace .AddEntityFrameworkStores<IdentityExpressDbContext>() with .AddUserStore<IdentityExpressUserStore>().AddRoleStore<IdentityExpressRoleStore>() Add .AddIdentityExpressUserClaimsPrincipalFactory() to ensure user data is correctly transformed into claims Delete any ASP.NET Core Identity migrations, AdminUI must be in charge of the user store migrations The ASP.NET Core DI registrations should now look similar to this: services.AddDbContext<IdentityExpressDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"))); services.AddIdentity<IdentityExpressUser, IdentityExpressRole>() .AddUserStore<IdentityExpressUserStore>() .AddRoleStore<IdentityExpressRoleStore>() .AddIdentityExpressUserClaimsPrincipalFactory() .AddDefaultTokenProviders();","title":"Integrating with Quickstarts"},{"location":"Configuration_and_Integration/Integrating_with_Quickstarts.html#update-packages","text":"When using the code from the samples repository , ensure all packages are up-to-date (excluding pre-releases).","title":"Update Packages"},{"location":"Configuration_and_Integration/Integrating_with_Quickstarts.html#required-packages","text":"AdminUI uses a custom ASP.NET Core Identity schema. This schema extends from the ASP.NET Core Identity Entity Framework defaults, which means any existing registration, password reset or login functionality will continue to work with the AdminUI user store. This schema is available on nuget using the IdentityExpress.Identity package. Use the following command to install using the nuget package manager console: install-package IdentityExpress.Identity","title":"Required Packages"},{"location":"Configuration_and_Integration/Integrating_with_Quickstarts.html#registration-usage-changes","text":"Some base entities with AdminUI/IdentityServer specifics need to be updated: Delete Models\\ApplicationUser.cs Replace all usages of ApplicationUser with IdentityExpressUser Replace all usages of IdentityRole with IdentityExpressRole Delete Data\\ApplicationDbContext.cs Replace .AddEntityFrameworkStores<IdentityExpressDbContext>() with .AddUserStore<IdentityExpressUserStore>().AddRoleStore<IdentityExpressRoleStore>() Add .AddIdentityExpressUserClaimsPrincipalFactory() to ensure user data is correctly transformed into claims Delete any ASP.NET Core Identity migrations, AdminUI must be in charge of the user store migrations The ASP.NET Core DI registrations should now look similar to this: services.AddDbContext<IdentityExpressDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString(\"DefaultConnection\"))); services.AddIdentity<IdentityExpressUser, IdentityExpressRole>() .AddUserStore<IdentityExpressUserStore>() .AddRoleStore<IdentityExpressRoleStore>() .AddIdentityExpressUserClaimsPrincipalFactory() .AddDefaultTokenProviders();","title":"Registration &amp; Usage Changes"},{"location":"CustomIdentity/FullOverride.html","text":"Using Your Own Custom Identity Store Samples of the below code can be found on our GitHub For this part of the documentation the code in Base Installation project will be considered the \"Before\". Getting Started - Using the Rsk.CustomIdentity Interfaces The Rsk.CustomIdentity package contains the required modal and store interfaces required to build an AdminUI compatible Identity store. Models: - ISSOUser - ISSOClaimType - ISSORole Store interfaces: - ISSOUserStore - ISSOClaimTypeStore - ISSORoleStore An implementation of ISSOStoreFactory is also required. ISSOStoreFactory will return the concrete implementations of the ISSOUserStore , ISSORoleStore , and ISSOClaimTypeStore SSOClaimStore: public class ClaimTypeStore : ISSOClaimTypeStore { public Task<ISSOClaimType> GetClaimTypeByName(string name) { throw new NotImplementedException(); } ... SSORoleStore: public class RoleStore : ISSORoleStore { public Task<ISSORole> CreateRole(ISSORole role) { throw new NotImplementedException(); } ... SSOUserStore: public class UserStore : ISSOUserStore { public Task<ISSOUser> CreateUser(ISSOUser user) { throw new NotImplementedException(); } ... SSOStoreFactory: public class SSOStoreFactory : ISSOStoreFactory { public ISSOUserStore CreateUserStore() { return new UserStore(); } public ISSORoleStore CreateRoleStore() { return new RoleStore(); } public ISSOClaimTypeStore CreateClaimTypeStore() { return new ClaimTypeStore(); } } Once you have provided an implementation of these interfaces, you can update your the pipeline registration for AdminUI in your Program.cs or Startup.cs class to: builder.Services .AddAdminUI(options => { options.IdentityType = IdentityType.DefaultIdentity; options.MigrationOptions = MigrationOptions.All; }) .WithIdentityStore<CustomStoreFactory>(); This will register your new ISSOStoreFactory implementation as the factory to use when the AdminUI service layer requests and manages Users, Roles, and Claim Types. Additionally, you must also specify to the package that you are using a custom identity implementation. Calling WithIdentityStore will stop AdminUI from running bootstrap, if you would still like to have the default bootstrapped users and roles you can take away this call, run the application and then add it back in. The code from this section can be found here The next section will use Tenancy as an example of how to transform additional fields to claims, alongside using extra tables as dynamic provider for the Enum claim type: EfCore","title":"Full Implementation"},{"location":"CustomIdentity/FullOverride.html#using-your-own-custom-identity-store","text":"Samples of the below code can be found on our GitHub For this part of the documentation the code in Base Installation project will be considered the \"Before\".","title":"Using Your Own Custom Identity Store"},{"location":"CustomIdentity/FullOverride.html#getting-started-using-the-rskcustomidentity-interfaces","text":"The Rsk.CustomIdentity package contains the required modal and store interfaces required to build an AdminUI compatible Identity store. Models: - ISSOUser - ISSOClaimType - ISSORole Store interfaces: - ISSOUserStore - ISSOClaimTypeStore - ISSORoleStore An implementation of ISSOStoreFactory is also required. ISSOStoreFactory will return the concrete implementations of the ISSOUserStore , ISSORoleStore , and ISSOClaimTypeStore SSOClaimStore: public class ClaimTypeStore : ISSOClaimTypeStore { public Task<ISSOClaimType> GetClaimTypeByName(string name) { throw new NotImplementedException(); } ... SSORoleStore: public class RoleStore : ISSORoleStore { public Task<ISSORole> CreateRole(ISSORole role) { throw new NotImplementedException(); } ... SSOUserStore: public class UserStore : ISSOUserStore { public Task<ISSOUser> CreateUser(ISSOUser user) { throw new NotImplementedException(); } ... SSOStoreFactory: public class SSOStoreFactory : ISSOStoreFactory { public ISSOUserStore CreateUserStore() { return new UserStore(); } public ISSORoleStore CreateRoleStore() { return new RoleStore(); } public ISSOClaimTypeStore CreateClaimTypeStore() { return new ClaimTypeStore(); } } Once you have provided an implementation of these interfaces, you can update your the pipeline registration for AdminUI in your Program.cs or Startup.cs class to: builder.Services .AddAdminUI(options => { options.IdentityType = IdentityType.DefaultIdentity; options.MigrationOptions = MigrationOptions.All; }) .WithIdentityStore<CustomStoreFactory>(); This will register your new ISSOStoreFactory implementation as the factory to use when the AdminUI service layer requests and manages Users, Roles, and Claim Types. Additionally, you must also specify to the package that you are using a custom identity implementation. Calling WithIdentityStore will stop AdminUI from running bootstrap, if you would still like to have the default bootstrapped users and roles you can take away this call, run the application and then add it back in. The code from this section can be found here The next section will use Tenancy as an example of how to transform additional fields to claims, alongside using extra tables as dynamic provider for the Enum claim type: EfCore","title":"Getting Started - Using the Rsk.CustomIdentity Interfaces"},{"location":"CustomIdentity/NoSql.html","text":"Overview If you have a requirement to use NoSQL database providers such as MongoDB to manage your users within IdentityServer, you can leverage AdminUI's Custom Identity Store interfaces to achieve this. This document will outline the basic implementations needed to achieve this integration within MongoDB using the official MongoDB.Driver package within our solution. MongoDB Configuration For our database, you will be using a locally hosting MongoDB database. To make things easier you can place MongoDB configuration in your appsettings.json file. \"IdentityDatabase\": { \"ConnectionString\": \"mongodb://localhost:27017\", \"DatabaseName\": \"AdminUIUserStore\", \"UsersCollectionName\": \"Users\", \"RolesCollectionName\": \"Roles\", \"ClaimTypesCollectionName\": \"ClaimTypes\" }, You can also create an object to deserialize these configuration values: public class IdentityStoreDatabaseSettings { public string ConnectionString { get; set; } = null!; public string DatabaseName { get; set; } = null!; public string UsersCollectionName { get; set; } = null!; public string RolesCollectionName { get; set; } = null!; public string ClaimTypesCollectionName { get; set; } = null!; } To access this configuration object, add it to your service collection in the Program.cs class. builder.Services.Configure<IdentityStoreDatabaseSettings>(builder.Configuration.GetSection(\"IdentityDatabase\")); Implementing the entity models The first step to achieving NoSQL integration with AdminUI is to create concrete implementations of our new model interfaces found within the Rsk.CustomIdentity NuGet package. These interfaces are as follows: ISSOUser ISSORole ISSOClaim ISSOClaimType ISSOUser Implementation First, create an implementation of the ISSOUser interface. public class CustomSSOUser : ISSOUser { [BsonId] [BsonRepresentation(BsonType.ObjectId)] public string Id { get; set; } public string UserName { get; set; } public string Password { get; set; } public string Email { get; set; } public string ConcurrencyStamp { get; set; } public bool TwoFactorEnabled { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public bool IsBlocked { get; } public bool IsDeleted { get; set; } public bool LockoutEnabled { get; set; } public DateTimeOffset? LockoutEnd { get; } [BsonIgnoreIfNull] public ICollection<ISSOClaim> Claims { get; set; } = new List<ISSOClaim>(); //Not part of the ISSOUser interface. Included to make querying user roles easier. [BsonIgnoreIfNull] public ICollection<ISSORole> Roles { get; set; } = new List<ISSORole>(); } The fields contained within this interface are the foundations of a user within AdminUI. If you have any additional fields you wish to manage within AdminUI, you'll need to translate them to claims and place them in the Claims collection on the user class. There are a few MongoDB specific attributes on our CustomSSOUser class. Firstly, the [BsonId] attribute specifies the field to be used as the primary key for the object. Below the [BsonId] attribute, we have the [BsonRepresentation(BsonType.ObjectId)] attribute. This attribute is used to specify that the Id field on our object is to be seen (or represented) within MongoDB as an ObjectId type. The benefit of having the Id field represented as an ObjectId , is that we can offload the generating of unique ID's for the user object to MongoDB. The [BsonIgnoreIfNull] attribute specifies that if the Claims or Roles collections on the user object are null, serializing/deserializing shouldn't be attempted. This helps to avoid any unwanted serialization issues within the MongoDB driver. ISSORole Implementation Write an implementation of the ISSORole interface. public class CustomSSORole : ISSORole { [BsonId] [BsonRepresentation(BsonType.ObjectId)] public string Id { get; set; } public string Description { get; set; } public bool NonEditable { get; set; } public string Name { get; set; } } ISSOClaimType Implementation Now, the implementation of the ISSOClaimType interface public class CustomSSOClaimType : ISSOClaimType { [BsonId] [BsonRepresentation(BsonType.ObjectId)] public string Id { get; set; } public string Name { get; set; } public string DisplayName { get; set; } public string Description { get; set; } public bool IsRequired { get; set; } public bool IsReserved { get; set; } public SSOClaimValueType ValueType { get; set; } public string RegularExpressionValidationRule { get; set; } public string RegularExpressionValidationFailureDescription { get; set; } public bool IsUserEditable { get; set; } public ICollection<string> AllowedValues { get; set; } } ISSOClaim Implementation And finally, the implementation of the ISSOClaim interface public class CustomSSOClaim : ISSOClaim { [BsonId] public int Id { get; set; } public string ClaimType { get; set; } public string ClaimValue { get; set; } } MongoDB Driver Class Mapping You must also register the class mapping within the MongoDB driver for the implementations. To do this, update your Program.cs class with the following: BsonClassMap.RegisterClassMap<CustomSSOUser>(); BsonClassMap.RegisterClassMap<CustomSSORole>(); BsonClassMap.RegisterClassMap<CustomSSOClaim>(); BsonClassMap.RegisterClassMap<CustomSSOClaimType>(); It's not a requirement for this code to be in the Program.cs class, you could also place it in the stores. However, the registration of the class maps must be present before any calls to the database wherein deserialization would take place. Store Implementations Now you must create implementations of the stores. This will mean creating implementations of the following interfaces: ISSOUserStore ISSORoleStore ISSOClaimTypeStore This will be the stores that are called withing AdminUI's service layer and contain all the methods AdminUI needs to work. ISSOUserStore Implementation Start by implementing the ISSOUserStore . This is the largest store in terms of implemented methods. // Implementation shortened for brevity public class UserStore : ISSOUserStore { private readonly IMongoCollection<CustomSSOUser> dbUsers; private readonly PasswordHasher<CustomSSOUser> passwordHasher; public UserStore(IOptions<IdentityStoreDatabaseSettings> dbSettings) { var mongoClient = new MongoClient( dbSettings.Value.ConnectionString); var mongoDatabase = mongoClient.GetDatabase( dbSettings.Value.DatabaseName); dbUsers = mongoDatabase.GetCollection<CustomSSOUser>( dbSettings.Value.UsersCollectionName); passwordHasher = new PasswordHasher<CustomSSOUser>(); } public async Task<ISSOUser> CreateUser(ISSOUser user) { var newUser = new CustomSSOUser { UserName = user.UserName, Email = user.Email, ConcurrencyStamp = Guid.NewGuid().ToString(), TwoFactorEnabled = false, FirstName = user.FirstName, LastName = user.LastName, IsDeleted = false, LockoutEnabled = false, }; foreach (var claim in user.Claims) { newUser.Claims.Add(claim); } await dbUsers.InsertOneAsync(newUser); var createdUserQuery = await dbUsers.FindAsync(u => u.UserName == newUser.UserName); return await createdUserQuery.FirstOrDefaultAsync(); } You can see how to initialise the dbUsers collection using the injected IdentityStoreDatabaseSettings configured in the Program.cs file. In production, you may want to use a factory to abstract out this functionality. ISSORoleStore Implementation Next, implement the ISSORoleStore . //Implementation shortened for brevity public class RoleStore : ISSORoleStore { private readonly IMongoCollection<CustomSSOUser> dbUsers; private readonly IMongoCollection<CustomSSORole> dbRoles; public RoleStore(IOptions<IdentityStoreDatabaseSettings> dbSettings) { var mongoClient = new MongoClient( dbSettings.Value.ConnectionString); var mongoDatabase = mongoClient.GetDatabase( dbSettings.Value.DatabaseName); dbUsers = mongoDatabase.GetCollection<CustomSSOUser>( dbSettings.Value.UsersCollectionName); dbRoles = mongoDatabase.GetCollection<CustomSSORole>( dbSettings.Value.RolesCollectionName); } public async Task<ISSORole> CreateRole(ISSORole role) { await dbRoles.InsertOneAsync(new CustomSSORole { Name = role.Name, Description = role.Description, NonEditable = role.NonEditable }); var rolesInsertedName = await dbRoles.FindAsync(r => r.Name == role.Name); return await rolesInsertedName.FirstOrDefaultAsync(); } ISSOClaimTypeStore Implementation Finally, implement the ISSOClaimTypeStore //Implementation shortened for brevity public class ClaimTypeStore : ISSOClaimTypeStore { private readonly IMongoCollection<CustomSSOClaimType> dbClaimTypes; public ClaimTypeStore(IOptions<IdentityStoreDatabaseSettings> dbSettings) { var mongoClient = new MongoClient( dbSettings.Value.ConnectionString); var mongoDatabase = mongoClient.GetDatabase( dbSettings.Value.DatabaseName); dbClaimTypes = mongoDatabase.GetCollection<CustomSSOClaimType>( dbSettings.Value.ClaimTypesCollectionName); } public async Task<ISSOClaimType> CreateClaimType(ISSOClaimType claimType) { var newClaimType = new CustomSSOClaimType { Name = claimType.Name, DisplayName = claimType.DisplayName, Description = claimType.Description, IsRequired = claimType.IsRequired, IsReserved = claimType.IsReserved, ValueType = claimType.ValueType, RegularExpressionValidationRule = claimType.RegularExpressionValidationRule, RegularExpressionValidationFailureDescription = claimType.RegularExpressionValidationFailureDescription, IsUserEditable = claimType.IsUserEditable, AllowedValues = claimType.AllowedValues }; await dbClaimTypes.InsertOneAsync(newClaimType); var claimTypeQuery = await dbClaimTypes.FindAsync(ct => ct.Name == claimType.Name); return await claimTypeQuery.FirstOrDefaultAsync(); } ISSOStoreFactory Implementation Next, you will create an implementation of the ISSOStoreFactory . This is the factory used by the AdminUI service layer to create the instances of the stores you have already written. public class CustomSSOStoreFactory : ISSOStoreFactory { private readonly IOptions<IdentityStoreDatabaseSettings> dbSettings; public CustomSSOStoreFactory(IOptions<IdentityStoreDatabaseSettings> dbSettings) { this.dbSettings = dbSettings ?? throw new ArgumentNullException(nameof(dbSettings)); } public ISSOUserStore CreateUserStore() { return new UserStore(dbSettings); } public ISSORoleStore CreateRoleStore() { return new RoleStore(dbSettings); } public ISSOClaimTypeStore CreateClaimTypeStore() { return new ClaimTypeStore(dbSettings); } } Summary In this document you have created a NoSQL implementation of an Identity Store for AdminUI using the Rsk.CustomIdentity and MongoDB.Driver NuGet packages. The full source code for this sample can be found on our GitHub page","title":"NoSql Implementation (MongoDB)"},{"location":"CustomIdentity/NoSql.html#overview","text":"If you have a requirement to use NoSQL database providers such as MongoDB to manage your users within IdentityServer, you can leverage AdminUI's Custom Identity Store interfaces to achieve this. This document will outline the basic implementations needed to achieve this integration within MongoDB using the official MongoDB.Driver package within our solution.","title":"Overview"},{"location":"CustomIdentity/NoSql.html#mongodb-configuration","text":"For our database, you will be using a locally hosting MongoDB database. To make things easier you can place MongoDB configuration in your appsettings.json file. \"IdentityDatabase\": { \"ConnectionString\": \"mongodb://localhost:27017\", \"DatabaseName\": \"AdminUIUserStore\", \"UsersCollectionName\": \"Users\", \"RolesCollectionName\": \"Roles\", \"ClaimTypesCollectionName\": \"ClaimTypes\" }, You can also create an object to deserialize these configuration values: public class IdentityStoreDatabaseSettings { public string ConnectionString { get; set; } = null!; public string DatabaseName { get; set; } = null!; public string UsersCollectionName { get; set; } = null!; public string RolesCollectionName { get; set; } = null!; public string ClaimTypesCollectionName { get; set; } = null!; } To access this configuration object, add it to your service collection in the Program.cs class. builder.Services.Configure<IdentityStoreDatabaseSettings>(builder.Configuration.GetSection(\"IdentityDatabase\"));","title":"MongoDB Configuration"},{"location":"CustomIdentity/NoSql.html#implementing-the-entity-models","text":"The first step to achieving NoSQL integration with AdminUI is to create concrete implementations of our new model interfaces found within the Rsk.CustomIdentity NuGet package. These interfaces are as follows: ISSOUser ISSORole ISSOClaim ISSOClaimType","title":"Implementing the entity models"},{"location":"CustomIdentity/NoSql.html#issouser-implementation","text":"First, create an implementation of the ISSOUser interface. public class CustomSSOUser : ISSOUser { [BsonId] [BsonRepresentation(BsonType.ObjectId)] public string Id { get; set; } public string UserName { get; set; } public string Password { get; set; } public string Email { get; set; } public string ConcurrencyStamp { get; set; } public bool TwoFactorEnabled { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public bool IsBlocked { get; } public bool IsDeleted { get; set; } public bool LockoutEnabled { get; set; } public DateTimeOffset? LockoutEnd { get; } [BsonIgnoreIfNull] public ICollection<ISSOClaim> Claims { get; set; } = new List<ISSOClaim>(); //Not part of the ISSOUser interface. Included to make querying user roles easier. [BsonIgnoreIfNull] public ICollection<ISSORole> Roles { get; set; } = new List<ISSORole>(); } The fields contained within this interface are the foundations of a user within AdminUI. If you have any additional fields you wish to manage within AdminUI, you'll need to translate them to claims and place them in the Claims collection on the user class. There are a few MongoDB specific attributes on our CustomSSOUser class. Firstly, the [BsonId] attribute specifies the field to be used as the primary key for the object. Below the [BsonId] attribute, we have the [BsonRepresentation(BsonType.ObjectId)] attribute. This attribute is used to specify that the Id field on our object is to be seen (or represented) within MongoDB as an ObjectId type. The benefit of having the Id field represented as an ObjectId , is that we can offload the generating of unique ID's for the user object to MongoDB. The [BsonIgnoreIfNull] attribute specifies that if the Claims or Roles collections on the user object are null, serializing/deserializing shouldn't be attempted. This helps to avoid any unwanted serialization issues within the MongoDB driver.","title":"ISSOUser Implementation"},{"location":"CustomIdentity/NoSql.html#issorole-implementation","text":"Write an implementation of the ISSORole interface. public class CustomSSORole : ISSORole { [BsonId] [BsonRepresentation(BsonType.ObjectId)] public string Id { get; set; } public string Description { get; set; } public bool NonEditable { get; set; } public string Name { get; set; } }","title":"ISSORole Implementation"},{"location":"CustomIdentity/NoSql.html#issoclaimtype-implementation","text":"Now, the implementation of the ISSOClaimType interface public class CustomSSOClaimType : ISSOClaimType { [BsonId] [BsonRepresentation(BsonType.ObjectId)] public string Id { get; set; } public string Name { get; set; } public string DisplayName { get; set; } public string Description { get; set; } public bool IsRequired { get; set; } public bool IsReserved { get; set; } public SSOClaimValueType ValueType { get; set; } public string RegularExpressionValidationRule { get; set; } public string RegularExpressionValidationFailureDescription { get; set; } public bool IsUserEditable { get; set; } public ICollection<string> AllowedValues { get; set; } }","title":"ISSOClaimType Implementation"},{"location":"CustomIdentity/NoSql.html#issoclaim-implementation","text":"And finally, the implementation of the ISSOClaim interface public class CustomSSOClaim : ISSOClaim { [BsonId] public int Id { get; set; } public string ClaimType { get; set; } public string ClaimValue { get; set; } }","title":"ISSOClaim Implementation"},{"location":"CustomIdentity/NoSql.html#mongodb-driver-class-mapping","text":"You must also register the class mapping within the MongoDB driver for the implementations. To do this, update your Program.cs class with the following: BsonClassMap.RegisterClassMap<CustomSSOUser>(); BsonClassMap.RegisterClassMap<CustomSSORole>(); BsonClassMap.RegisterClassMap<CustomSSOClaim>(); BsonClassMap.RegisterClassMap<CustomSSOClaimType>(); It's not a requirement for this code to be in the Program.cs class, you could also place it in the stores. However, the registration of the class maps must be present before any calls to the database wherein deserialization would take place.","title":"MongoDB Driver Class Mapping"},{"location":"CustomIdentity/NoSql.html#store-implementations","text":"Now you must create implementations of the stores. This will mean creating implementations of the following interfaces: ISSOUserStore ISSORoleStore ISSOClaimTypeStore This will be the stores that are called withing AdminUI's service layer and contain all the methods AdminUI needs to work.","title":"Store Implementations"},{"location":"CustomIdentity/NoSql.html#issouserstore-implementation","text":"Start by implementing the ISSOUserStore . This is the largest store in terms of implemented methods. // Implementation shortened for brevity public class UserStore : ISSOUserStore { private readonly IMongoCollection<CustomSSOUser> dbUsers; private readonly PasswordHasher<CustomSSOUser> passwordHasher; public UserStore(IOptions<IdentityStoreDatabaseSettings> dbSettings) { var mongoClient = new MongoClient( dbSettings.Value.ConnectionString); var mongoDatabase = mongoClient.GetDatabase( dbSettings.Value.DatabaseName); dbUsers = mongoDatabase.GetCollection<CustomSSOUser>( dbSettings.Value.UsersCollectionName); passwordHasher = new PasswordHasher<CustomSSOUser>(); } public async Task<ISSOUser> CreateUser(ISSOUser user) { var newUser = new CustomSSOUser { UserName = user.UserName, Email = user.Email, ConcurrencyStamp = Guid.NewGuid().ToString(), TwoFactorEnabled = false, FirstName = user.FirstName, LastName = user.LastName, IsDeleted = false, LockoutEnabled = false, }; foreach (var claim in user.Claims) { newUser.Claims.Add(claim); } await dbUsers.InsertOneAsync(newUser); var createdUserQuery = await dbUsers.FindAsync(u => u.UserName == newUser.UserName); return await createdUserQuery.FirstOrDefaultAsync(); } You can see how to initialise the dbUsers collection using the injected IdentityStoreDatabaseSettings configured in the Program.cs file. In production, you may want to use a factory to abstract out this functionality.","title":"ISSOUserStore Implementation"},{"location":"CustomIdentity/NoSql.html#issorolestore-implementation","text":"Next, implement the ISSORoleStore . //Implementation shortened for brevity public class RoleStore : ISSORoleStore { private readonly IMongoCollection<CustomSSOUser> dbUsers; private readonly IMongoCollection<CustomSSORole> dbRoles; public RoleStore(IOptions<IdentityStoreDatabaseSettings> dbSettings) { var mongoClient = new MongoClient( dbSettings.Value.ConnectionString); var mongoDatabase = mongoClient.GetDatabase( dbSettings.Value.DatabaseName); dbUsers = mongoDatabase.GetCollection<CustomSSOUser>( dbSettings.Value.UsersCollectionName); dbRoles = mongoDatabase.GetCollection<CustomSSORole>( dbSettings.Value.RolesCollectionName); } public async Task<ISSORole> CreateRole(ISSORole role) { await dbRoles.InsertOneAsync(new CustomSSORole { Name = role.Name, Description = role.Description, NonEditable = role.NonEditable }); var rolesInsertedName = await dbRoles.FindAsync(r => r.Name == role.Name); return await rolesInsertedName.FirstOrDefaultAsync(); }","title":"ISSORoleStore Implementation"},{"location":"CustomIdentity/NoSql.html#issoclaimtypestore-implementation","text":"Finally, implement the ISSOClaimTypeStore //Implementation shortened for brevity public class ClaimTypeStore : ISSOClaimTypeStore { private readonly IMongoCollection<CustomSSOClaimType> dbClaimTypes; public ClaimTypeStore(IOptions<IdentityStoreDatabaseSettings> dbSettings) { var mongoClient = new MongoClient( dbSettings.Value.ConnectionString); var mongoDatabase = mongoClient.GetDatabase( dbSettings.Value.DatabaseName); dbClaimTypes = mongoDatabase.GetCollection<CustomSSOClaimType>( dbSettings.Value.ClaimTypesCollectionName); } public async Task<ISSOClaimType> CreateClaimType(ISSOClaimType claimType) { var newClaimType = new CustomSSOClaimType { Name = claimType.Name, DisplayName = claimType.DisplayName, Description = claimType.Description, IsRequired = claimType.IsRequired, IsReserved = claimType.IsReserved, ValueType = claimType.ValueType, RegularExpressionValidationRule = claimType.RegularExpressionValidationRule, RegularExpressionValidationFailureDescription = claimType.RegularExpressionValidationFailureDescription, IsUserEditable = claimType.IsUserEditable, AllowedValues = claimType.AllowedValues }; await dbClaimTypes.InsertOneAsync(newClaimType); var claimTypeQuery = await dbClaimTypes.FindAsync(ct => ct.Name == claimType.Name); return await claimTypeQuery.FirstOrDefaultAsync(); }","title":"ISSOClaimTypeStore Implementation"},{"location":"CustomIdentity/NoSql.html#issostorefactory-implementation","text":"Next, you will create an implementation of the ISSOStoreFactory . This is the factory used by the AdminUI service layer to create the instances of the stores you have already written. public class CustomSSOStoreFactory : ISSOStoreFactory { private readonly IOptions<IdentityStoreDatabaseSettings> dbSettings; public CustomSSOStoreFactory(IOptions<IdentityStoreDatabaseSettings> dbSettings) { this.dbSettings = dbSettings ?? throw new ArgumentNullException(nameof(dbSettings)); } public ISSOUserStore CreateUserStore() { return new UserStore(dbSettings); } public ISSORoleStore CreateRoleStore() { return new RoleStore(dbSettings); } public ISSOClaimTypeStore CreateClaimTypeStore() { return new ClaimTypeStore(dbSettings); } }","title":"ISSOStoreFactory Implementation"},{"location":"CustomIdentity/NoSql.html#summary","text":"In this document you have created a NoSQL implementation of an Identity Store for AdminUI using the Rsk.CustomIdentity and MongoDB.Driver NuGet packages. The full source code for this sample can be found on our GitHub page","title":"Summary"},{"location":"CustomIdentity/Overview.html","text":"Overview This page assumes you have read the AdminUI as a NuGet package documentation area. When using the AdminUI NuGet package in your web applications, you can use the default stores, partially extend the default stores, or write your own stores. This opens up AdminUI to users who may have not been able to take advantage of it in the past. Namely: 1. Users who have Users, Roles or Claim Types that do not adhere to the default Identity schema the ability to write code that allows them to be managed via AdminUI. 2. Users that require the extension of the existing identity stores. Changes AdminUI\u2019s identity model has historically been based on the ASP.NET Identity model provided by Microsoft. This means \u201cIdentity\u201d is composed primarily of Users, Roles, Claims and their associated Claim Types. This includes using the UserManager and RoleManager provided with ASP.NET Identity AdminUI 6.3 adds a group of abstractions that allow for the decoupling from this old identity model. The group of abstractions are: ISSOUserStore \u2013 Handles CRUD operations relating to users ISSOClaimTypeStore - Handles CRUD operations relating to claim types ISSORoleStore - Handles CRUD operations relating to roles These store abstractions are initialized in AdminUI's service layer using ISSOStoreFactory . Starting point To get started, take the result of the NuGet Installation and update the service registration to the following: builder.Services.AddAdminUI().WithIdentityStore<SSOStoreFactory>(); Currently the WithIdentityStore<>() method is using the default SSOStoreFactory from the AdminUI NuGet package, which is the default factory used within AdminUI. Additional Configuration The AddAdminUI method takes in additional configuration that is used to tell AdminUI if you are using a custom store or if you want to configure the migrations that run on startup. builder.Services .AddAdminUI(options => { options.IdentityType = IdentityType.DefaultIdentity; options.MigrationOptions = MigrationOptions.All; }) .WithIdentityStore<CustomStoreFactory>(); IdentityType is a pair of enums: DefaultIdentity Select this if need any of AdminUIs identity services e.g you are not using a custom identity store or are using a partial implementation that uses any of AdminUIs identity services (IIdentityUnitOfWorkFactory etc) CustomIdentity Select this to disable the default AdminUI identity services - used for full custom identity store implementations Migration Options lets you chose what, if any, migrations run on startup: All Runs all migrations on startup IdentityOnly Runs all but the IdentityServer (Configuration and Operational) migrations IdentityServerOnly Runs all but the Identity migrations AdminUI Runs all but the Identity and IdentityServer migrations Audit, Saml, WsFed, DataProtection None Disables all migrations Next Steps Partial Implementation Will outline how to wrap the existing stores, how to override certain calls, and how to manage additional fields on your Identity models. Full Implementation Will outline how to build your own AdminUI compatible Identity store from scratch. We also provide a MongoDB example of a full implementation.","title":"Overview"},{"location":"CustomIdentity/Overview.html#overview","text":"This page assumes you have read the AdminUI as a NuGet package documentation area. When using the AdminUI NuGet package in your web applications, you can use the default stores, partially extend the default stores, or write your own stores. This opens up AdminUI to users who may have not been able to take advantage of it in the past. Namely: 1. Users who have Users, Roles or Claim Types that do not adhere to the default Identity schema the ability to write code that allows them to be managed via AdminUI. 2. Users that require the extension of the existing identity stores.","title":"Overview"},{"location":"CustomIdentity/Overview.html#changes","text":"AdminUI\u2019s identity model has historically been based on the ASP.NET Identity model provided by Microsoft. This means \u201cIdentity\u201d is composed primarily of Users, Roles, Claims and their associated Claim Types. This includes using the UserManager and RoleManager provided with ASP.NET Identity AdminUI 6.3 adds a group of abstractions that allow for the decoupling from this old identity model. The group of abstractions are: ISSOUserStore \u2013 Handles CRUD operations relating to users ISSOClaimTypeStore - Handles CRUD operations relating to claim types ISSORoleStore - Handles CRUD operations relating to roles These store abstractions are initialized in AdminUI's service layer using ISSOStoreFactory .","title":"Changes"},{"location":"CustomIdentity/Overview.html#starting-point","text":"To get started, take the result of the NuGet Installation and update the service registration to the following: builder.Services.AddAdminUI().WithIdentityStore<SSOStoreFactory>(); Currently the WithIdentityStore<>() method is using the default SSOStoreFactory from the AdminUI NuGet package, which is the default factory used within AdminUI.","title":"Starting point"},{"location":"CustomIdentity/Overview.html#additional-configuration","text":"The AddAdminUI method takes in additional configuration that is used to tell AdminUI if you are using a custom store or if you want to configure the migrations that run on startup. builder.Services .AddAdminUI(options => { options.IdentityType = IdentityType.DefaultIdentity; options.MigrationOptions = MigrationOptions.All; }) .WithIdentityStore<CustomStoreFactory>(); IdentityType is a pair of enums: DefaultIdentity Select this if need any of AdminUIs identity services e.g you are not using a custom identity store or are using a partial implementation that uses any of AdminUIs identity services (IIdentityUnitOfWorkFactory etc) CustomIdentity Select this to disable the default AdminUI identity services - used for full custom identity store implementations Migration Options lets you chose what, if any, migrations run on startup: All Runs all migrations on startup IdentityOnly Runs all but the IdentityServer (Configuration and Operational) migrations IdentityServerOnly Runs all but the Identity migrations AdminUI Runs all but the Identity and IdentityServer migrations Audit, Saml, WsFed, DataProtection None Disables all migrations","title":"Additional Configuration"},{"location":"CustomIdentity/Overview.html#next-steps","text":"","title":"Next Steps"},{"location":"CustomIdentity/Overview.html#partial-implementation","text":"Will outline how to wrap the existing stores, how to override certain calls, and how to manage additional fields on your Identity models.","title":"Partial Implementation"},{"location":"CustomIdentity/Overview.html#full-implementation","text":"Will outline how to build your own AdminUI compatible Identity store from scratch. We also provide a MongoDB example of a full implementation.","title":"Full Implementation"},{"location":"CustomIdentity/PartialImplementation.html","text":"Using AdminUIs base stores Samples of the below code can be found on our GitHub For this part of the documentation the code in Base Installation project will be considered the \"Before\". Extending Functionality The example functionality extension will be performed on the CreateUser method on the ISSOUserStore . For this, you must: Create a class that derives from SSOUserStore Create a factory that creates this class Overwrite the CreateUser method and include a notifier Creating a new class To start, create a new class in your project call CustomUserStore.cs Make your class extend the base class SSOUserStore Create a constructor that calls base with the required interfaces Because the AdminUI DI container has already registered the services needed to extend SSOUserStore you don't need to do any DI configuration on your side, you only need to import the correct interfaces. After these steps you will end up with a class that looks like the following: public class CustomUserStore : SSOUserStore { public CustomUserStore(IIdentityUnitOfWorkFactory factory, ILookupNormalizer normaliser, IUserQueryFactory userQueryFactory) : base(factory, normaliser, userQueryFactory) { } } To use this class instead of using the default implementation, you now need to provide an implementation of the ISSOStoreFactory that returns this implementation of the ISSOUserStore and not AdminUI's In a new file create a class called CustomIdentityFactory that implements ISSOStoreFactory In the constructor, pass in classes needed to create the new CustomUserStore and CustomIdentityFactory Override the CreateUserStore method, returning the CustomUserStore After these steps you will have a new class that looks like this: public class CustomStoreFactory : ISSOStoreFactory { private readonly IIdentityUnitOfWorkFactory _factory; private readonly ILookupNormalizer _normaliser; private readonly IUserQueryFactory _userQueryFactory; public CustomStoreFactory(IIdentityUnitOfWorkFactory factory, ILookupNormalizer normaliser, IUserQueryFactory userQueryFactory) { _factory = factory ?? throw new ArgumentNullException(nameof(factory)); _normaliser = normaliser ?? throw new ArgumentNullException(nameof(normaliser)); _userQueryFactory = userQueryFactory ?? throw new ArgumentNullException(nameof(userQueryFactory)); } public ISSOUserStore CreateUserStore() { return new CustomUserStore(_factory, _normaliser, _userQueryFactory); } public ISSORoleStore CreateRoleStore() { return new SSORoleStore(_factory, _normaliser, _userQueryFactory); } public ISSOClaimTypeStore CreateClaimTypeStore() { return new SSOClaimTypeStore(_factory, _normaliser); } } Now register this factory during pipeline initialisation. In your Program.cs or Startup.cs , update the UseAdminUI call by adding WithIdentityStore . This method accepts a type that needs to implement ISSOStoreFactory var builder = WebApplication.CreateBuilder(args); builder.Services .AddAdminUI() .WithIdentityStore<CustomStoreFactory>(); If you run the code and put a breakpoint in your CustomUserStore constructor, you can see that you are now using your own code. Now you can extend it with your own functionality Now: - Create a NotificationService interface that has a Dispatch method, create a class that inherits it and register it in the DI container - Pass it into CustomUserStore . You will also need to include it in the CustomStoreFactory constructor. - Overwrite the CreateUser method to use the notification service. Now, when AdminUI creates a user, it will also call off to the new NotificationService . public class CustomUserStore : SSOUserStore { private readonly INotificationService _notificationService; public CustomUserStore(INotificationService notificationService, IIdentityUnitOfWorkFactory factory, ILookupNormalizer normaliser, IUserQueryFactory userQueryFactory) : base(factory, normaliser, userQueryFactory) { _notificationService = notificationService ?? throw new ArgumentNullException(nameof(notificationService)); } public override Task<ISSOUser> CreateUser(ISSOUser user) { var createdUser = base.CreateUser(user); _notificationService.Dispatch(\"CreateUser\"); return createdUser; } } The finished code can be found here Overriding certain calls In this section you will create a stub service to show how you overwrite certain methods if you need your own logic surrounding a method. A good example of this is the Delete method in the ISSOUserStore . By default, AdminUI performs a 'soft' deletion when deleting a user, wherein the IsDeleted flag is set to true. However, there is functionality within the UserManager used by AdminUI to perform a hard deletion wherein a user is completely removed from the database. If you preferred a user to be completely removed during deletion: Create a class that inherits from SSOUserStore like above Overwrite Delete method Initialise an instance of the unit of work Call the HardDelete method on the UserManager public class CustomUserStore : SSOUserStore { private readonly INotificationService _notificationService; private readonly IIdentityUnitOfWorkFactory _factory; public CustomUserStore(INotificationService notificationService, IIdentityUnitOfWorkFactory factory, ILookupNormalizer normaliser, IUserQueryFactory userQueryFactory) : base(factory, normaliser, userQueryFactory) { _notificationService = notificationService ?? throw new ArgumentNullException(nameof(notificationService)); _factory = factory ?? throw new ArgumentNullException(nameof(factory)); } ... public override async Task DeleteUser(ISSOUser user) { if (user == null) { throw new ArgumentNullException(nameof(user)); } using var uow = _factory.Create(); var databaseUser = user.ToIdentityExpressUser(); await uow.UserManager.HardDeleteAsync(databaseUser); } } As a result, when AdminUI's service layer calls the Delete method on the user store, instead of the default delete functionality, your new functionality will be called and the user will be completely removed from the database.","title":"Partial Implementation"},{"location":"CustomIdentity/PartialImplementation.html#using-adminuis-base-stores","text":"Samples of the below code can be found on our GitHub For this part of the documentation the code in Base Installation project will be considered the \"Before\".","title":"Using AdminUIs base stores"},{"location":"CustomIdentity/PartialImplementation.html#extending-functionality","text":"The example functionality extension will be performed on the CreateUser method on the ISSOUserStore . For this, you must: Create a class that derives from SSOUserStore Create a factory that creates this class Overwrite the CreateUser method and include a notifier","title":"Extending Functionality"},{"location":"CustomIdentity/PartialImplementation.html#creating-a-new-class","text":"To start, create a new class in your project call CustomUserStore.cs Make your class extend the base class SSOUserStore Create a constructor that calls base with the required interfaces Because the AdminUI DI container has already registered the services needed to extend SSOUserStore you don't need to do any DI configuration on your side, you only need to import the correct interfaces. After these steps you will end up with a class that looks like the following: public class CustomUserStore : SSOUserStore { public CustomUserStore(IIdentityUnitOfWorkFactory factory, ILookupNormalizer normaliser, IUserQueryFactory userQueryFactory) : base(factory, normaliser, userQueryFactory) { } } To use this class instead of using the default implementation, you now need to provide an implementation of the ISSOStoreFactory that returns this implementation of the ISSOUserStore and not AdminUI's In a new file create a class called CustomIdentityFactory that implements ISSOStoreFactory In the constructor, pass in classes needed to create the new CustomUserStore and CustomIdentityFactory Override the CreateUserStore method, returning the CustomUserStore After these steps you will have a new class that looks like this: public class CustomStoreFactory : ISSOStoreFactory { private readonly IIdentityUnitOfWorkFactory _factory; private readonly ILookupNormalizer _normaliser; private readonly IUserQueryFactory _userQueryFactory; public CustomStoreFactory(IIdentityUnitOfWorkFactory factory, ILookupNormalizer normaliser, IUserQueryFactory userQueryFactory) { _factory = factory ?? throw new ArgumentNullException(nameof(factory)); _normaliser = normaliser ?? throw new ArgumentNullException(nameof(normaliser)); _userQueryFactory = userQueryFactory ?? throw new ArgumentNullException(nameof(userQueryFactory)); } public ISSOUserStore CreateUserStore() { return new CustomUserStore(_factory, _normaliser, _userQueryFactory); } public ISSORoleStore CreateRoleStore() { return new SSORoleStore(_factory, _normaliser, _userQueryFactory); } public ISSOClaimTypeStore CreateClaimTypeStore() { return new SSOClaimTypeStore(_factory, _normaliser); } } Now register this factory during pipeline initialisation. In your Program.cs or Startup.cs , update the UseAdminUI call by adding WithIdentityStore . This method accepts a type that needs to implement ISSOStoreFactory var builder = WebApplication.CreateBuilder(args); builder.Services .AddAdminUI() .WithIdentityStore<CustomStoreFactory>(); If you run the code and put a breakpoint in your CustomUserStore constructor, you can see that you are now using your own code. Now you can extend it with your own functionality Now: - Create a NotificationService interface that has a Dispatch method, create a class that inherits it and register it in the DI container - Pass it into CustomUserStore . You will also need to include it in the CustomStoreFactory constructor. - Overwrite the CreateUser method to use the notification service. Now, when AdminUI creates a user, it will also call off to the new NotificationService . public class CustomUserStore : SSOUserStore { private readonly INotificationService _notificationService; public CustomUserStore(INotificationService notificationService, IIdentityUnitOfWorkFactory factory, ILookupNormalizer normaliser, IUserQueryFactory userQueryFactory) : base(factory, normaliser, userQueryFactory) { _notificationService = notificationService ?? throw new ArgumentNullException(nameof(notificationService)); } public override Task<ISSOUser> CreateUser(ISSOUser user) { var createdUser = base.CreateUser(user); _notificationService.Dispatch(\"CreateUser\"); return createdUser; } } The finished code can be found here","title":"Creating a new class"},{"location":"CustomIdentity/PartialImplementation.html#overriding-certain-calls","text":"In this section you will create a stub service to show how you overwrite certain methods if you need your own logic surrounding a method. A good example of this is the Delete method in the ISSOUserStore . By default, AdminUI performs a 'soft' deletion when deleting a user, wherein the IsDeleted flag is set to true. However, there is functionality within the UserManager used by AdminUI to perform a hard deletion wherein a user is completely removed from the database. If you preferred a user to be completely removed during deletion: Create a class that inherits from SSOUserStore like above Overwrite Delete method Initialise an instance of the unit of work Call the HardDelete method on the UserManager public class CustomUserStore : SSOUserStore { private readonly INotificationService _notificationService; private readonly IIdentityUnitOfWorkFactory _factory; public CustomUserStore(INotificationService notificationService, IIdentityUnitOfWorkFactory factory, ILookupNormalizer normaliser, IUserQueryFactory userQueryFactory) : base(factory, normaliser, userQueryFactory) { _notificationService = notificationService ?? throw new ArgumentNullException(nameof(notificationService)); _factory = factory ?? throw new ArgumentNullException(nameof(factory)); } ... public override async Task DeleteUser(ISSOUser user) { if (user == null) { throw new ArgumentNullException(nameof(user)); } using var uow = _factory.Create(); var databaseUser = user.ToIdentityExpressUser(); await uow.UserManager.HardDeleteAsync(databaseUser); } } As a result, when AdminUI's service layer calls the Delete method on the user store, instead of the default delete functionality, your new functionality will be called and the user will be completely removed from the database.","title":"Overriding certain calls"},{"location":"CustomIdentity/TenancyWithEF.html","text":"This section uses the code from full override as a starting point. You can find the finished code on our GitHub we recommend reading the previous section to understand the code written so far. Tenancy Example using Entity Framework In this documentation you will be learning how to make a non-AdminUI field (one that is not on ISSOUser) editable within AdminUI using claims. The outcome of this documentation is to take an example user like the one below - one that has TenantName on it which is linked to the tenants table (fig2) And make them editable in AdminUI by using claims: Prerequisites There are 3 NuGet packages and a few external dependencies before you get started Nuget Packages EntityFramework EntityFramework.SqlServer EntityFramework.Design A SqlServer database An IdentityServer that can access your user store to login Database First you must create a database model and be able to scaffold and seed a database with some sample data to get AdminUI. In this section you'll be using EntityFramework to do so. Models To get started you will create the models that represent your Identity model: Tenant User TenantUser is the model that will represent users in your system. This model is based off of ISSOUser but does not implement all of the interface. This is for 2 reasons: We want to include the roles a user belongs to in the model The claims collection needs a concrete type for Entity Framework to work against and ISSOUser expects a collection of ISSOClaim public class TenantUser { [Key] public string UserId { get; set; } public string UserName { get; set; } public string Email { get; set; } [ConcurrencyCheck] public string ConcurrencyStamp { get; set; } public bool TwoFactorEnabled { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public bool IsBlocked { get; } public bool IsDeleted { get; set; } public bool LockoutEnabled { get; set; } public DateTimeOffset? LockoutEnd { get; } public string Password { get; set; } public virtual ICollection<TenantRole> Roles { get; set; } public virtual ICollection<TenantClaim> Claims { get; set; } public virtual Tenant? Tenant { get; set; } } Tenant Role Describes roles that a user can belong to - including the Users collection on this allows EF to create a many-many connection between the Users and Roles tables. public class TenantRole : ISSORole { [Key] public string Id { get; set; } public string Description { get; set; } public bool NonEditable { get; set; } public string Name { get; set; } public virtual ICollection<TenantUser> Users { get; set; } } Tenant Claim Describes claims that a user has public class TenantClaim : ISSOClaim { [Key] public int Id { get; set; } public string ClaimType { get; set; } public string ClaimValue { get; set; } } Tenant The table representing tenants a user can belong to public class Tenant { [Key] public string Name { get; set; } } Tenant ClaimType ClaimTypes represent the ClaimType field on a TenantClaim . The main thing to note is your AllowedValues collection - this is how we will translate the Tenant table to a selectable list of values public class TenantClaimType { [Key] public string Id { get; set; } public string Name { get; set; } public string DisplayName { get; set; } public string Description { get; set; } public bool IsRequired { get; set; } public bool IsReserved { get; set; } public SSOClaimValueType ValueType { get; set; } public string RegularExpressionValidationRule { get; set; } public string RegularExpressionValidationFailureDescription { get; set; } public bool IsUserEditable { get; set; } public ICollection<TenantEnumClaimTypeValue> AllowedValues { get; set; } } Tenant Enum Claim Type Allowed Values This table ties allowed values to particular claim types. public class TenantEnumClaimTypeValue { public string ClaimTypeId { get; set; } public string Value { get; set; } } Create DBContext for Identity Your next step is to build a DbContext - a DbContext in EntityFramework is the primary class for interacting with your database, it has knowledge of all your tables and the relationships between them. As you're using Entity Framework to build the database (known as Code-First Entity Framework) you can let the models define most of the relationships, however a limitation in EntityFramework is that you cannot define composite keys at the model level, so you need to add an \"OnModelCreating\" override that defines the TenantEnumClaimTypeValue as a composite key of the claimType it belongs to and it's value public class CustomIdentityDb : DbContext { public CustomIdentityDb(DbContextOptions<CustomIdentityDb> options) : base(options){} protected override void OnModelCreating(ModelBuilder modelBuilder) { base.OnModelCreating(modelBuilder); modelBuilder.Entity<TenantEnumClaimTypeValue>(enumClaimTypeValue => { enumClaimTypeValue.HasKey(ctv => new { ctv.ClaimTypeId, ctv.Value }); }); } public DbSet<TenantUser> Users { get; set; } public DbSet<TenantRole> Roles { get; set; } public DbSet<TenantClaim> UserClaims { get; set; } public DbSet<TenantClaimType> ClaimTypes { get; set; } public DbSet<TenantEnumClaimTypeValue> EnumClaimTypeAllowedValues { get; set; } public DbSet<Tenant> Tenants { get; set; } } Creating and Running Migrations Now that your database has been defined in code, you'll need to get it up and running. To do this, the Entity Framework tooling needs to know where your database in and what database engine to use. So in your startup register the DbContext with .AddDbContext and use the OptionsBuilder to register a SqlServer database. builder.Services.AddDbContext<CustomIdentityDb>(options => { options.UseSqlServer(@\"Server=localhost,1433;User Id=sa;Password=Password123!;Database=CustomIdentityDb;\"); }); In our sample the connection string is hardcoded for ease but it is also possible to get it from config if you please. From a terminal or command line, navigate to your project and run the following dotnet ef migrations add InitialCreate - This is what creates the migrations. After this command is run you will have a new Migrations folder in your project. Secondly run dotnet ef database update - This command connects your project to the database server and uses the migrations previously generated to generate a database. Afterwards you can navigate to your database to confirm that it has been created successfully. Seeding the database Provided in the Program.cs of our sample solution is a commented out block of code to seed the database which does the following: Maps an HttpGet to the base path Injects the new DbContext you just created Creates an Admin role Creates 2 Tenants, Assigns the Admin Role and 1 Tenant to a new User - this is the use you will use to login to AdminUI It then creates a ClaimType that represents tenants. An important note is that this code does not populate the allowed values here as you will be filling that collection at a later time It is also required, meaning we will see it when editing user details and it is reserved, meaning no one can edit it from within AdminUI. If you would like to use the code snippet, put it above the app.Run call, comment out the app.useAdminUI call, uncomment the seed block and run your solution. Updating the stores & factory The next step is to write your services to inject your context so they can make database calls. You will also need to update your factory to As an example the User store will now look like: public class UserStore : ISSOUserStore { private readonly CustomIdentityDb _identityContext; public UserStore(CustomIdentityDb identityContext) { _identityContext = identityContext ?? throw new ArgumentNullException(nameof(identityContext)); } ... and the factory: public class CustomSSOStoreFactory : ISSOStoreFactory { private readonly CustomIdentityDb _identityDb; public CustomSSOStoreFactory(CustomIdentityDb identityDb) { _identityDb = identityDb ?? throw new ArgumentNullException(nameof(identityDb)); } public ISSOUserStore CreateUserStore() { return new UserStore(_identityDb); } ... Mapping the Tenancy field Now you will write the stores so they can make the conversion from field to claim happen. As a brief behind the scenes explanation when AdminUI gets a User it will get a list of claims for that user. This is a ClaimType-ClaimValue pair. AdminUI will then get all ClaimTypes and match that Claim's ClaimType to a ClaimType's Name The rest of the guide will not take you over all of the store methods, but the essential ones crucial to the process described above, starting with getting the Claim Types. ClaimType Store The main method to focus on in the ClaimType store is the GetAllClaimTypes method. This method: Gets all ClaimTypes from the database and maps them to our store level objects (something which implements ISSOClaimType) Finds the claim type that represents Tenant (This was added upon seed) Populates the Allowed Values collection on that object by calling off to the Tenants table and getting all the names from that table Returns the ClaimTypes public async Task<IEnumerable<ISSOClaimType>> GetAllClaimTypes() { var ctList = _identityContext.ClaimTypes.Include(claimType => claimType.AllowedValues) .Select(dbCt => dbCt.ToStoreClaimType()); var tenantCt = await ctList.FirstOrDefaultAsync(ctList => ctList.Id == TenantClaimTypeConsts.TenantCTId); tenantCt.AllowedValues = _identityContext.Tenants.Select(x => x.Name).ToList(); return await ctList.ToListAsync(); } User Store When Creating or Updating a user you must map the ClaimType that you received from the ClaimStore back from a Claim on the User to a field, for example your create should do the following: Map the incoming user to something that database can read Hash password if needed Grab the value of the Tenant claim from the passed in user Validate that the claim value matches a value in the tenants table Updates the users tenants field with that value Add, Saves and Returns C# public async Task<ISSOUser> CreateUserWithPassword(ISSOUser user, string password) { var dbUser = user.ToDbUser(); dbUser.ConcurrencyStamp = Guid.NewGuid().ToString(); dbUser.Password = _passwordHasher.HashPassword(dbUser, password); var tenantName = user.Claims.FirstOrDefault(claim => claim.ClaimType == TenantClaimTypeConsts.TenantCTName)?.ClaimValue; dbUser.Tenant = await _identityContext.Tenants.FirstOrDefaultAsync(tenant => tenant.Name == tenantName); _identityContext.Users.Add(dbUser); await _identityContext.SaveChangesAsync(); var userInDb = await _identityContext.Users.FirstOrDefaultAsync(dbUsers => dbUsers.UserName == user.UserName); return userInDb.ToStoreUser(); } C# public async Task<ISSOUser> UpdateUser(ISSOUser user) { var dbUser = await _identityContext.Users.Include(dbUser => dbUser.Claims).Include(dbUser => dbUser.Roles).Include(dbUser => dbUser.Tenant).FirstOrDefaultAsync(dbUser => dbUser.UserId == user.Id); dbUser.Email = user.Email; dbUser.FirstName = user.FirstName; dbUser.UserName = user.UserName; dbUser.TwoFactorEnabled = user.TwoFactorEnabled; dbUser.LastName = user.LastName; dbUser.ConcurrencyStamp = Guid.NewGuid().ToString(); var tenantClaim = user.Claims.FirstOrDefault(userClaim => userClaim.ClaimType == TenantClaimTypeConsts.TenantCTName)?.ClaimValue; var dbTenant = _identityContext.Tenants.FirstOrDefault(tenant => tenant.Name == tenantClaim); dbUser.Tenant = dbTenant; await _identityContext.SaveChangesAsync(); return dbUser.ToStoreUser(); } Then implement the UserStores Find methods such that when the ClaimType is encountered, you map the Tenant field to a new Claim that has the TenantClaimType as the ClaimType. For example the FindUserById method looks like this: public async Task<ISSOUser> FindUserById(string userId) { var dbUser = await _identityContext.Users.Include(user => user.Claims).Include(user => user.Roles).Include(user => user.Tenant).FirstOrDefaultAsync(user => user.UserId == userId); if (dbUser == null) { throw new UserNotFoundException(userId); } var storeUser = dbUser.ToStoreUser(); storeUser.Claims.Add(new SSOClaim(TenantClaimTypeConsts.TenantCTName, dbUser.Tenant.Name)); return storeUser; } IdentityServer Setup Your IdentityServer setup might not need changing but if you are starting from the Samples you will need to add a profile service like below public class TenantProfileService : IProfileService { private readonly CustomIdentityDb _dbContext; public TenantProfileService(CustomIdentityDb dbContext) { _dbContext = dbContext; } public async Task GetProfileDataAsync(ProfileDataRequestContext context) { var userId = context.Subject.FindFirstValue(JwtClaimTypes.Subject); var user = await _dbContext.Users.Include(user => user.Roles).FirstOrDefaultAsync(tenantUser => tenantUser.UserId == userId); if (!string.IsNullOrWhiteSpace(user?.UserName)) { context.IssuedClaims.Add(new Claim(\"name\", user.UserName)); } var userRoles = user.Roles; foreach (var role in userRoles) { context.IssuedClaims.Add(new Claim(\"role\", role.Name)); } } public Task IsActiveAsync(IsActiveContext context) { context.IsActive = true; return Task.CompletedTask; } }","title":"Tenancy With Entity Framework"},{"location":"CustomIdentity/TenancyWithEF.html#tenancy-example-using-entity-framework","text":"In this documentation you will be learning how to make a non-AdminUI field (one that is not on ISSOUser) editable within AdminUI using claims. The outcome of this documentation is to take an example user like the one below - one that has TenantName on it which is linked to the tenants table (fig2) And make them editable in AdminUI by using claims:","title":"Tenancy Example using Entity Framework"},{"location":"CustomIdentity/TenancyWithEF.html#prerequisites","text":"There are 3 NuGet packages and a few external dependencies before you get started Nuget Packages EntityFramework EntityFramework.SqlServer EntityFramework.Design A SqlServer database An IdentityServer that can access your user store to login","title":"Prerequisites"},{"location":"CustomIdentity/TenancyWithEF.html#database","text":"First you must create a database model and be able to scaffold and seed a database with some sample data to get AdminUI. In this section you'll be using EntityFramework to do so.","title":"Database"},{"location":"CustomIdentity/TenancyWithEF.html#models","text":"To get started you will create the models that represent your Identity model:","title":"Models"},{"location":"CustomIdentity/TenancyWithEF.html#tenant-user","text":"TenantUser is the model that will represent users in your system. This model is based off of ISSOUser but does not implement all of the interface. This is for 2 reasons: We want to include the roles a user belongs to in the model The claims collection needs a concrete type for Entity Framework to work against and ISSOUser expects a collection of ISSOClaim public class TenantUser { [Key] public string UserId { get; set; } public string UserName { get; set; } public string Email { get; set; } [ConcurrencyCheck] public string ConcurrencyStamp { get; set; } public bool TwoFactorEnabled { get; set; } public string FirstName { get; set; } public string LastName { get; set; } public bool IsBlocked { get; } public bool IsDeleted { get; set; } public bool LockoutEnabled { get; set; } public DateTimeOffset? LockoutEnd { get; } public string Password { get; set; } public virtual ICollection<TenantRole> Roles { get; set; } public virtual ICollection<TenantClaim> Claims { get; set; } public virtual Tenant? Tenant { get; set; } }","title":"Tenant User"},{"location":"CustomIdentity/TenancyWithEF.html#tenant-role","text":"Describes roles that a user can belong to - including the Users collection on this allows EF to create a many-many connection between the Users and Roles tables. public class TenantRole : ISSORole { [Key] public string Id { get; set; } public string Description { get; set; } public bool NonEditable { get; set; } public string Name { get; set; } public virtual ICollection<TenantUser> Users { get; set; } }","title":"Tenant Role"},{"location":"CustomIdentity/TenancyWithEF.html#tenant-claim","text":"Describes claims that a user has public class TenantClaim : ISSOClaim { [Key] public int Id { get; set; } public string ClaimType { get; set; } public string ClaimValue { get; set; } }","title":"Tenant Claim"},{"location":"CustomIdentity/TenancyWithEF.html#tenant","text":"The table representing tenants a user can belong to public class Tenant { [Key] public string Name { get; set; } }","title":"Tenant"},{"location":"CustomIdentity/TenancyWithEF.html#tenant-claimtype","text":"ClaimTypes represent the ClaimType field on a TenantClaim . The main thing to note is your AllowedValues collection - this is how we will translate the Tenant table to a selectable list of values public class TenantClaimType { [Key] public string Id { get; set; } public string Name { get; set; } public string DisplayName { get; set; } public string Description { get; set; } public bool IsRequired { get; set; } public bool IsReserved { get; set; } public SSOClaimValueType ValueType { get; set; } public string RegularExpressionValidationRule { get; set; } public string RegularExpressionValidationFailureDescription { get; set; } public bool IsUserEditable { get; set; } public ICollection<TenantEnumClaimTypeValue> AllowedValues { get; set; } }","title":"Tenant ClaimType"},{"location":"CustomIdentity/TenancyWithEF.html#tenant-enum-claim-type-allowed-values","text":"This table ties allowed values to particular claim types. public class TenantEnumClaimTypeValue { public string ClaimTypeId { get; set; } public string Value { get; set; } }","title":"Tenant Enum Claim Type Allowed Values"},{"location":"CustomIdentity/TenancyWithEF.html#create-dbcontext-for-identity","text":"Your next step is to build a DbContext - a DbContext in EntityFramework is the primary class for interacting with your database, it has knowledge of all your tables and the relationships between them. As you're using Entity Framework to build the database (known as Code-First Entity Framework) you can let the models define most of the relationships, however a limitation in EntityFramework is that you cannot define composite keys at the model level, so you need to add an \"OnModelCreating\" override that defines the TenantEnumClaimTypeValue as a composite key of the claimType it belongs to and it's value public class CustomIdentityDb : DbContext { public CustomIdentityDb(DbContextOptions<CustomIdentityDb> options) : base(options){} protected override void OnModelCreating(ModelBuilder modelBuilder) { base.OnModelCreating(modelBuilder); modelBuilder.Entity<TenantEnumClaimTypeValue>(enumClaimTypeValue => { enumClaimTypeValue.HasKey(ctv => new { ctv.ClaimTypeId, ctv.Value }); }); } public DbSet<TenantUser> Users { get; set; } public DbSet<TenantRole> Roles { get; set; } public DbSet<TenantClaim> UserClaims { get; set; } public DbSet<TenantClaimType> ClaimTypes { get; set; } public DbSet<TenantEnumClaimTypeValue> EnumClaimTypeAllowedValues { get; set; } public DbSet<Tenant> Tenants { get; set; } }","title":"Create DBContext for Identity"},{"location":"CustomIdentity/TenancyWithEF.html#creating-and-running-migrations","text":"Now that your database has been defined in code, you'll need to get it up and running. To do this, the Entity Framework tooling needs to know where your database in and what database engine to use. So in your startup register the DbContext with .AddDbContext and use the OptionsBuilder to register a SqlServer database. builder.Services.AddDbContext<CustomIdentityDb>(options => { options.UseSqlServer(@\"Server=localhost,1433;User Id=sa;Password=Password123!;Database=CustomIdentityDb;\"); }); In our sample the connection string is hardcoded for ease but it is also possible to get it from config if you please. From a terminal or command line, navigate to your project and run the following dotnet ef migrations add InitialCreate - This is what creates the migrations. After this command is run you will have a new Migrations folder in your project. Secondly run dotnet ef database update - This command connects your project to the database server and uses the migrations previously generated to generate a database. Afterwards you can navigate to your database to confirm that it has been created successfully.","title":"Creating and Running Migrations"},{"location":"CustomIdentity/TenancyWithEF.html#seeding-the-database","text":"Provided in the Program.cs of our sample solution is a commented out block of code to seed the database which does the following: Maps an HttpGet to the base path Injects the new DbContext you just created Creates an Admin role Creates 2 Tenants, Assigns the Admin Role and 1 Tenant to a new User - this is the use you will use to login to AdminUI It then creates a ClaimType that represents tenants. An important note is that this code does not populate the allowed values here as you will be filling that collection at a later time It is also required, meaning we will see it when editing user details and it is reserved, meaning no one can edit it from within AdminUI. If you would like to use the code snippet, put it above the app.Run call, comment out the app.useAdminUI call, uncomment the seed block and run your solution.","title":"Seeding the database"},{"location":"CustomIdentity/TenancyWithEF.html#updating-the-stores-factory","text":"The next step is to write your services to inject your context so they can make database calls. You will also need to update your factory to As an example the User store will now look like: public class UserStore : ISSOUserStore { private readonly CustomIdentityDb _identityContext; public UserStore(CustomIdentityDb identityContext) { _identityContext = identityContext ?? throw new ArgumentNullException(nameof(identityContext)); } ... and the factory: public class CustomSSOStoreFactory : ISSOStoreFactory { private readonly CustomIdentityDb _identityDb; public CustomSSOStoreFactory(CustomIdentityDb identityDb) { _identityDb = identityDb ?? throw new ArgumentNullException(nameof(identityDb)); } public ISSOUserStore CreateUserStore() { return new UserStore(_identityDb); } ...","title":"Updating the stores &amp; factory"},{"location":"CustomIdentity/TenancyWithEF.html#mapping-the-tenancy-field","text":"Now you will write the stores so they can make the conversion from field to claim happen. As a brief behind the scenes explanation when AdminUI gets a User it will get a list of claims for that user. This is a ClaimType-ClaimValue pair. AdminUI will then get all ClaimTypes and match that Claim's ClaimType to a ClaimType's Name The rest of the guide will not take you over all of the store methods, but the essential ones crucial to the process described above, starting with getting the Claim Types.","title":"Mapping the Tenancy field"},{"location":"CustomIdentity/TenancyWithEF.html#claimtype-store","text":"The main method to focus on in the ClaimType store is the GetAllClaimTypes method. This method: Gets all ClaimTypes from the database and maps them to our store level objects (something which implements ISSOClaimType) Finds the claim type that represents Tenant (This was added upon seed) Populates the Allowed Values collection on that object by calling off to the Tenants table and getting all the names from that table Returns the ClaimTypes public async Task<IEnumerable<ISSOClaimType>> GetAllClaimTypes() { var ctList = _identityContext.ClaimTypes.Include(claimType => claimType.AllowedValues) .Select(dbCt => dbCt.ToStoreClaimType()); var tenantCt = await ctList.FirstOrDefaultAsync(ctList => ctList.Id == TenantClaimTypeConsts.TenantCTId); tenantCt.AllowedValues = _identityContext.Tenants.Select(x => x.Name).ToList(); return await ctList.ToListAsync(); }","title":"ClaimType Store"},{"location":"CustomIdentity/TenancyWithEF.html#user-store","text":"When Creating or Updating a user you must map the ClaimType that you received from the ClaimStore back from a Claim on the User to a field, for example your create should do the following: Map the incoming user to something that database can read Hash password if needed Grab the value of the Tenant claim from the passed in user Validate that the claim value matches a value in the tenants table Updates the users tenants field with that value Add, Saves and Returns C# public async Task<ISSOUser> CreateUserWithPassword(ISSOUser user, string password) { var dbUser = user.ToDbUser(); dbUser.ConcurrencyStamp = Guid.NewGuid().ToString(); dbUser.Password = _passwordHasher.HashPassword(dbUser, password); var tenantName = user.Claims.FirstOrDefault(claim => claim.ClaimType == TenantClaimTypeConsts.TenantCTName)?.ClaimValue; dbUser.Tenant = await _identityContext.Tenants.FirstOrDefaultAsync(tenant => tenant.Name == tenantName); _identityContext.Users.Add(dbUser); await _identityContext.SaveChangesAsync(); var userInDb = await _identityContext.Users.FirstOrDefaultAsync(dbUsers => dbUsers.UserName == user.UserName); return userInDb.ToStoreUser(); } C# public async Task<ISSOUser> UpdateUser(ISSOUser user) { var dbUser = await _identityContext.Users.Include(dbUser => dbUser.Claims).Include(dbUser => dbUser.Roles).Include(dbUser => dbUser.Tenant).FirstOrDefaultAsync(dbUser => dbUser.UserId == user.Id); dbUser.Email = user.Email; dbUser.FirstName = user.FirstName; dbUser.UserName = user.UserName; dbUser.TwoFactorEnabled = user.TwoFactorEnabled; dbUser.LastName = user.LastName; dbUser.ConcurrencyStamp = Guid.NewGuid().ToString(); var tenantClaim = user.Claims.FirstOrDefault(userClaim => userClaim.ClaimType == TenantClaimTypeConsts.TenantCTName)?.ClaimValue; var dbTenant = _identityContext.Tenants.FirstOrDefault(tenant => tenant.Name == tenantClaim); dbUser.Tenant = dbTenant; await _identityContext.SaveChangesAsync(); return dbUser.ToStoreUser(); } Then implement the UserStores Find methods such that when the ClaimType is encountered, you map the Tenant field to a new Claim that has the TenantClaimType as the ClaimType. For example the FindUserById method looks like this: public async Task<ISSOUser> FindUserById(string userId) { var dbUser = await _identityContext.Users.Include(user => user.Claims).Include(user => user.Roles).Include(user => user.Tenant).FirstOrDefaultAsync(user => user.UserId == userId); if (dbUser == null) { throw new UserNotFoundException(userId); } var storeUser = dbUser.ToStoreUser(); storeUser.Claims.Add(new SSOClaim(TenantClaimTypeConsts.TenantCTName, dbUser.Tenant.Name)); return storeUser; }","title":"User Store"},{"location":"CustomIdentity/TenancyWithEF.html#identityserver-setup","text":"Your IdentityServer setup might not need changing but if you are starting from the Samples you will need to add a profile service like below public class TenantProfileService : IProfileService { private readonly CustomIdentityDb _dbContext; public TenantProfileService(CustomIdentityDb dbContext) { _dbContext = dbContext; } public async Task GetProfileDataAsync(ProfileDataRequestContext context) { var userId = context.Subject.FindFirstValue(JwtClaimTypes.Subject); var user = await _dbContext.Users.Include(user => user.Roles).FirstOrDefaultAsync(tenantUser => tenantUser.UserId == userId); if (!string.IsNullOrWhiteSpace(user?.UserName)) { context.IssuedClaims.Add(new Claim(\"name\", user.UserName)); } var userRoles = user.Roles; foreach (var role in userRoles) { context.IssuedClaims.Add(new Claim(\"role\", role.Name)); } } public Task IsActiveAsync(IsActiveContext context) { context.IsActive = true; return Task.CompletedTask; } }","title":"IdentityServer Setup"},{"location":"FAQs/FAQs.html","text":"I am experiencing caching issues when updating AdminUI This is typically due to the index.html file being cached in the browser. Whilst AdminUI has aggressive default caching in the index.html file these settings could be overriden by certain setups. If this is the case or you need to change the defaults we recommend updating your webserver following the guidelines from the mozilla documentaion . When updating/deleting a user/client/resource AdminUI is unable to perform the action and a CORS error is in the console. If you can sign in but not update users/clients/resources then you may have something blocking PUT/DELETE requests on your environment I have installed AdminUI, but it is in a foreign language. The website uses your browser culture to check what language to display. You can either change your browser language or change the route to use your preferred culture of choice: e.g: http://YourAdminUI-UI/en-GB. When running migrations I get a Create Unique Index error If you see and error similar to the following: CREATE UNIQUE INDEX statement terminated because a duplicate key was found for the object name 'dbo.ClientScopes' and the index name 'IX_ClientScopes_ClientId_Scope'. The duplicate key value is (1, admin_api). This usually occurs when trying to upgrade to an AdminUI versions from before we introduced a unique index on the ClientScopes and ApiScopes tables. The fix is to rename duplicate ApiScopes and remove duplicate entries from the ClientScopes table. I\u2019m getting a HTTP Error 500.19 - Internal Service Error when starting AdminUI. Please download and run the dotnet core hosting bundle. For those on AdminUI 6.x.x and above please use the following link: https://dotnet.microsoft.com/en-us/download/dotnet/6.0 For those on AdminUI 3.x.x to 5.x.x and above please use the following link: https://dotnet.microsoft.com/download/dotnet-core/3.1 If you are running AdminUI 2.6 and below please use the following link: https://dotnet.microsoft.com/download/dotnet-core/2.1 If this fails to work and your configuration looks correct please send us a copy of your AdminUI logs to support@identityserver.com and we will be able to help as soon as possible. When starting AdminUI I get the following message - \u201cAn unhandled exception occurred while processing the request. AggregateException: One or more errors occurred. (One or more errors occurred. (Failed to start 'npm')\u201d This is due to your ASPNETCORE_ENVIRONMENT being set to \u201cDevelopment\u201d. to change this set the ASPNETCORE_ENVIRONMENT variable to \u201cProduction\u201d Either in your appsettings.json or your web.config When running AdminUI on a path, the path is stripped from UI requests Please use the X-Forwarded-Prefix header to allow AdminUI to attach your path to the PathBase of the request. For example in nginx this would look like: location /admin/{ ... proxy_set_header X-Forwarded-Prefix /admin; ... } My license key is invalid, what do I do? Please ensure that you have only copy pasted the Base64 string. Example: eyJTb2xkRm9yIjowLjAsIktleVByZXNldCI6MSwiU2F2ZUtleSI6ZmFsc2UsIkxlZ2FjeUtleSI6ZmFsc2UsIlJlbmV3YWxTZW50VGltZSI6IjAwMDEtMDEtMDFUMDA6MDA6MDAiLCJleHAiOiIyMDIwLTA3LTMwVDAxOjAwOjAyLjgzOTIwNTIrMDE6MDAiLCJpYXQiOiIyMDIwLTA2LTMwVDAwOjAwOjAyIiwiYXVkIjoxLCJ0eXBlIjozfQ==.f6vJQUvAZeSIe+1kf9n2G664UgDcpctpET7YwGrRP+h8V2bn9TYi/NXizi2ddQYEoWCmJSk47ro6JZJLjc1wq+5Re9Eu+rJjjaPcLRkgrOLJgaGZYYQJIwHS4Obta+uYtoC7uGqyYubtqxmExh1DghYOF8wR/E3ZauRJHlKG9aObVVxXt3VecPzl4+bGOGOC0vCk07aLYxW5VE539Pfv9hFAmPaM5mgy6br7cW0PAvbVNwSnLdmFgE0CgDYcHouItd6jVHILRvD6s0CjZjEFJ1Dhu2OH3CHau3GXpSQ/Xl85GXHClorY5JbC5UcqCPpqbTyYUd7QBV0e2H0VHBNRxb8AvZ2SnacY94DiZouzbDhso9ihEy3Jt4dHvDjsW5TJ5lvFFgRBJNFajG3ZBN2pfd/4O/CgWzJw+SX0epTcE7cd31OzWBCOqE4yxYbPTANqHiweqToROaangoUUYDm6M7IhjjCDtczgLCoI5hu28ZxI7xN4NYBqKS4uWF71uw+QW3YckQSiZQOo9Nc4NJBPMVdLi8O0LwAse5RIT8ywJoFbm25r4Oat18tILn7HsIuJH7WXC8jQxwL0qEZjbuNYBAgI/UN7Yw5xTXp6evbIUNrmiTO6o7DE0QviOy89qH0BT3QrKoPdEaHH4RM+rsgiQGcd2QBjU9PS5A7NDpsRc/E= Ensure there are no additional characters before or after the license key. If your license key has expired or is setup against an AuthorityUrl you did not expect. Please contact support@identityserver.com","title":"FAQs"},{"location":"FAQs/FAQs.html#i-am-experiencing-caching-issues-when-updating-adminui","text":"This is typically due to the index.html file being cached in the browser. Whilst AdminUI has aggressive default caching in the index.html file these settings could be overriden by certain setups. If this is the case or you need to change the defaults we recommend updating your webserver following the guidelines from the mozilla documentaion .","title":"I am experiencing caching issues when updating AdminUI"},{"location":"FAQs/FAQs.html#when-updatingdeleting-a-userclientresource-adminui-is-unable-to-perform-the-action-and-a-cors-error-is-in-the-console","text":"If you can sign in but not update users/clients/resources then you may have something blocking PUT/DELETE requests on your environment","title":"When updating/deleting a user/client/resource AdminUI is unable to perform the action and a CORS error is in the console."},{"location":"FAQs/FAQs.html#i-have-installed-adminui-but-it-is-in-a-foreign-language","text":"The website uses your browser culture to check what language to display. You can either change your browser language or change the route to use your preferred culture of choice: e.g: http://YourAdminUI-UI/en-GB.","title":"I have installed AdminUI, but it is in a foreign language."},{"location":"FAQs/FAQs.html#when-running-migrations-i-get-a-create-unique-index-error","text":"If you see and error similar to the following: CREATE UNIQUE INDEX statement terminated because a duplicate key was found for the object name 'dbo.ClientScopes' and the index name 'IX_ClientScopes_ClientId_Scope'. The duplicate key value is (1, admin_api). This usually occurs when trying to upgrade to an AdminUI versions from before we introduced a unique index on the ClientScopes and ApiScopes tables. The fix is to rename duplicate ApiScopes and remove duplicate entries from the ClientScopes table.","title":"When running migrations I get a Create Unique Index error"},{"location":"FAQs/FAQs.html#im-getting-a-http-error-50019-internal-service-error-when-starting-adminui","text":"Please download and run the dotnet core hosting bundle. For those on AdminUI 6.x.x and above please use the following link: https://dotnet.microsoft.com/en-us/download/dotnet/6.0 For those on AdminUI 3.x.x to 5.x.x and above please use the following link: https://dotnet.microsoft.com/download/dotnet-core/3.1 If you are running AdminUI 2.6 and below please use the following link: https://dotnet.microsoft.com/download/dotnet-core/2.1 If this fails to work and your configuration looks correct please send us a copy of your AdminUI logs to support@identityserver.com and we will be able to help as soon as possible.","title":"I\u2019m getting a HTTP Error 500.19 - Internal Service Error when starting AdminUI."},{"location":"FAQs/FAQs.html#when-starting-adminui-i-get-the-following-message-an-unhandled-exception-occurred-while-processing-the-request-aggregateexception-one-or-more-errors-occurred-one-or-more-errors-occurred-failed-to-start-npm","text":"This is due to your ASPNETCORE_ENVIRONMENT being set to \u201cDevelopment\u201d. to change this set the ASPNETCORE_ENVIRONMENT variable to \u201cProduction\u201d Either in your appsettings.json or your web.config","title":"When starting AdminUI I get the following message - \u201cAn unhandled exception occurred while processing the request. AggregateException: One or more errors occurred. (One or more errors occurred. (Failed to start 'npm')\u201d"},{"location":"FAQs/FAQs.html#when-running-adminui-on-a-path-the-path-is-stripped-from-ui-requests","text":"Please use the X-Forwarded-Prefix header to allow AdminUI to attach your path to the PathBase of the request. For example in nginx this would look like: location /admin/{ ... proxy_set_header X-Forwarded-Prefix /admin; ... }","title":"When running AdminUI on a path, the path is stripped from UI requests"},{"location":"FAQs/FAQs.html#my-license-key-is-invalid-what-do-i-do","text":"Please ensure that you have only copy pasted the Base64 string. Example: eyJTb2xkRm9yIjowLjAsIktleVByZXNldCI6MSwiU2F2ZUtleSI6ZmFsc2UsIkxlZ2FjeUtleSI6ZmFsc2UsIlJlbmV3YWxTZW50VGltZSI6IjAwMDEtMDEtMDFUMDA6MDA6MDAiLCJleHAiOiIyMDIwLTA3LTMwVDAxOjAwOjAyLjgzOTIwNTIrMDE6MDAiLCJpYXQiOiIyMDIwLTA2LTMwVDAwOjAwOjAyIiwiYXVkIjoxLCJ0eXBlIjozfQ==.f6vJQUvAZeSIe+1kf9n2G664UgDcpctpET7YwGrRP+h8V2bn9TYi/NXizi2ddQYEoWCmJSk47ro6JZJLjc1wq+5Re9Eu+rJjjaPcLRkgrOLJgaGZYYQJIwHS4Obta+uYtoC7uGqyYubtqxmExh1DghYOF8wR/E3ZauRJHlKG9aObVVxXt3VecPzl4+bGOGOC0vCk07aLYxW5VE539Pfv9hFAmPaM5mgy6br7cW0PAvbVNwSnLdmFgE0CgDYcHouItd6jVHILRvD6s0CjZjEFJ1Dhu2OH3CHau3GXpSQ/Xl85GXHClorY5JbC5UcqCPpqbTyYUd7QBV0e2H0VHBNRxb8AvZ2SnacY94DiZouzbDhso9ihEy3Jt4dHvDjsW5TJ5lvFFgRBJNFajG3ZBN2pfd/4O/CgWzJw+SX0epTcE7cd31OzWBCOqE4yxYbPTANqHiweqToROaangoUUYDm6M7IhjjCDtczgLCoI5hu28ZxI7xN4NYBqKS4uWF71uw+QW3YckQSiZQOo9Nc4NJBPMVdLi8O0LwAse5RIT8ywJoFbm25r4Oat18tILn7HsIuJH7WXC8jQxwL0qEZjbuNYBAgI/UN7Yw5xTXp6evbIUNrmiTO6o7DE0QviOy89qH0BT3QrKoPdEaHH4RM+rsgiQGcd2QBjU9PS5A7NDpsRc/E= Ensure there are no additional characters before or after the license key. If your license key has expired or is setup against an AuthorityUrl you did not expect. Please contact support@identityserver.com","title":"My license key is invalid, what do I do?"},{"location":"IdentityServer/What_Is_IdentityServer.html","text":"What is IdentityServer? IdentityServer is a .NET framework which allows you to develop an identity solution, using the OpenID connect protocol an extension to OAuth 2.0. Using this library you can provide a single sign on solution, a process which centralizes the authentication of your users into one location, allowing you to provide a secure and robust solution to user identity and authentication. How does AdminUI fit in? AdminUI provides a web portal for you to administer your IdentityServer solution. Using AdminUI you can perform configuration of users and clients. AdminUI will also guide you through the configuration of your identity solution, making it easier and quicker than developing code. This is only a brief overview of IdentityServer and AdminUI you may want to look at the following links for more details; Introduction to IdentityServer More information about AdminUI If you are looking for remote development support, production support, consultancy or guidance with IdentityServer, don\u2019t hesitate to contact sales@identityserver.com for a free quote.","title":"What is IdentityServer"},{"location":"IdentityServer/What_Is_IdentityServer.html#what-is-identityserver","text":"IdentityServer is a .NET framework which allows you to develop an identity solution, using the OpenID connect protocol an extension to OAuth 2.0. Using this library you can provide a single sign on solution, a process which centralizes the authentication of your users into one location, allowing you to provide a secure and robust solution to user identity and authentication.","title":"What is IdentityServer?"},{"location":"IdentityServer/What_Is_IdentityServer.html#how-does-adminui-fit-in","text":"AdminUI provides a web portal for you to administer your IdentityServer solution. Using AdminUI you can perform configuration of users and clients. AdminUI will also guide you through the configuration of your identity solution, making it easier and quicker than developing code. This is only a brief overview of IdentityServer and AdminUI you may want to look at the following links for more details; Introduction to IdentityServer More information about AdminUI If you are looking for remote development support, production support, consultancy or guidance with IdentityServer, don\u2019t hesitate to contact sales@identityserver.com for a free quote.","title":"How does AdminUI fit in?"},{"location":"Import_and_Export/Certificates.html","text":"Certificate Conflicts If your SAML client was setup with request or response certificates, or the client being updated is configured with request or response certificates, then you will see the following screen This screen provides the following options; Use existing certificate Do not update the certificate(s) currently set for the effected client Upload new certificate Will allow you to upload new certificates to apply to the effected client Upload new certificate Selecting to upload a new certificate you will be presented with this screen; Here you can manually add request and response certificates to your SAML client. Do not add certificate If your SAML client was exported with request or response certificates and is new to the system, then you can choose not to add any request or response certificates If you choose this option, the SAML client will be imported without request or response certificates. You can always add these later through the client edit screen.","title":"Importing SAML Clients with Certificates"},{"location":"Import_and_Export/Certificates.html#certificate-conflicts","text":"If your SAML client was setup with request or response certificates, or the client being updated is configured with request or response certificates, then you will see the following screen This screen provides the following options; Use existing certificate Do not update the certificate(s) currently set for the effected client Upload new certificate Will allow you to upload new certificates to apply to the effected client","title":"Certificate Conflicts"},{"location":"Import_and_Export/Certificates.html#upload-new-certificate","text":"Selecting to upload a new certificate you will be presented with this screen; Here you can manually add request and response certificates to your SAML client.","title":"Upload new certificate"},{"location":"Import_and_Export/Certificates.html#do-not-add-certificate","text":"If your SAML client was exported with request or response certificates and is new to the system, then you can choose not to add any request or response certificates If you choose this option, the SAML client will be imported without request or response certificates. You can always add these later through the client edit screen.","title":"Do not add certificate"},{"location":"Import_and_Export/Export.html","text":"Exporting clients In order to use the export clients feature you will need to navigate to the clients page. Clicking the export button located to the right of the \"Add Client\" button at the top of the page will export all clients and their associated claim types, identity resources and protected resources. When exporting clients their secrets and certificates will not be exported. Any clients that have secrets or certificates will be flagged for you to review upon import. Exporting specific clients To export specific clients you can select clients individually within the clients list or use the checkbox at the top to select all. When you select clients from the list the export button will display the number of clients you have selected. Note: If a client is reserved it is not selectable for export. Example JSON The format of the export is JSON. Below you will see example JSON displaying a client that has been selected for export along with its associated resources and claim types. Note: Although you can edit this JSON manually before import, it is not advisable due to potential parsing errors { \"metadata\": { \"exportedAt\": \"2020-01-20T09:49:12Z\", \"exportedBy\": \"info@rocksolidknowledge.com\", \"exportVersion\": \"2.6\" }, \"clients\": [ { \"clientId\": \"a46cfa01b4704f16a9fec1cd6cc4b015\", \"clientName\": \"RSK_SPA_HR\", \"description\": \"HR management portal\", \"enabled\": true, \"clientType\": 7, \"protocolType\": \"oidc\", \"requireClientSecret\": false, \"clientUri\": \"https://localhost:5000\", \"requireConsent\": true, \"allowRememberConsent\": true, \"allowedGrantTypes\": [ \"authorization_code\" ], \"requirePkce\": true, \"allowPlainTextPkce\": false, \"allowAccessTokensViaBrowser\": false, \"redirectUris\": [ \"https://localhost:5000\" ], \"postLogoutRedirectUris\": [ \"https://localhost:5000\" ], \"frontChannelLogoutSessionRequired\": true, \"allowOfflineAccess\": false, \"allowedScopes\": [ \"admin_ui_profile\", \"RSK Profile\", \"admin_ui_public\", \"admin_api\" ], \"alwaysIncludeUserClaimsInIdToken\": false, \"identityTokenLifetime\": 300, \"accessTokenLifetime\": 1800, \"authorizationCodeLifetime\": 300, \"absoluteRefreshTokenLifetime\": 2592000, \"slidingRefreshTokenLifetime\": 1296000, \"refreshTokenUsage\": 1, \"updateAccessTokenClaimsOnRefresh\": false, \"refreshTokenExpiration\": 1, \"accessTokenType\": 0, \"enableLocalLogin\": true, \"identityProviderRestrictions\": [], \"includeJwtId\": false, \"alwaysSendClientClaims\": false, \"allowedCorsOrigins\": [ \"https://localhost:5000\" ], \"properties\": [], \"backChannelLogoutSessionRequired\": true, \"nonEditable\": false, \"deviceCodeLifetime\": 300, \"reserved\": false, \"claims\": [], \"hadSecrets\": false } ], \"identityResources\": [ { \"name\": \"RSK Profile\", \"displayName\": \"RSK Profile Resource\", \"description\": \"This is the RSK Profile resource\", \"enabled\": true, \"required\": false, \"emphasize\": false, \"showInDiscoveryDocument\": true, \"allowedClaims\": [ \"RSK-Id\" ], \"nonEditable\": false } ], \"claimTypes\": [ { \"name\": \"RSK-Id\", \"description\": \"This is the ClaimType RSK-Id\", \"required\": false, \"reserved\": false, \"valueType\": 0, \"rule\": \"\", \"ruleValidationFailureDescription\": \"\", \"userEditable\": false } ] }","title":"Exporting Clients"},{"location":"Import_and_Export/Export.html#exporting-clients","text":"In order to use the export clients feature you will need to navigate to the clients page. Clicking the export button located to the right of the \"Add Client\" button at the top of the page will export all clients and their associated claim types, identity resources and protected resources. When exporting clients their secrets and certificates will not be exported. Any clients that have secrets or certificates will be flagged for you to review upon import.","title":"Exporting clients"},{"location":"Import_and_Export/Export.html#exporting-specific-clients","text":"To export specific clients you can select clients individually within the clients list or use the checkbox at the top to select all. When you select clients from the list the export button will display the number of clients you have selected. Note: If a client is reserved it is not selectable for export.","title":"Exporting specific clients"},{"location":"Import_and_Export/Export.html#example-json","text":"The format of the export is JSON. Below you will see example JSON displaying a client that has been selected for export along with its associated resources and claim types. Note: Although you can edit this JSON manually before import, it is not advisable due to potential parsing errors { \"metadata\": { \"exportedAt\": \"2020-01-20T09:49:12Z\", \"exportedBy\": \"info@rocksolidknowledge.com\", \"exportVersion\": \"2.6\" }, \"clients\": [ { \"clientId\": \"a46cfa01b4704f16a9fec1cd6cc4b015\", \"clientName\": \"RSK_SPA_HR\", \"description\": \"HR management portal\", \"enabled\": true, \"clientType\": 7, \"protocolType\": \"oidc\", \"requireClientSecret\": false, \"clientUri\": \"https://localhost:5000\", \"requireConsent\": true, \"allowRememberConsent\": true, \"allowedGrantTypes\": [ \"authorization_code\" ], \"requirePkce\": true, \"allowPlainTextPkce\": false, \"allowAccessTokensViaBrowser\": false, \"redirectUris\": [ \"https://localhost:5000\" ], \"postLogoutRedirectUris\": [ \"https://localhost:5000\" ], \"frontChannelLogoutSessionRequired\": true, \"allowOfflineAccess\": false, \"allowedScopes\": [ \"admin_ui_profile\", \"RSK Profile\", \"admin_ui_public\", \"admin_api\" ], \"alwaysIncludeUserClaimsInIdToken\": false, \"identityTokenLifetime\": 300, \"accessTokenLifetime\": 1800, \"authorizationCodeLifetime\": 300, \"absoluteRefreshTokenLifetime\": 2592000, \"slidingRefreshTokenLifetime\": 1296000, \"refreshTokenUsage\": 1, \"updateAccessTokenClaimsOnRefresh\": false, \"refreshTokenExpiration\": 1, \"accessTokenType\": 0, \"enableLocalLogin\": true, \"identityProviderRestrictions\": [], \"includeJwtId\": false, \"alwaysSendClientClaims\": false, \"allowedCorsOrigins\": [ \"https://localhost:5000\" ], \"properties\": [], \"backChannelLogoutSessionRequired\": true, \"nonEditable\": false, \"deviceCodeLifetime\": 300, \"reserved\": false, \"claims\": [], \"hadSecrets\": false } ], \"identityResources\": [ { \"name\": \"RSK Profile\", \"displayName\": \"RSK Profile Resource\", \"description\": \"This is the RSK Profile resource\", \"enabled\": true, \"required\": false, \"emphasize\": false, \"showInDiscoveryDocument\": true, \"allowedClaims\": [ \"RSK-Id\" ], \"nonEditable\": false } ], \"claimTypes\": [ { \"name\": \"RSK-Id\", \"description\": \"This is the ClaimType RSK-Id\", \"required\": false, \"reserved\": false, \"valueType\": 0, \"rule\": \"\", \"ruleValidationFailureDescription\": \"\", \"userEditable\": false } ] }","title":"Example JSON"},{"location":"Import_and_Export/Import.html","text":"Importing clients In order to use the import clients feature you will need to navigate to the clients page. Clicking the import button located to the right of the \"Add Client\" button at the top of the page will open the import wizard. Select a file using the file picker to upload a JSON file that was generated from the export . Once you hit \"Start\" the file will be validated beginning the import process. Import Screens Import Summary Within the import you will see a series of summary screens that describe the differences between what you are trying to import and what exists in the system. There are 4 states that a client, resource or claim type can be in, these are shown on the right hand side of the image below. New describes a resource that is in the import file but not within the current system Duplicate describes a resource that is in the import file and in the current system where the resource does not differ at all between the two Change describes a resource that is in the import file and in the current system where the resource itself differs between the two Dependencies describes a resource that is in the import file and in the current system where the resource's depencies differ between the two An example of this is where a client is the same in the import as it is in the current system, it has a protected resource that is in the import and in the current system but the protected resource has changes between the import and in the current system Reviewing Changes Clicking the \"Change\" hyperlink in a summary will take you to a screen displaying the differences between the resource in the import file and in the current system. Declining the changes will deselect the dependent client for that resource in the Client Summary screen. Resources & Claim Types The summary screen for resources and claim types has an additional column which displays how many clients the current resource or claim type is a dependent of. The review changes screen shows changes in the same way, but with a couple of notable changes. The screen shows you which clients the resource you are reviewing is a dependent of. The \"Importing\" section of this warning displays any clients from the import file. The \"Existing\" section shows any clients that are in the current system. A client can appear in both lists for example RSK_API is within the import file and within the current system so appears twice. When you have a protected resource that has scopes that are conflicted, you will see an additional table for each scope. This can be seen under the \"Conflicted Scopes\" header.","title":"Importing Clients"},{"location":"Import_and_Export/Import.html#importing-clients","text":"In order to use the import clients feature you will need to navigate to the clients page. Clicking the import button located to the right of the \"Add Client\" button at the top of the page will open the import wizard. Select a file using the file picker to upload a JSON file that was generated from the export . Once you hit \"Start\" the file will be validated beginning the import process.","title":"Importing clients"},{"location":"Import_and_Export/Import.html#import-screens","text":"","title":"Import Screens"},{"location":"Import_and_Export/Import.html#import-summary","text":"Within the import you will see a series of summary screens that describe the differences between what you are trying to import and what exists in the system. There are 4 states that a client, resource or claim type can be in, these are shown on the right hand side of the image below. New describes a resource that is in the import file but not within the current system Duplicate describes a resource that is in the import file and in the current system where the resource does not differ at all between the two Change describes a resource that is in the import file and in the current system where the resource itself differs between the two Dependencies describes a resource that is in the import file and in the current system where the resource's depencies differ between the two An example of this is where a client is the same in the import as it is in the current system, it has a protected resource that is in the import and in the current system but the protected resource has changes between the import and in the current system","title":"Import Summary"},{"location":"Import_and_Export/Import.html#reviewing-changes","text":"Clicking the \"Change\" hyperlink in a summary will take you to a screen displaying the differences between the resource in the import file and in the current system. Declining the changes will deselect the dependent client for that resource in the Client Summary screen.","title":"Reviewing  Changes"},{"location":"Import_and_Export/Import.html#resources-claim-types","text":"The summary screen for resources and claim types has an additional column which displays how many clients the current resource or claim type is a dependent of. The review changes screen shows changes in the same way, but with a couple of notable changes. The screen shows you which clients the resource you are reviewing is a dependent of. The \"Importing\" section of this warning displays any clients from the import file. The \"Existing\" section shows any clients that are in the current system. A client can appear in both lists for example RSK_API is within the import file and within the current system so appears twice. When you have a protected resource that has scopes that are conflicted, you will see an additional table for each scope. This can be seen under the \"Conflicted Scopes\" header.","title":"Resources &amp; Claim Types"},{"location":"Import_and_Export/Import_and_Export_Via_API.html","text":"Importing and Exporting via the API This page describes how to use the import and export features through the API. To make requests to the endpoints below the client making the requests must have the correct access rights. For more information see the swagger docs on the API at /swagger . Exporting All Clients To export all clients in the system, use the following configuration URL: /clients/export Http Method: POST Content type: application/vnd.adminui.export-clients-v1+json Return type: export-clients-v1+json Exporting Specific Clients To export only a specific set of clients, use the following configuration URL: /clients/export/specified Http Method: POST Content type: export-specified-clients-v1+json Return type: export-clients-v1+json Parameters: clientIds (Required) Form data value the name of the value is clientIds and the value is a comma separated list of client ids that will be exported Import Validation To validate your import use the following configuration: Http Method: POST Content type: application/vnd.adminui.import-clients-validation-v1+json Return type: application/vnd.adminui.import-clients-validation-result-v1+json URL: http://localhost:5001/clients/import/validate An example model can be found in the export documentation here Complete an Import To complete import after validation use the following configuration Http Method: POST Content type: application/vnd.adminui.import-clients-v1+json URL: http://localhost:5001/clients/import The request body will be the same as the previous model with an appended section for the import configuration. \"importConfiguration\":{ \"clients\":[ { \"ResourceId\":\"a46cfa01b4704f16a9fec1cd6cc4b015\" } ], \"protectedResources\":[ ] }","title":"Import and Export Via the API"},{"location":"Import_and_Export/Import_and_Export_Via_API.html#importing-and-exporting-via-the-api","text":"This page describes how to use the import and export features through the API. To make requests to the endpoints below the client making the requests must have the correct access rights. For more information see the swagger docs on the API at /swagger .","title":"Importing and Exporting via the API"},{"location":"Import_and_Export/Import_and_Export_Via_API.html#exporting-all-clients","text":"To export all clients in the system, use the following configuration URL: /clients/export Http Method: POST Content type: application/vnd.adminui.export-clients-v1+json Return type: export-clients-v1+json","title":"Exporting All Clients"},{"location":"Import_and_Export/Import_and_Export_Via_API.html#exporting-specific-clients","text":"To export only a specific set of clients, use the following configuration URL: /clients/export/specified Http Method: POST Content type: export-specified-clients-v1+json Return type: export-clients-v1+json Parameters: clientIds (Required) Form data value the name of the value is clientIds and the value is a comma separated list of client ids that will be exported","title":"Exporting Specific Clients"},{"location":"Import_and_Export/Import_and_Export_Via_API.html#import-validation","text":"To validate your import use the following configuration: Http Method: POST Content type: application/vnd.adminui.import-clients-validation-v1+json Return type: application/vnd.adminui.import-clients-validation-result-v1+json URL: http://localhost:5001/clients/import/validate An example model can be found in the export documentation here","title":"Import Validation"},{"location":"Import_and_Export/Import_and_Export_Via_API.html#complete-an-import","text":"To complete import after validation use the following configuration Http Method: POST Content type: application/vnd.adminui.import-clients-v1+json URL: http://localhost:5001/clients/import The request body will be the same as the previous model with an appended section for the import configuration. \"importConfiguration\":{ \"clients\":[ { \"ResourceId\":\"a46cfa01b4704f16a9fec1cd6cc4b015\" } ], \"protectedResources\":[ ] }","title":"Complete an Import"},{"location":"Import_and_Export/Secrets.html","text":"Secret Conflicts If the client or protected resource you are currently importing had a secret when it was exported, the import process will prompt you to recreate it. The following screen will be shown when importing a client or protected resource that has a secret Using this screen you have three choices; Use existing secrets Do not update the secret(s) currently set for the effected client or protected resource currently in AdminUI Generate a random secret Will generate a brand new secret for the effected client or protected resource Manually create secrets Will display the secrets screen allowing you to generate or enter your own secret(s) If the client effected by the import does not have a secret you will see a similar screen. Using this screen you have three choices; Do not set a secret Do not add a secret to the effected client or protected resource. This will leave this client or protected resource without a secret Generate a random secret Will generate a brand new secret for the effected client or protected resource Manually create secrets Will display the secrets screen allowing you to generate or enter your own secret(s) If you use the 'Remember my decisions and apply to all remaining secrets' check box the last chosen option will be used for all remaining clients or protected resources. Download Secrets Any secrets created during import will be available to download at the end of the import process.","title":"Importing Client Configuration with Secrets"},{"location":"Import_and_Export/Secrets.html#secret-conflicts","text":"If the client or protected resource you are currently importing had a secret when it was exported, the import process will prompt you to recreate it. The following screen will be shown when importing a client or protected resource that has a secret Using this screen you have three choices; Use existing secrets Do not update the secret(s) currently set for the effected client or protected resource currently in AdminUI Generate a random secret Will generate a brand new secret for the effected client or protected resource Manually create secrets Will display the secrets screen allowing you to generate or enter your own secret(s) If the client effected by the import does not have a secret you will see a similar screen. Using this screen you have three choices; Do not set a secret Do not add a secret to the effected client or protected resource. This will leave this client or protected resource without a secret Generate a random secret Will generate a brand new secret for the effected client or protected resource Manually create secrets Will display the secrets screen allowing you to generate or enter your own secret(s) If you use the 'Remember my decisions and apply to all remaining secrets' check box the last chosen option will be used for all remaining clients or protected resources.","title":"Secret Conflicts"},{"location":"Import_and_Export/Secrets.html#download-secrets","text":"Any secrets created during import will be available to download at the end of the import process.","title":"Download Secrets"},{"location":"Installation/Installation_Azure.html","text":"This walkthrough will run through setting up AdminUI manually in Azure. The IdentityExpress Admin UI integrates with an IdentityServer installation for authentication and authorization. AdminUI Deployment AdminUI is deployed a single Azure Web Application. It is envisaged that it will be configured to communicate with your existing (external) identity server. Prerequisites Before beginning the installation, please ensure that you have an IdentityServer4 or Duende IdentityServer installation and either a MySql , PostgreSQL or SqlServer database set up. Walkthrough If you already have a working IdentityServer installation up and running then this walkthrough is for you. This walkthrough will take you through the entire Azure configuration process, resulting in a working environment for IdentityExpress AdminUI which is in communication with your IdentityServer installation. This will also include migrating your user store to the AdminUI Identity Schema. Configure a Database AdminUI currently only supports MySql , PostgreSQL and SqlServer . These can run in any azure or non-azure service. Any used databases must accept remote connections, also ensure that your firewall allows connections on any used ports. Create Azure Website Initially you will want to create an Azure Web App (note this process can also be done with Azure VM's, though you will need to follow the AdminUI IIS Installation guide . AdminUI Configuration Once you have a Website created for AdminUI, you will need to add some variables to the site in order to get it to run. The variables to be aware of are: DbProvider This sets the database type you are using. Supported types and their values are SqlServer , MySql , or PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources & grants) AzureAppServiceLogging (optional) Used for debugging the API - see the enable logging page for more details. AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production. AuditRecordsConnectionString The connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English (en-GB), supported cultures and their values are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Set to true or false , if missing will default to true , if false no audit records will be generated for read actions e.g when a user views resources though AdminUI AuthorityUrl Url of the IdentityServer installation. UiUrl Url of the AdminUI frontend (this Web APP). ApiUrl Url of the API setup in the previous step. AzureAppServiceLogging (optional) Used for debugging the UI - see the enable logging page for more details. In Azure, these variables will need to be added manually to the App Settings header in the Application Settings blade. For a full list of configuration settings, see Configuring AdminUI . Deploying to Azure Web App You will need to FTP the folders supplied to the correct Azure folder. To achieve this you will need an FTP Client such as Filezilla. Once you have an FTP Client setup, you will need to go in to the Deployment Credentials blade of your app underneath the deployment header and setup the FTP credentials. Next go into the Properties blade underneath the Settings Header. From this blade you can grab your FTP HOST NAME. Using your FTP Client, connect to this website, from here navigate to Site -> wwwroot. You will want to place the contents of the relevant folder in this wwwroot folder. Migrations Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI If you extract the zip on your local machine, You can run the following command to migrate your database dotnet IdentityExpress.Manager.UI.dll -migrate all -connectionstring \"Server=tcp:example.database.windows.net;Database=ExampleDatabase;User ID=Username;Password=Password;Trusted_Connection=False;Encrypt=True;\" -dbprovider SqlServer If you want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here Troubleshooting If you're having issues, we recommend you first enable logging . If the logs do not report any issues, the logs are reporting \"Could not find 'aspnetcorev2_inprocess.dll'\" or you see a screen with the following error: \"Http Error 500.32 - ANCM Failed to Load dll\", then the most likely culprit is that you are running AdminUI on a .NET Framework App Service and will need to make 2 modifications to the web.config file. First you will need to remove the hostingmodel=\"inprocess\" property from the <aspNetCore> element and change the AspNetCoreModule from V2 to V1 by modifying the <handlers> section like so: <handlers> <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" /> </handlers> <aspNetCore processPath=\"dotnet\" arguments=\".\\IdentityExpress.Manager.UI.dll\" ... hostingModel=\"inprocess\"> </aspNetCore> to <handlers> <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModule\" resourceType=\"Unspecified\" /> </handlers> <aspNetCore processPath=\"dotnet\" arguments=\".\\IdentityExpress.Manager.UI.dll\" ...> </aspNetCore> If you are still experiencing issues after this please don't hesitate to email us at support@identityserver.com","title":"Azure"},{"location":"Installation/Installation_Azure.html#adminui-deployment","text":"AdminUI is deployed a single Azure Web Application. It is envisaged that it will be configured to communicate with your existing (external) identity server.","title":"AdminUI Deployment"},{"location":"Installation/Installation_Azure.html#prerequisites","text":"Before beginning the installation, please ensure that you have an IdentityServer4 or Duende IdentityServer installation and either a MySql , PostgreSQL or SqlServer database set up.","title":"Prerequisites"},{"location":"Installation/Installation_Azure.html#walkthrough","text":"If you already have a working IdentityServer installation up and running then this walkthrough is for you. This walkthrough will take you through the entire Azure configuration process, resulting in a working environment for IdentityExpress AdminUI which is in communication with your IdentityServer installation. This will also include migrating your user store to the AdminUI Identity Schema.","title":"Walkthrough"},{"location":"Installation/Installation_Azure.html#configure-a-database","text":"AdminUI currently only supports MySql , PostgreSQL and SqlServer . These can run in any azure or non-azure service. Any used databases must accept remote connections, also ensure that your firewall allows connections on any used ports.","title":"Configure a Database"},{"location":"Installation/Installation_Azure.html#create-azure-website","text":"Initially you will want to create an Azure Web App (note this process can also be done with Azure VM's, though you will need to follow the AdminUI IIS Installation guide .","title":"Create Azure Website"},{"location":"Installation/Installation_Azure.html#adminui-configuration","text":"Once you have a Website created for AdminUI, you will need to add some variables to the site in order to get it to run. The variables to be aware of are: DbProvider This sets the database type you are using. Supported types and their values are SqlServer , MySql , or PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources & grants) AzureAppServiceLogging (optional) Used for debugging the API - see the enable logging page for more details. AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production. AuditRecordsConnectionString The connection string for AdminUI audits, if missing will default to the IdentityServerConnectionString AuditRecordsCulture Language used for generation of audit records, if missing or invalid will default to English (en-GB), supported cultures and their values are: de German zh-TW Chinese (Traditional) zh-CN Chinese (Simplified) es Spanish fr French AuditReadActions Set to true or false , if missing will default to true , if false no audit records will be generated for read actions e.g when a user views resources though AdminUI AuthorityUrl Url of the IdentityServer installation. UiUrl Url of the AdminUI frontend (this Web APP). ApiUrl Url of the API setup in the previous step. AzureAppServiceLogging (optional) Used for debugging the UI - see the enable logging page for more details. In Azure, these variables will need to be added manually to the App Settings header in the Application Settings blade. For a full list of configuration settings, see Configuring AdminUI .","title":"AdminUI Configuration"},{"location":"Installation/Installation_Azure.html#deploying-to-azure-web-app","text":"You will need to FTP the folders supplied to the correct Azure folder. To achieve this you will need an FTP Client such as Filezilla. Once you have an FTP Client setup, you will need to go in to the Deployment Credentials blade of your app underneath the deployment header and setup the FTP credentials. Next go into the Properties blade underneath the Settings Header. From this blade you can grab your FTP HOST NAME. Using your FTP Client, connect to this website, from here navigate to Site -> wwwroot. You will want to place the contents of the relevant folder in this wwwroot folder.","title":"Deploying to Azure Web App"},{"location":"Installation/Installation_Azure.html#migrations","text":"Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI If you extract the zip on your local machine, You can run the following command to migrate your database dotnet IdentityExpress.Manager.UI.dll -migrate all -connectionstring \"Server=tcp:example.database.windows.net;Database=ExampleDatabase;User ID=Username;Password=Password;Trusted_Connection=False;Encrypt=True;\" -dbprovider SqlServer If you want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here","title":"Migrations"},{"location":"Installation/Installation_Azure.html#troubleshooting","text":"If you're having issues, we recommend you first enable logging . If the logs do not report any issues, the logs are reporting \"Could not find 'aspnetcorev2_inprocess.dll'\" or you see a screen with the following error: \"Http Error 500.32 - ANCM Failed to Load dll\", then the most likely culprit is that you are running AdminUI on a .NET Framework App Service and will need to make 2 modifications to the web.config file. First you will need to remove the hostingmodel=\"inprocess\" property from the <aspNetCore> element and change the AspNetCoreModule from V2 to V1 by modifying the <handlers> section like so: <handlers> <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" /> </handlers> <aspNetCore processPath=\"dotnet\" arguments=\".\\IdentityExpress.Manager.UI.dll\" ... hostingModel=\"inprocess\"> </aspNetCore> to <handlers> <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModule\" resourceType=\"Unspecified\" /> </handlers> <aspNetCore processPath=\"dotnet\" arguments=\".\\IdentityExpress.Manager.UI.dll\" ...> </aspNetCore> If you are still experiencing issues after this please don't hesitate to email us at support@identityserver.com","title":"Troubleshooting"},{"location":"Installation/Installation_Docker.html","text":"AdminUI can be deployed as a Docker image Installation Prerequisites Before running AdminUI using Docker, Docker must be configured with the following: If running on Windows ensure you are using Linux containers - see Docker instructions on switching containers for more information If using our provided docker-compose.yml file ensure you have Docker Compose installed. To check this, run the docker-compose command Configuration Ports Port configuration in Docker follows the format host:container . e.g Changing the \"Ports\" section of AdminUI in the docker-compose file to 5001:6001 would mean you could contact AdminUI by browsing to http://localhost:6001 NOTE - Changing any of these will mean the configuration in the rest of the docker-compose file will have to change. Environment Variables Environment variables are also available for setting application specifics. If you are using the docker-compose file they are formatted as follows: environment: - UiUrl=http://localhost:5010 - ApiUrl=http://localhost:5011 - AuthorityUrl=http://ids:5013 The minimum configuration required is: DbProvider This sets the database type you are using. Supported types and their values are: SqlServer MySql PostgreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources & grants) AuthorityUrl Url of the IdentityServer installation protecting the UI. Must use HTTPS UiUrl Url of AdminUI. Must use HTTPS RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production LicenseKey The full license key for AdminUI AdminUIClientSecret The client secret for AdminUI. Any random string. AuthorityUrl Url of the IdentityServer installation protecting AdminUI. Must use HTTPS The full list of configuration options are avaliable here IdentityServer & Database Resolution If you are not using the AdminUI Integration IdentityServer included in the docker-compose file ensure that your IdentityServer site is either publicly resolvable via DNS or running locally on the Docker host machine on all network devices (e.g: http://+:5555/). If you are running locally, ensure that the AuthorityUrl setting uses the IP address of the local Docker network device - For Mac and Window this is possible by using host.docker.internal , on Linux localhost will work. For more information regarding networking with Docker on operating systems other than Linux please see here for Windows and here for MacOS. Any used databases must accept remote connections. If this database is on your Docker host machine, you can use the IP address of your Docker network device in the connection string. If you are running IdentityServer and the database locally to the Docker host machine, also ensure that your firewall allows connections on the necessary ports. Getting The Images The docker images used for AdminUI can be found on DockerHub. If you are having trouble getting the images you will need to login in to your Docker Hub account with the following command: docker login First Run If Using the docker-compose file the entrypoint secton of the AdminUI image will run migrations - there is more information on this in the docker-compose section below. Otherwise the container will just start AdminUI without running migrations. If you would like to see and/or modify which migrations are run please see our migrations documentation . Docker Demo Walkthrough To start browse to your hosts files, and add an entry as follows: <host ip address> ids On Windows, your host file is usually found at C:\\Windows\\System32\\Drivers\\etc\\hosts On Linux and MacOS, your host file is usually found at /etc/hosts To find your host ip you can run the following commands: macOS: ifconfig | grep \"inet \" | grep -v 127.0.0.1 Windows: ipconfig Linux: ifconfig If you are not using our AdminUI Integration IdentityServer included in the docker-compose file you do not need to add the IdentityServer (ids) mapping assuming your identityserver is publically resolvable or is running on the host machine. As of 3.1.2 the demo now uses nginx as a reverse proxy and https forwarding service. This works as detailed below: The docker demo is now started via a script file named StartIds.ps1 or StartIds.sh. The powershell script will run on all platforms with PowerShell core installed. If you do not have PowerShell core installed you can run the shell script. This shell script may need execute permissions ( chmod +x startIdS.sh ). The StartIds script creates a temporary container that builds a cert which is then placed in a shared volume. The script then runs the docker-compose up command. The Docker Compose builds and runs the 3 main containers using the 3 Dockerfiles provided. These Dockerfiles take our base images and install the cert created in step 1 of the script file. You will need to install the cert from the /cert folder after running the startIdS script and accept the certificate in browser on each website individually (on MacOS this needs to be done in Safari). Note - When installing the certificate On MacOS you must accept the following options for the certificate to install correctly: Please see the individual files for reference, starting with the StartIds.sh or StartIds.psh On startup the AdminUI image will use a script within the container that will wait for the MySql databse inside the compose-file and once this has fully setup will run migrations. You should now be able to access AdminUI on https://localhost:5010 . Modifying the docker-compose file If you want to modify any of the ports used in the demo please ensure you have edited them in both the nginx.conf and the docker-compose files. If you want to modify the docker-compose file to use a database setup outside of the docker-compose file or a database that isn't MySql you will need to change the configuration of the API. The entrypoint section of AdminUI is currently setup to wait for the DB container in the docker-compose file. To make the AdminUI container wait for your db you can pass in the IP of the database as the first parameter and the port as the second. e.g ui: entrypoint: /app/DbStart.sh host.docker.internal 1433 If you know your database will already be running it is possible to change this section to just run migrations like so: ui: entrypoint: dotnet IdentityExpress.Manager.UI.dll -migrate all && dotnet IdentityExpress.Manager.UI.dll Deploying Docker Images Separately Note - The base image is available at rocksolidknowledge/adminui . Ports used can then be set as -p 5000:5000 and environment variables as -e \"AuthorityUrl=http://ids:5003\" Making Docker Public with a Reverse Proxy To make the Docker containers public, we first need to add a web server to the mix. This web server will act as a reverse proxy, forwarding all calls to our running Docker instances. These web servers do not need to dockerized. IIS Reverse Proxy To setup IIS to act as a reverse proxy, there are two prerequisites that need to be installed within IIS: URL Rewrite Module Application Request Routing Once these are installed we can then go to the site we want to configure and select 'URL Rewrite' found in the IIS section. We then need to use \"Add Rule(s)...\", found in the Actions section. We can then use the Reverse proxy template, found in the Inbound and Outbound Rules section. Now we need to set the Inbound Rule, telling IIS where to forward requests to. By default this would be http://localhost:5000. If your Docker container is running HTTPS, ensure you disable SSL Offloading, ensuring TLS is maintained. We also need to configure an Outbound Rule, to allow IIS to return responses from our Docker container using your site URL instead of the Docker container responding directly. Here the From address needs to be the domain of your Docker container (e.g. http://localhost:5000) and the To address your sites address (e.g. api.docker.com). FAQ Why don't my Docker commands work on Linux? Ensure you have sufficient privileges. What do I do if I experience a port clash? You may experience a scenario where you have a clash between ports in-use on your host machine and the ports specified in the docker-compose.yml file. Port mappings in the docker-compose.yml file are specified in host:container pairs. You can change the host port in any mapping but be careful to change all occurrences of the usage of that host port in other environment variables used in the docker-compose.yml file. Connecting to Databases on Docker Host Machine To connect a container to a local database running on the Docker host machine, ensure you have configured the following: Enable remote connections to the database Enable firewall rule to allow connection using the configured port number Docker now provides host.docker.internal for connecting to the host e.g IdentityConnectionString=Server=host.docker.internal,1433;User Id=docker;Password=Welkom1234!;Database=IdentityExpressDb; Docker vulnerabilities scanning Before publishing docker images we run them through a security scan, checking for known CVE's in dependencies. However, vulnerabilities may be published after we release. In this instance we will do the following: Try update our base image (For both the UI and API this is the microsoft .net core image though this may not be updated to fix the CVE). If we cannot update our base image we will verify the and asses the issue. If Microsoft have not updated the issue and we deem it important we will patch our image. If we don't deem it to be an issue but you need it fixed, there are steps to patch the image yourself. Method 1. Use the docker run --user root <image name> command to gain root access in the container, apply the fix yourself and run docker commit to save the image and retag it with the CVE fixed. Method 2 (recommended). Create a dockerfile using the FROM command and change the user to root using USER root . For example in one of our alpine images there was a vulnerability discovered in apk-tools 2.12.5-r0. An example dockerfile that fixes this issue would look like the following: FROM rocksolidknowledge/adminui:5.2.1-alpine USER root RUN apk add apk-tools=2.12.7-r0 USER identityexpress We change the user back to identityexpress user after the fix as we don't want the default user to have root permissions. Using the usual docker build command you can build and tag the resulting image. For more information on building docker containers please see the docker documentation here .","title":"Docker"},{"location":"Installation/Installation_Docker.html#installation-prerequisites","text":"Before running AdminUI using Docker, Docker must be configured with the following: If running on Windows ensure you are using Linux containers - see Docker instructions on switching containers for more information If using our provided docker-compose.yml file ensure you have Docker Compose installed. To check this, run the docker-compose command","title":"Installation Prerequisites"},{"location":"Installation/Installation_Docker.html#configuration","text":"","title":"Configuration"},{"location":"Installation/Installation_Docker.html#ports","text":"Port configuration in Docker follows the format host:container . e.g Changing the \"Ports\" section of AdminUI in the docker-compose file to 5001:6001 would mean you could contact AdminUI by browsing to http://localhost:6001 NOTE - Changing any of these will mean the configuration in the rest of the docker-compose file will have to change.","title":"Ports"},{"location":"Installation/Installation_Docker.html#environment-variables","text":"Environment variables are also available for setting application specifics. If you are using the docker-compose file they are formatted as follows: environment: - UiUrl=http://localhost:5010 - ApiUrl=http://localhost:5011 - AuthorityUrl=http://ids:5013 The minimum configuration required is: DbProvider This sets the database type you are using. Supported types and their values are: SqlServer MySql PostgreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources & grants) AuthorityUrl Url of the IdentityServer installation protecting the UI. Must use HTTPS UiUrl Url of AdminUI. Must use HTTPS RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production LicenseKey The full license key for AdminUI AdminUIClientSecret The client secret for AdminUI. Any random string. AuthorityUrl Url of the IdentityServer installation protecting AdminUI. Must use HTTPS The full list of configuration options are avaliable here","title":"Environment Variables"},{"location":"Installation/Installation_Docker.html#identityserver-database-resolution","text":"If you are not using the AdminUI Integration IdentityServer included in the docker-compose file ensure that your IdentityServer site is either publicly resolvable via DNS or running locally on the Docker host machine on all network devices (e.g: http://+:5555/). If you are running locally, ensure that the AuthorityUrl setting uses the IP address of the local Docker network device - For Mac and Window this is possible by using host.docker.internal , on Linux localhost will work. For more information regarding networking with Docker on operating systems other than Linux please see here for Windows and here for MacOS. Any used databases must accept remote connections. If this database is on your Docker host machine, you can use the IP address of your Docker network device in the connection string. If you are running IdentityServer and the database locally to the Docker host machine, also ensure that your firewall allows connections on the necessary ports.","title":"IdentityServer &amp; Database Resolution"},{"location":"Installation/Installation_Docker.html#getting-the-images","text":"The docker images used for AdminUI can be found on DockerHub. If you are having trouble getting the images you will need to login in to your Docker Hub account with the following command: docker login","title":"Getting The Images"},{"location":"Installation/Installation_Docker.html#first-run","text":"If Using the docker-compose file the entrypoint secton of the AdminUI image will run migrations - there is more information on this in the docker-compose section below. Otherwise the container will just start AdminUI without running migrations. If you would like to see and/or modify which migrations are run please see our migrations documentation .","title":"First Run"},{"location":"Installation/Installation_Docker.html#docker-demo-walkthrough","text":"To start browse to your hosts files, and add an entry as follows: <host ip address> ids On Windows, your host file is usually found at C:\\Windows\\System32\\Drivers\\etc\\hosts On Linux and MacOS, your host file is usually found at /etc/hosts To find your host ip you can run the following commands: macOS: ifconfig | grep \"inet \" | grep -v 127.0.0.1 Windows: ipconfig Linux: ifconfig If you are not using our AdminUI Integration IdentityServer included in the docker-compose file you do not need to add the IdentityServer (ids) mapping assuming your identityserver is publically resolvable or is running on the host machine. As of 3.1.2 the demo now uses nginx as a reverse proxy and https forwarding service. This works as detailed below: The docker demo is now started via a script file named StartIds.ps1 or StartIds.sh. The powershell script will run on all platforms with PowerShell core installed. If you do not have PowerShell core installed you can run the shell script. This shell script may need execute permissions ( chmod +x startIdS.sh ). The StartIds script creates a temporary container that builds a cert which is then placed in a shared volume. The script then runs the docker-compose up command. The Docker Compose builds and runs the 3 main containers using the 3 Dockerfiles provided. These Dockerfiles take our base images and install the cert created in step 1 of the script file. You will need to install the cert from the /cert folder after running the startIdS script and accept the certificate in browser on each website individually (on MacOS this needs to be done in Safari). Note - When installing the certificate On MacOS you must accept the following options for the certificate to install correctly: Please see the individual files for reference, starting with the StartIds.sh or StartIds.psh On startup the AdminUI image will use a script within the container that will wait for the MySql databse inside the compose-file and once this has fully setup will run migrations. You should now be able to access AdminUI on https://localhost:5010 .","title":"Docker Demo Walkthrough"},{"location":"Installation/Installation_Docker.html#modifying-the-docker-compose-file","text":"If you want to modify any of the ports used in the demo please ensure you have edited them in both the nginx.conf and the docker-compose files. If you want to modify the docker-compose file to use a database setup outside of the docker-compose file or a database that isn't MySql you will need to change the configuration of the API. The entrypoint section of AdminUI is currently setup to wait for the DB container in the docker-compose file. To make the AdminUI container wait for your db you can pass in the IP of the database as the first parameter and the port as the second. e.g ui: entrypoint: /app/DbStart.sh host.docker.internal 1433 If you know your database will already be running it is possible to change this section to just run migrations like so: ui: entrypoint: dotnet IdentityExpress.Manager.UI.dll -migrate all && dotnet IdentityExpress.Manager.UI.dll","title":"Modifying the docker-compose file"},{"location":"Installation/Installation_Docker.html#deploying-docker-images-separately","text":"Note - The base image is available at rocksolidknowledge/adminui . Ports used can then be set as -p 5000:5000 and environment variables as -e \"AuthorityUrl=http://ids:5003\"","title":"Deploying Docker Images Separately"},{"location":"Installation/Installation_Docker.html#making-docker-public-with-a-reverse-proxy","text":"To make the Docker containers public, we first need to add a web server to the mix. This web server will act as a reverse proxy, forwarding all calls to our running Docker instances. These web servers do not need to dockerized.","title":"Making Docker Public with a Reverse Proxy"},{"location":"Installation/Installation_Docker.html#iis-reverse-proxy","text":"To setup IIS to act as a reverse proxy, there are two prerequisites that need to be installed within IIS: URL Rewrite Module Application Request Routing Once these are installed we can then go to the site we want to configure and select 'URL Rewrite' found in the IIS section. We then need to use \"Add Rule(s)...\", found in the Actions section. We can then use the Reverse proxy template, found in the Inbound and Outbound Rules section. Now we need to set the Inbound Rule, telling IIS where to forward requests to. By default this would be http://localhost:5000. If your Docker container is running HTTPS, ensure you disable SSL Offloading, ensuring TLS is maintained. We also need to configure an Outbound Rule, to allow IIS to return responses from our Docker container using your site URL instead of the Docker container responding directly. Here the From address needs to be the domain of your Docker container (e.g. http://localhost:5000) and the To address your sites address (e.g. api.docker.com).","title":"IIS Reverse Proxy"},{"location":"Installation/Installation_Docker.html#faq","text":"","title":"FAQ"},{"location":"Installation/Installation_Docker.html#why-dont-my-docker-commands-work-on-linux","text":"Ensure you have sufficient privileges.","title":"Why don't my Docker commands work on Linux?"},{"location":"Installation/Installation_Docker.html#what-do-i-do-if-i-experience-a-port-clash","text":"You may experience a scenario where you have a clash between ports in-use on your host machine and the ports specified in the docker-compose.yml file. Port mappings in the docker-compose.yml file are specified in host:container pairs. You can change the host port in any mapping but be careful to change all occurrences of the usage of that host port in other environment variables used in the docker-compose.yml file.","title":"What do I do if I experience a port clash?"},{"location":"Installation/Installation_Docker.html#connecting-to-databases-on-docker-host-machine","text":"To connect a container to a local database running on the Docker host machine, ensure you have configured the following: Enable remote connections to the database Enable firewall rule to allow connection using the configured port number Docker now provides host.docker.internal for connecting to the host e.g IdentityConnectionString=Server=host.docker.internal,1433;User Id=docker;Password=Welkom1234!;Database=IdentityExpressDb;","title":"Connecting to Databases on Docker Host Machine"},{"location":"Installation/Installation_Docker.html#docker-vulnerabilities-scanning","text":"Before publishing docker images we run them through a security scan, checking for known CVE's in dependencies. However, vulnerabilities may be published after we release. In this instance we will do the following: Try update our base image (For both the UI and API this is the microsoft .net core image though this may not be updated to fix the CVE). If we cannot update our base image we will verify the and asses the issue. If Microsoft have not updated the issue and we deem it important we will patch our image. If we don't deem it to be an issue but you need it fixed, there are steps to patch the image yourself.","title":"Docker vulnerabilities scanning"},{"location":"Installation/Installation_Docker.html#method-1","text":"Use the docker run --user root <image name> command to gain root access in the container, apply the fix yourself and run docker commit to save the image and retag it with the CVE fixed.","title":"Method 1."},{"location":"Installation/Installation_Docker.html#method-2-recommended","text":"Create a dockerfile using the FROM command and change the user to root using USER root . For example in one of our alpine images there was a vulnerability discovered in apk-tools 2.12.5-r0. An example dockerfile that fixes this issue would look like the following: FROM rocksolidknowledge/adminui:5.2.1-alpine USER root RUN apk add apk-tools=2.12.7-r0 USER identityexpress We change the user back to identityexpress user after the fix as we don't want the default user to have root permissions. Using the usual docker build command you can build and tag the resulting image. For more information on building docker containers please see the docker documentation here .","title":"Method 2 (recommended)."},{"location":"Installation/Installation_IIS.html","text":"This walkthrough will run through setting up AdminUI manually in IIS. The IdentityExpress AdminUI site integrates with an IdentityServer installation for authentication and authorization AdminUI Deployment AdminUI is deployed as an IIS Application that communicates with your IdentityServer application Prerequisites Before beginning the installation, please ensure that you have IIS, the latest .NET Core Windows Server Hosting bundle and .NET Framework 4.7.2 installed. You will also need an IdentityServer4 Installation and either a MySql or SqlServer Database set up. There is a sample IdentityServer available here that is already integrated with our IdentityExpress.Identity schema. Walkthrough If you already have a working IdentityServer installation up and running then this walkthrough is for you. This walkthrough will take you through the entire IIS configuration process, resulting in a working environment for IdentityExpress AdminUI, with the UI and backend API running on the same machine and targeting an existing IdentityServer. This will also include migrating your user store to the AdminUI Identity Schema. Configure a Database AdminUI currently only supports MySql, PostgreSQL and SqlServer. This also includes SqlExpress. Any used databases must accept remote connections, also ensure that your firewall allows connections on any used ports. Create IIS Websites Initially you will want to create an IIS Website pointing at the folder we have provided in the emails. Once created you need to configure the application for run no managed code. You can do this by going to Application Pools -> [Website Name] -> Basic Settings -> Change .NET CLR Version to No Managed Code. Website Configuration This section will show you how to configure AdminUI. Please note that in IIS environments variables are nested with : . AdminUI Configuration Once you have a Website Setup, you will need to add some variables to the site in order to get it to run. The variables to be aware of are: DbProvider This sets the database type you are using. Supported types and their values are SqlServer , MySql , or PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources & grants). AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production IdentityDatabaseToMigrateConnectionString (optional) The connection string of your existing ASP.NET Core Identity Entity Framework database that will be migrated to the database used in IdentityConnectionString (this must not be equal to IdentityConnectionString ). For a full list of configuration settings, see Configuring AdminUI . Migrations Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI, if you want AdminUI to handle all migrations you can navigate to the folder where your AdminUI site is and run the following command. dotnet IdentityExpress.Manager.UI.dll -migrate all It will generate the databases for you using the connection strings configured in your AdminUI appsettings.json. If you are planning on managing some of the database migrations yourself, or want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here Troubleshooting If you're having issues, we recommend you first enable logging for the API site .","title":"IIS"},{"location":"Installation/Installation_IIS.html#adminui-deployment","text":"AdminUI is deployed as an IIS Application that communicates with your IdentityServer application","title":"AdminUI Deployment"},{"location":"Installation/Installation_IIS.html#prerequisites","text":"Before beginning the installation, please ensure that you have IIS, the latest .NET Core Windows Server Hosting bundle and .NET Framework 4.7.2 installed. You will also need an IdentityServer4 Installation and either a MySql or SqlServer Database set up. There is a sample IdentityServer available here that is already integrated with our IdentityExpress.Identity schema.","title":"Prerequisites"},{"location":"Installation/Installation_IIS.html#walkthrough","text":"If you already have a working IdentityServer installation up and running then this walkthrough is for you. This walkthrough will take you through the entire IIS configuration process, resulting in a working environment for IdentityExpress AdminUI, with the UI and backend API running on the same machine and targeting an existing IdentityServer. This will also include migrating your user store to the AdminUI Identity Schema.","title":"Walkthrough"},{"location":"Installation/Installation_IIS.html#configure-a-database","text":"AdminUI currently only supports MySql, PostgreSQL and SqlServer. This also includes SqlExpress. Any used databases must accept remote connections, also ensure that your firewall allows connections on any used ports.","title":"Configure a Database"},{"location":"Installation/Installation_IIS.html#create-iis-websites","text":"Initially you will want to create an IIS Website pointing at the folder we have provided in the emails. Once created you need to configure the application for run no managed code. You can do this by going to Application Pools -> [Website Name] -> Basic Settings -> Change .NET CLR Version to No Managed Code.","title":"Create IIS Websites"},{"location":"Installation/Installation_IIS.html#website-configuration","text":"This section will show you how to configure AdminUI. Please note that in IIS environments variables are nested with : .","title":"Website Configuration"},{"location":"Installation/Installation_IIS.html#adminui-configuration","text":"Once you have a Website Setup, you will need to add some variables to the site in order to get it to run. The variables to be aware of are: DbProvider This sets the database type you are using. Supported types and their values are SqlServer , MySql , or PostreSql IdentityConnectionString The connection string for your Identity database (users) IdentityServerConnectionString The connection string for your IdentityServer database (clients, resources & grants). AuthorityUrl Url of the IdentityServer installation UiUrl Url of the AdminUI frontend (the idxui container) RequireHttpsMetadata Set to true or false if you want to ensure IdentityServer discovery endpoint uses TLS. Must be true for production IdentityDatabaseToMigrateConnectionString (optional) The connection string of your existing ASP.NET Core Identity Entity Framework database that will be migrated to the database used in IdentityConnectionString (this must not be equal to IdentityConnectionString ). For a full list of configuration settings, see Configuring AdminUI .","title":"AdminUI Configuration"},{"location":"Installation/Installation_IIS.html#migrations","text":"Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI, if you want AdminUI to handle all migrations you can navigate to the folder where your AdminUI site is and run the following command. dotnet IdentityExpress.Manager.UI.dll -migrate all It will generate the databases for you using the connection strings configured in your AdminUI appsettings.json. If you are planning on managing some of the database migrations yourself, or want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here","title":"Migrations"},{"location":"Installation/Installation_IIS.html#troubleshooting","text":"If you're having issues, we recommend you first enable logging for the API site .","title":"Troubleshooting"},{"location":"Installation/Installation_NuGet.html","text":"This walkthrough will run you through the basics of using AdminUI as a NuGet package. Prerequisites Before getting started you will need a AdminUI License Key which you can get from our products page . You will also need an IdentityServer installation and either a MySql, SqlServer or PostgreSql database set up. There is a sample IdentityServer available on our GitHub . If you are going to be using the IdentityExpress.Identity schema, make sure your IdentityServer is already set up to do so. A guide on how to do this can be found here . The above step is not necessary if you are going to be using a custom identity schema. Basic Installation Samples A sample of the below steps can be found in our sample repo on GitHub From Scratch When starting from scratch we recommend you create a project from the ASP.NET Core Empty template. This can be done through the Visual Studio GUI: Or from the .NET CLI using dotnet new web with your parameters of your choice. More info can be found in the Microsoft Documentation Get the AdminUI NuGet package You can install the Rsk.AdminUI NuGet package using the .NET CLI ( dotnet add package Rsk.AdminUI ), Powershell ( Install-Package Rsk.AdminUI ), or your GUI of choice. On first build the package will copy over the relevant static files into your wwwroot folder in a new admin folder e.g: wwwwroot/admin . On run it will serve from this folder on the base path of the project (e.g http://localhost:5000/). Configuration AdminUI specific config Please read our configuration page for more info You can find sample configuration in our sample repo UI Url - The URL AdminUI is run on -AuthorityURL - The URL of your IdentityServer. IdentityConnectionString - The database connection string of your Identity database IdentityServerConnectionString - The database connection string of your IdentityServer database AdminUIClientSecret - A random secret value Configure a Database & Migrations AdminUI currently only supports MySql, PostgreSQL, SqlServer, and SqlExpress. Any database must accept remote connections. Ensure that your firewall allows connections on any used ports. Migrations will run on app start by default. To configure which migrations run or to turn off migrations completely you can use the options in AddAdminUI. e.g: builder.Services.AddAdminUI(options => { options.MigrationOptions = MigrationOptions.None; }); Using the package Register AdminUI in your service collection, then add it to your application's pipeline. using IdentityExpress.Manager.UI.Extensions; var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddAdminUI(); var app = builder.Build(); app.UseHttpsRedirection(); app.UseAdminUI(); app.Run(); Using NuGet Package with Custom Identity Store The AdminUI NuGet package can be used as the foundations of a custom identity store . This will allow you to extend AdminUI's functionality around Users, Roles, and Claim Types.","title":"NuGet"},{"location":"Installation/Installation_NuGet.html#prerequisites","text":"Before getting started you will need a AdminUI License Key which you can get from our products page . You will also need an IdentityServer installation and either a MySql, SqlServer or PostgreSql database set up. There is a sample IdentityServer available on our GitHub . If you are going to be using the IdentityExpress.Identity schema, make sure your IdentityServer is already set up to do so. A guide on how to do this can be found here . The above step is not necessary if you are going to be using a custom identity schema.","title":"Prerequisites"},{"location":"Installation/Installation_NuGet.html#basic-installation","text":"","title":"Basic Installation"},{"location":"Installation/Installation_NuGet.html#samples","text":"A sample of the below steps can be found in our sample repo on GitHub","title":"Samples"},{"location":"Installation/Installation_NuGet.html#from-scratch","text":"When starting from scratch we recommend you create a project from the ASP.NET Core Empty template. This can be done through the Visual Studio GUI: Or from the .NET CLI using dotnet new web with your parameters of your choice. More info can be found in the Microsoft Documentation","title":"From Scratch"},{"location":"Installation/Installation_NuGet.html#get-the-adminui-nuget-package","text":"You can install the Rsk.AdminUI NuGet package using the .NET CLI ( dotnet add package Rsk.AdminUI ), Powershell ( Install-Package Rsk.AdminUI ), or your GUI of choice. On first build the package will copy over the relevant static files into your wwwroot folder in a new admin folder e.g: wwwwroot/admin . On run it will serve from this folder on the base path of the project (e.g http://localhost:5000/).","title":"Get the AdminUI NuGet package"},{"location":"Installation/Installation_NuGet.html#configuration","text":"","title":"Configuration"},{"location":"Installation/Installation_NuGet.html#adminui-specific-config","text":"Please read our configuration page for more info You can find sample configuration in our sample repo UI Url - The URL AdminUI is run on -AuthorityURL - The URL of your IdentityServer. IdentityConnectionString - The database connection string of your Identity database IdentityServerConnectionString - The database connection string of your IdentityServer database AdminUIClientSecret - A random secret value","title":"AdminUI specific config"},{"location":"Installation/Installation_NuGet.html#configure-a-database-migrations","text":"AdminUI currently only supports MySql, PostgreSQL, SqlServer, and SqlExpress. Any database must accept remote connections. Ensure that your firewall allows connections on any used ports. Migrations will run on app start by default. To configure which migrations run or to turn off migrations completely you can use the options in AddAdminUI. e.g: builder.Services.AddAdminUI(options => { options.MigrationOptions = MigrationOptions.None; });","title":"Configure a Database &amp; Migrations"},{"location":"Installation/Installation_NuGet.html#using-the-package","text":"Register AdminUI in your service collection, then add it to your application's pipeline. using IdentityExpress.Manager.UI.Extensions; var builder = WebApplication.CreateBuilder(args); // Add services to the container. builder.Services.AddAdminUI(); var app = builder.Build(); app.UseHttpsRedirection(); app.UseAdminUI(); app.Run();","title":"Using the package"},{"location":"Installation/Installation_NuGet.html#using-nuget-package-with-custom-identity-store","text":"The AdminUI NuGet package can be used as the foundations of a custom identity store . This will allow you to extend AdminUI's functionality around Users, Roles, and Claim Types.","title":"Using NuGet Package with Custom Identity Store"},{"location":"Installation/Installer_Walkthrough.html","text":"This walkthrough will run through setting up AdminUI using the AdminUI installer. Prerequisites Before beginning the installation, please ensure that you have IIS, the .NET Core Windows Server Hosting bundle and .NET Framework 4.7.2 installed. Installation Types There are two options for installation. For typical users, Install AdminUI and demo IdentityServer we will handle some of the configuration for you and automatically run migrations and install IdentityServer example alongside AdminUI. For advanced users, Install AdminUI will allow you to configure the migrations and not install IdentityServer . For first time, or demo, users we recommend using Install AdminUI and demo IdentityServer . This screen displays the End User License Agrement (EULA). If you agree with the EULA please tick the check box to continue. All files will be installed to displayed location. We have prefilled this with a default install location for you. If you want to change the locationn select the Change button. IIS will need permissions to access the files in this location. Enter your AdminUI license key here, if you dont have a license key, you can request a demo from here Required Configuration Whether or not you are installing the example IdentityServer, you will need to set the following configuration for AdminUI Database provider: The database provider that you are using, avaliable options are SqlServer, MySql and PostgreSql IdentityServer connection string: The connection string to the database containing your IdentityServer configuration, if this database doesnt exist it will be created during the migration step later in the installer. Identity Connection string (Optional): An optional connection string for your Identity (users) database. Will default to your IdentityServer connection string. IIS Configuration You will then need to setup the following settings for the AdminUI IIS sites. IdentityServer Authority Url: The URL that your existing IdentityServer is running on, or the URL you want the demo IdentityServer example to run on. Website Url: The URL for the AdminUI UI site, will be added as a binding for the site in IIS Website Name: The IIS website name for AdminUI UI site. Audit Configuration Audit configuration. Audit read actions: Whether or not to audit read actions within AdminUI, for example when a user views a client through AdminUI. Defaults to false for typical installation. Audit culture: The language that the audit messages are generated in. Defaults to English (en-GB) for typical installation. Seperate audit connection string: An optional seperate connection string for storing audit messages. Defaults to your IdentityServer connection string on a typical installation. Logging Configuration for logging within AdminUI Enable Logging: Set whether or not to enable logging within AdminUI, enabled by default. Log Output Directory: The location to log to, IIS will need permission to read and write files at this location. Click next to continue installation Migrations Once installation is complete, you will need to migrate your databases. If you elected to install the demo IdentityServer we will automatically run migations using the connection string you supplied previously. We will attempt to run migrations, any errors that occur will appear once you select the failing migration. Before the IdentityServer migration, AdminUI will check the schema of your database and compare it to the expected schema. If your database doesn't contain any tables relating to IdentityServer, then the migration will run and add them accordingly. However if your database already has the required tables, AdminUI will skip the IdentityServer migration. Finally, if your database contains some but not all of the tables and columns required for the IdentityServer integration, the migration will not run, however you will be notified of the missing tables and columns. If you chose to install only AdminUI you have the opportunity to select which migrations you want to run. The credentials you use in the connection string will need to have the appropriate permissions to create and update databases. Optionally you can also skip migrations at this point and handle migrations yourself, more info on our migrations is avaliable here If you run migrations you may now need to restart your AdminUI site to reconnect to the created databases, and complete the setup of AdminUI. Installation Complete Your AdminUI installation should now be complete, you can click one of the links to the left to navigate to the created sites. AdminUI will automatically launch once you press the Exit button. If you have encounted any issues during installation, dont hesitate to contact us at support@identityserver.com","title":"Installer"},{"location":"Installation/Installer_Walkthrough.html#prerequisites","text":"Before beginning the installation, please ensure that you have IIS, the .NET Core Windows Server Hosting bundle and .NET Framework 4.7.2 installed.","title":"Prerequisites"},{"location":"Installation/Installer_Walkthrough.html#installation-types","text":"There are two options for installation. For typical users, Install AdminUI and demo IdentityServer we will handle some of the configuration for you and automatically run migrations and install IdentityServer example alongside AdminUI. For advanced users, Install AdminUI will allow you to configure the migrations and not install IdentityServer . For first time, or demo, users we recommend using Install AdminUI and demo IdentityServer . This screen displays the End User License Agrement (EULA). If you agree with the EULA please tick the check box to continue. All files will be installed to displayed location. We have prefilled this with a default install location for you. If you want to change the locationn select the Change button. IIS will need permissions to access the files in this location. Enter your AdminUI license key here, if you dont have a license key, you can request a demo from here","title":"Installation Types"},{"location":"Installation/Installer_Walkthrough.html#required-configuration","text":"Whether or not you are installing the example IdentityServer, you will need to set the following configuration for AdminUI Database provider: The database provider that you are using, avaliable options are SqlServer, MySql and PostgreSql IdentityServer connection string: The connection string to the database containing your IdentityServer configuration, if this database doesnt exist it will be created during the migration step later in the installer. Identity Connection string (Optional): An optional connection string for your Identity (users) database. Will default to your IdentityServer connection string.","title":"Required Configuration"},{"location":"Installation/Installer_Walkthrough.html#iis-configuration","text":"You will then need to setup the following settings for the AdminUI IIS sites. IdentityServer Authority Url: The URL that your existing IdentityServer is running on, or the URL you want the demo IdentityServer example to run on. Website Url: The URL for the AdminUI UI site, will be added as a binding for the site in IIS Website Name: The IIS website name for AdminUI UI site.","title":"IIS Configuration"},{"location":"Installation/Installer_Walkthrough.html#audit-configuration","text":"Audit configuration. Audit read actions: Whether or not to audit read actions within AdminUI, for example when a user views a client through AdminUI. Defaults to false for typical installation. Audit culture: The language that the audit messages are generated in. Defaults to English (en-GB) for typical installation. Seperate audit connection string: An optional seperate connection string for storing audit messages. Defaults to your IdentityServer connection string on a typical installation.","title":"Audit Configuration"},{"location":"Installation/Installer_Walkthrough.html#logging","text":"Configuration for logging within AdminUI Enable Logging: Set whether or not to enable logging within AdminUI, enabled by default. Log Output Directory: The location to log to, IIS will need permission to read and write files at this location. Click next to continue installation","title":"Logging"},{"location":"Installation/Installer_Walkthrough.html#migrations","text":"Once installation is complete, you will need to migrate your databases. If you elected to install the demo IdentityServer we will automatically run migations using the connection string you supplied previously. We will attempt to run migrations, any errors that occur will appear once you select the failing migration. Before the IdentityServer migration, AdminUI will check the schema of your database and compare it to the expected schema. If your database doesn't contain any tables relating to IdentityServer, then the migration will run and add them accordingly. However if your database already has the required tables, AdminUI will skip the IdentityServer migration. Finally, if your database contains some but not all of the tables and columns required for the IdentityServer integration, the migration will not run, however you will be notified of the missing tables and columns. If you chose to install only AdminUI you have the opportunity to select which migrations you want to run. The credentials you use in the connection string will need to have the appropriate permissions to create and update databases. Optionally you can also skip migrations at this point and handle migrations yourself, more info on our migrations is avaliable here If you run migrations you may now need to restart your AdminUI site to reconnect to the created databases, and complete the setup of AdminUI.","title":"Migrations"},{"location":"Installation/Installer_Walkthrough.html#installation-complete","text":"Your AdminUI installation should now be complete, you can click one of the links to the left to navigate to the created sites. AdminUI will automatically launch once you press the Exit button. If you have encounted any issues during installation, dont hesitate to contact us at support@identityserver.com","title":"Installation Complete"},{"location":"Migrations/Migrations_Help.html","text":"Migrating IdentityServer and ASP.NET Identity Core to AdminUI If you have an existing IdentityServer or ASP.NET Identity Core setup then you will need to run script based migrations on their respective databases before being able to apply the AdminUI migrations. The migration scripts provided with each AdminUI work for versions 2.5.4, 3.1.2 and 4.1.2 of IdentityServer4 and versions 2.1, 2.2, 3.1, 5.0 and and 6.0 of ASP.NET Identity Core, before running them you must migrate your databases to the latest version of these libraries. The scripts are only available for SqlServer and would need to be modified to run for PostgreSql or MySql. Before running the migrations scripts you will need to backup your databases as there is no rollback script available from this point. To migrate your ASP.NET Identity Core schema to then be able to run further migrations you can use the script found here: Migration script . This requires you to have all AspNetUserClaims records to have a ClaimType value and will add columns and tables to your database. Once the script has finished running you can apply the Identity migration from the AdminUI Migrations section. To migrate your IdentityServer schema to then be able to run further migrations you can use the script found here: Migration script . Once the script has finished running you can apply the Configuration, ExtendedConfiguration and Operational migrations from the AdminUI Migrations section. AdminUI Migrations AdminUI comes with a tool to run all the necessary migrations. Alongside its own migrations, AdminUI can optionally run and maintain your IdentityServer4 and or Identity migrations, or you can handle them yourself. If you own SAML2P or WS-Fed, and wish to use its respective features within AdminUI, you will need to run their migrations. By navigating to your AdminUI install directory and locating the IdentityExpress.Manager.UI.dll you can you run the dll using dotnet IdentityExpress.Manager.UI.dll -migrate <migration-to-run> AdminUI has a number of different migrations that need to be run, you can run one individually or choose to run them all at once. The different migrations options are: Migration Type Description All Runs all the migrations (Recommended for Demo users) Configuration IdentityServer4 Configuration Migration ExtendedConfiguration AdminUI IdentityServer4 extension Operational IdentityServer4 Operational migration Identity ASP Identity Migration Audit RSK AdminUI Audit Migration Saml SAML2P Component migration WsFed Ws-Federation Component migration DataProtection DataProtection Key Migration (used if protecting cookies with a Database) A help function may be accessed by adding -help Supported DbProviders SqlServer MySql PostgreSql You may also specify a connection string and which database provider you are you using with -connectionstring and -dbprovider. The connection string must be valid and surrounded by quotes. If no connectionstring and dbprovider are given, the migration tool will look in AdminUI's appsettings.json for the values. Schema Checker AdminUI also comes with a tool that you can use to compare the expected IdentityServer database schema with your own IdentityServer schema. By navigating to your AdminUI install directory and locating the IdentityExpress.Manager.UI.dll you can you run the dll using dotnet IdentityExpress.Manager.UI.dll -schema <schema-to-check> The different schema options are: Migration Type Description Configuration IdentityServer4 Configuration Migration Operational IdentityServer4 Operational migration Identity ASP Identity Migration Audit RSK AdminUI Audit Migration DataProtection DataProtection Key Migration (used if protecting cookies with a Database) A help function may be accessed by adding -help Supported DbProviders SqlServer MySql PostgreSql After performing the schema check on the specified schema, a JSON encoded response object will be returned in the console. The object contains the following values: 'IsValid', 'Exists', 'ErrorMessages', 'SchemaType'. If the response object's 'Exists' value is true, then the schema checker has identified that there are tables present in your database that relate to the schema it is checking. The response object's 'IsValid' relates to if your database contains all the necessary tables and columns required for the schema you are checking. 'IsValid' is true when all tables and columns exist for a schema, and also when no tables and columns exist for a schema. The 'ErrorMessages' section of the response object will contain information relating to any missing tables or columns in your database when compared to the schema you are checking. You may also specify a connection string and which database provider you are you using with -connectionstring and -dbprovider. The connection string must be valid and surrounded by quotes. If no connectionstring and dbprovider are given, the migration tool will look in AdminUI's appsettings.json for the values. Docker Migrations If the container is not running and you would like to run migrations use the following command docker run -e \"DbProvider=<YourProvider>\" -e \"IdentityConnectionString=<YourConnectionString>\" -e IdentityServerConnectionString=\"<YourConnectionString>\" --entrypoint dotnet rocksolidknowledge/adminui IdentityExpress.Manager.UI.dll -migrate all Note - The full list of configuration options is avaliable here If the container is already running the steps to run migrations are as follows: Find the container ID by running the \u201cdocker container ps\u201d command Once found, you can exec the command as follows: docker exec <container-id> dotnet IdentityExpress.Manager.UI.dll -migrate all Note - This will use the environment variables already passed into the container. You will see the output of the migrations in your command line window. TargetIdentityServer4 Make sure to back up your database before running any migrations against it as there is no way to easily revert changes once they have been applied. The value of the TargetIdentityServer4 flag in AdminUI's configuration will determine what kind of database the AdminUI migrations will create/update. If set to true , the AdminUI migration tool will perform IdentityServer4 migrations. If set to false , the AdminUI migration tool will perform Duende IdentityServer migrations. If you have performed the AdminUI migrations while targeting IdentityServer4 but wish to upgrade your database to target IdentityServer Duende, you can update the TargetIdentityServer4 flag to false and run the migrations again. The AdminUI migration tool will then update your database to be in line with the latest Duende IdentityServer schema.","title":"Migrations"},{"location":"Migrations/Migrations_Help.html#migrating-identityserver-and-aspnet-identity-core-to-adminui","text":"If you have an existing IdentityServer or ASP.NET Identity Core setup then you will need to run script based migrations on their respective databases before being able to apply the AdminUI migrations. The migration scripts provided with each AdminUI work for versions 2.5.4, 3.1.2 and 4.1.2 of IdentityServer4 and versions 2.1, 2.2, 3.1, 5.0 and and 6.0 of ASP.NET Identity Core, before running them you must migrate your databases to the latest version of these libraries. The scripts are only available for SqlServer and would need to be modified to run for PostgreSql or MySql. Before running the migrations scripts you will need to backup your databases as there is no rollback script available from this point. To migrate your ASP.NET Identity Core schema to then be able to run further migrations you can use the script found here: Migration script . This requires you to have all AspNetUserClaims records to have a ClaimType value and will add columns and tables to your database. Once the script has finished running you can apply the Identity migration from the AdminUI Migrations section. To migrate your IdentityServer schema to then be able to run further migrations you can use the script found here: Migration script . Once the script has finished running you can apply the Configuration, ExtendedConfiguration and Operational migrations from the AdminUI Migrations section.","title":"Migrating IdentityServer and ASP.NET Identity Core to AdminUI"},{"location":"Migrations/Migrations_Help.html#adminui-migrations","text":"AdminUI comes with a tool to run all the necessary migrations. Alongside its own migrations, AdminUI can optionally run and maintain your IdentityServer4 and or Identity migrations, or you can handle them yourself. If you own SAML2P or WS-Fed, and wish to use its respective features within AdminUI, you will need to run their migrations. By navigating to your AdminUI install directory and locating the IdentityExpress.Manager.UI.dll you can you run the dll using dotnet IdentityExpress.Manager.UI.dll -migrate <migration-to-run> AdminUI has a number of different migrations that need to be run, you can run one individually or choose to run them all at once. The different migrations options are: Migration Type Description All Runs all the migrations (Recommended for Demo users) Configuration IdentityServer4 Configuration Migration ExtendedConfiguration AdminUI IdentityServer4 extension Operational IdentityServer4 Operational migration Identity ASP Identity Migration Audit RSK AdminUI Audit Migration Saml SAML2P Component migration WsFed Ws-Federation Component migration DataProtection DataProtection Key Migration (used if protecting cookies with a Database) A help function may be accessed by adding -help Supported DbProviders SqlServer MySql PostgreSql You may also specify a connection string and which database provider you are you using with -connectionstring and -dbprovider. The connection string must be valid and surrounded by quotes. If no connectionstring and dbprovider are given, the migration tool will look in AdminUI's appsettings.json for the values.","title":"AdminUI Migrations"},{"location":"Migrations/Migrations_Help.html#schema-checker","text":"AdminUI also comes with a tool that you can use to compare the expected IdentityServer database schema with your own IdentityServer schema. By navigating to your AdminUI install directory and locating the IdentityExpress.Manager.UI.dll you can you run the dll using dotnet IdentityExpress.Manager.UI.dll -schema <schema-to-check> The different schema options are: Migration Type Description Configuration IdentityServer4 Configuration Migration Operational IdentityServer4 Operational migration Identity ASP Identity Migration Audit RSK AdminUI Audit Migration DataProtection DataProtection Key Migration (used if protecting cookies with a Database) A help function may be accessed by adding -help Supported DbProviders SqlServer MySql PostgreSql After performing the schema check on the specified schema, a JSON encoded response object will be returned in the console. The object contains the following values: 'IsValid', 'Exists', 'ErrorMessages', 'SchemaType'. If the response object's 'Exists' value is true, then the schema checker has identified that there are tables present in your database that relate to the schema it is checking. The response object's 'IsValid' relates to if your database contains all the necessary tables and columns required for the schema you are checking. 'IsValid' is true when all tables and columns exist for a schema, and also when no tables and columns exist for a schema. The 'ErrorMessages' section of the response object will contain information relating to any missing tables or columns in your database when compared to the schema you are checking. You may also specify a connection string and which database provider you are you using with -connectionstring and -dbprovider. The connection string must be valid and surrounded by quotes. If no connectionstring and dbprovider are given, the migration tool will look in AdminUI's appsettings.json for the values.","title":"Schema Checker"},{"location":"Migrations/Migrations_Help.html#docker-migrations","text":"If the container is not running and you would like to run migrations use the following command docker run -e \"DbProvider=<YourProvider>\" -e \"IdentityConnectionString=<YourConnectionString>\" -e IdentityServerConnectionString=\"<YourConnectionString>\" --entrypoint dotnet rocksolidknowledge/adminui IdentityExpress.Manager.UI.dll -migrate all Note - The full list of configuration options is avaliable here If the container is already running the steps to run migrations are as follows: Find the container ID by running the \u201cdocker container ps\u201d command Once found, you can exec the command as follows: docker exec <container-id> dotnet IdentityExpress.Manager.UI.dll -migrate all Note - This will use the environment variables already passed into the container. You will see the output of the migrations in your command line window.","title":"Docker Migrations"},{"location":"Migrations/Migrations_Help.html#targetidentityserver4","text":"Make sure to back up your database before running any migrations against it as there is no way to easily revert changes once they have been applied. The value of the TargetIdentityServer4 flag in AdminUI's configuration will determine what kind of database the AdminUI migrations will create/update. If set to true , the AdminUI migration tool will perform IdentityServer4 migrations. If set to false , the AdminUI migration tool will perform Duende IdentityServer migrations. If you have performed the AdminUI migrations while targeting IdentityServer4 but wish to upgrade your database to target IdentityServer Duende, you can update the TargetIdentityServer4 flag to false and run the migrations again. The AdminUI migration tool will then update your database to be in line with the latest Duende IdentityServer schema.","title":"TargetIdentityServer4"},{"location":"Read_First/Installation_Scenarios.html","text":"Installation Scenarios I have neither IdentityServer or AdminUI installed See here for a introduction to IdentityServer and where AdminUI fits in. If you haven't already requested a demo, you can get one from here where you will receive a download link for AdminUI plus a 30 day demo license key. For IdentityServer, we recommend using our quickstart , that is already integrated with AdminUI. You can then follow one of the walkthroughs below to install AdminUI IIS Azure Docker I have IdentityServer 3.X or above installed. Download and install the AdminUI version that matches up with your IdentityServer version. With the introduction of IdentityServer Duende we will be keeping the same model but also including IdentityServer4 v4 support up until End of Life (EOL). Supported Versions: AdminUI 3.x - IdentityServer4 v3 AdminUI 4.x - IdentityServer4 v4 AdminUI 5.x - Duende IdentityServer v5 + IdentityServer4 v4 AdminUI 6.x - Duende IdentityServer v6 + IdentityServer4 v4 Run the \"all\" command in the Migrations section below. I have IdentityServer4 2.2 or below and no installation of AdminUI You will need to migrate your IdentityServer database to the IdentityServer 2.3 schema. The simplest way is to upgrade your IdentityServer packages to 2.3 and generate the migrations, you can find out more on generating your own IdentityServer migrations here . I have IdentityServer4 2.2 or below and AdminUI 2.0 - 2.3 installed If you previously requested that AdminUI run the IdentityServer migrations then run the migrate all command, otherwise, you will need to upgrade your IdentityServer4 to 2.3 and generate your own migrations. I have IdentityServer4 2.3 or above installed and no AdminUI Install AdminUI 2.X, and run all migrations but the IdentityServer migration, see the migrations link below. I have IdentityServer4 2.3 or above installed and AdminUI 2.4 or above installed Install the latest version of AdminUI, update your configuration, and then run the migrate all command, see below. Migrations Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI, if you want AdminUI to handle all migrations you can navigate to the folder where your AdminUI site is and run the following command. dotnet IdentityExpress.Manager.UI.dll -migrate all It will generate the databases for you using the connection strings configured in your AdminUI appsettings.json If you are planning on managing some of the database migrations yourself, or want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here","title":"Installation Scenarios"},{"location":"Read_First/Installation_Scenarios.html#installation-scenarios","text":"","title":"Installation Scenarios"},{"location":"Read_First/Installation_Scenarios.html#i-have-neither-identityserver-or-adminui-installed","text":"See here for a introduction to IdentityServer and where AdminUI fits in. If you haven't already requested a demo, you can get one from here where you will receive a download link for AdminUI plus a 30 day demo license key. For IdentityServer, we recommend using our quickstart , that is already integrated with AdminUI. You can then follow one of the walkthroughs below to install AdminUI IIS Azure Docker","title":"I have neither IdentityServer or AdminUI installed"},{"location":"Read_First/Installation_Scenarios.html#i-have-identityserver-3x-or-above-installed","text":"Download and install the AdminUI version that matches up with your IdentityServer version. With the introduction of IdentityServer Duende we will be keeping the same model but also including IdentityServer4 v4 support up until End of Life (EOL). Supported Versions: AdminUI 3.x - IdentityServer4 v3 AdminUI 4.x - IdentityServer4 v4 AdminUI 5.x - Duende IdentityServer v5 + IdentityServer4 v4 AdminUI 6.x - Duende IdentityServer v6 + IdentityServer4 v4 Run the \"all\" command in the Migrations section below.","title":"I have IdentityServer 3.X or above installed."},{"location":"Read_First/Installation_Scenarios.html#i-have-identityserver4-22-or-below-and-no-installation-of-adminui","text":"You will need to migrate your IdentityServer database to the IdentityServer 2.3 schema. The simplest way is to upgrade your IdentityServer packages to 2.3 and generate the migrations, you can find out more on generating your own IdentityServer migrations here .","title":"I have IdentityServer4 2.2 or below and no installation of AdminUI"},{"location":"Read_First/Installation_Scenarios.html#i-have-identityserver4-22-or-below-and-adminui-20-23-installed","text":"If you previously requested that AdminUI run the IdentityServer migrations then run the migrate all command, otherwise, you will need to upgrade your IdentityServer4 to 2.3 and generate your own migrations.","title":"I have IdentityServer4 2.2 or below and AdminUI 2.0 - 2.3 installed"},{"location":"Read_First/Installation_Scenarios.html#i-have-identityserver4-23-or-above-installed-and-no-adminui","text":"Install AdminUI 2.X, and run all migrations but the IdentityServer migration, see the migrations link below.","title":"I have IdentityServer4 2.3 or above installed and no AdminUI"},{"location":"Read_First/Installation_Scenarios.html#i-have-identityserver4-23-or-above-installed-and-adminui-24-or-above-installed","text":"Install the latest version of AdminUI, update your configuration, and then run the migrate all command, see below.","title":"I have IdentityServer4 2.3 or above installed and AdminUI 2.4 or above installed"},{"location":"Read_First/Installation_Scenarios.html#migrations","text":"Whether you are installing AdminUI for the first time or upgrading to the latest version of AdminUI, you will need to run some form of migrations to ensure your databases are inline with AdminUI, if you want AdminUI to handle all migrations you can navigate to the folder where your AdminUI site is and run the following command. dotnet IdentityExpress.Manager.UI.dll -migrate all It will generate the databases for you using the connection strings configured in your AdminUI appsettings.json If you are planning on managing some of the database migrations yourself, or want more options when setting up your databases, then there are more fine tune migrations you can do, for more info see our full migration docs here","title":"Migrations"},{"location":"Resources/creating_resources.html","text":"Create Resource To create a Resource, use the Add button on either an Identity or Protected Resource type. A new Resource dialog will appear, enabling you to add the Basic Resource Details you require ID , Display Name and Description Once basic details are complete, you can choose which claim types can be included for that resource: Protected Resources & Scopes By default, when creating a Protected Resource, a Full Access scope will automatically be created. This can later be modified or removed completely.","title":"Creating Resources"},{"location":"Resources/creating_resources.html#create-resource","text":"To create a Resource, use the Add button on either an Identity or Protected Resource type. A new Resource dialog will appear, enabling you to add the Basic Resource Details you require ID , Display Name and Description Once basic details are complete, you can choose which claim types can be included for that resource:","title":"Create Resource"},{"location":"Resources/creating_resources.html#protected-resources-scopes","text":"By default, when creating a Protected Resource, a Full Access scope will automatically be created. This can later be modified or removed completely.","title":"Protected Resources &amp; Scopes"},{"location":"Resources/editing_resources.html","text":"Editing a Resource Resources can be edited from the Protected or Identity Resources page by first selecting the Resource Identity Resources Edit Mode Once you are in edit mode for an Identity Resource, you will initially arrive at the Details page. The Resource ID will be displayed in a read-only view. This is the unique identifier for requests. This section also allows you to edit the Display name of the Resource - this is the Resource Name that will be seen on consent screens, along with the Resource Description , and a Resource Status switch. You will also be able to to set various statuses of the Resource: Whether explicit consent to use this resource is required in order to complete authentication Whether the resource appears within the Discovery Document /.well-known/openid-configuration Whether to emphasize the Resource Name on the Consent screen Protected Resources Edit Mode Once you are in edit mode for a Protected Resource, you will initially arrive at the Details page. The Resource ID will be displayed in a read-only view. This is the unique identifier for requests. This section also allows you to edit the Display name of the Resource - this is the Resource Name that will be seen on consent screens, along with the Resource Description and a Resource Status switch: Protected Resources Scope Editing From the Protected Resources tab, there is the ability to add and edit the Scope of the resource. Select the Scopes tab and you will observe the existing Scopes available for this Protected Resource. By default, Admin API is available as a Scope: At this point, you can switch between the Details and Claims tab. The options on the Details tab show the read-only Scope ID (e.g. \"admin_api\"), and enable you to edit the Display Name and Description . You will also be able to to set various statuses of the Scope for this Protected Resource: Whether explicit consent to use this resource is required in order to complete authentication Whether the resource appears within the Discovery Document /.well-known/openid-configuration Whether to emphasize the Resource Name on the Consent screen Additionally, from within a Protected Resources Scope Edit mode, you will be able to select the Claims available for this Scope. This sets the User Claim types that are to be included in tokens, and these Claims types will be added to the list of claim types for the parent resource.","title":"Editing resources"},{"location":"Resources/editing_resources.html#editing-a-resource","text":"Resources can be edited from the Protected or Identity Resources page by first selecting the Resource","title":"Editing a Resource"},{"location":"Resources/editing_resources.html#identity-resources-edit-mode","text":"Once you are in edit mode for an Identity Resource, you will initially arrive at the Details page. The Resource ID will be displayed in a read-only view. This is the unique identifier for requests. This section also allows you to edit the Display name of the Resource - this is the Resource Name that will be seen on consent screens, along with the Resource Description , and a Resource Status switch. You will also be able to to set various statuses of the Resource: Whether explicit consent to use this resource is required in order to complete authentication Whether the resource appears within the Discovery Document /.well-known/openid-configuration Whether to emphasize the Resource Name on the Consent screen","title":"Identity Resources Edit Mode"},{"location":"Resources/editing_resources.html#protected-resources-edit-mode","text":"Once you are in edit mode for a Protected Resource, you will initially arrive at the Details page. The Resource ID will be displayed in a read-only view. This is the unique identifier for requests. This section also allows you to edit the Display name of the Resource - this is the Resource Name that will be seen on consent screens, along with the Resource Description and a Resource Status switch:","title":"Protected Resources Edit Mode"},{"location":"Resources/editing_resources.html#protected-resources-scope-editing","text":"From the Protected Resources tab, there is the ability to add and edit the Scope of the resource. Select the Scopes tab and you will observe the existing Scopes available for this Protected Resource. By default, Admin API is available as a Scope: At this point, you can switch between the Details and Claims tab. The options on the Details tab show the read-only Scope ID (e.g. \"admin_api\"), and enable you to edit the Display Name and Description . You will also be able to to set various statuses of the Scope for this Protected Resource: Whether explicit consent to use this resource is required in order to complete authentication Whether the resource appears within the Discovery Document /.well-known/openid-configuration Whether to emphasize the Resource Name on the Consent screen Additionally, from within a Protected Resources Scope Edit mode, you will be able to select the Claims available for this Scope. This sets the User Claim types that are to be included in tokens, and these Claims types will be added to the list of claim types for the parent resource.","title":"Protected Resources Scope Editing"},{"location":"Resources/searching_for_resources.html","text":"Searching for Resources Starting from the Identity Resources or Protected Resources tab, you can find Resources using the Search functionality. Select the resource type you would like (e.g. Identity or Protected), start typing and the Resource will appear if there is a match. Note that this functionality is the same process for both Identity Resources, and Protected Resources:","title":"Searching for Resources"},{"location":"Resources/searching_for_resources.html#searching-for-resources","text":"Starting from the Identity Resources or Protected Resources tab, you can find Resources using the Search functionality. Select the resource type you would like (e.g. Identity or Protected), start typing and the Resource will appear if there is a match. Note that this functionality is the same process for both Identity Resources, and Protected Resources:","title":"Searching for Resources"},{"location":"Roles/Creating_roles.html","text":"Creating Roles Roles can be created in AdminUI in order to create the roles you need within your application. By clicking \"Add Role\", we can create a new role within the AdminUI application. Selecting this button will bring up a window to enable you to add a new role. There is a simple Name and Description field, and the option to either Add directly, or Add another Role after Submit. Adding another role after submit simply shows a blank version of the New Role window. Success! If the role has been successfully added, a success dialogue will display.","title":"Creating Roles"},{"location":"Roles/Creating_roles.html#creating-roles","text":"Roles can be created in AdminUI in order to create the roles you need within your application. By clicking \"Add Role\", we can create a new role within the AdminUI application. Selecting this button will bring up a window to enable you to add a new role. There is a simple Name and Description field, and the option to either Add directly, or Add another Role after Submit. Adding another role after submit simply shows a blank version of the New Role window.","title":"Creating Roles"},{"location":"Roles/Creating_roles.html#success","text":"If the role has been successfully added, a success dialogue will display.","title":"Success!"},{"location":"Roles/Managing_Roles.html","text":"Searching for Roles Searching for Roles within Admin UI is a powerful way to quickly find and manage the Roles within the application. You can find Roles in the application in several ways, starting with the Search functionality. Start typing and the role will appear if there is a match. Editing a Role Roles can be edited within AdminUI in order to edit the roles already setup in your application. By clicking the pencil icon, an Edit dialogue will appear enabling us to customise the role within the AdminUI application. Once you have made the edits you require, click \"Save\" to persist the changes to the Role you have saved. If the changes have been saved as required, you will observe a \"Changes Saved\" dialogue appear. Deleting Roles During the Edit Roles dialogue, a Delete button option will appear. If this is clicked, you will be warned as to whether you want to permanently delete this role. You can change your mind and close the dialogue or not delete, or click \"Delete\" to proceed with this deletion.","title":"Managing Roles"},{"location":"Roles/Managing_Roles.html#searching-for-roles","text":"Searching for Roles within Admin UI is a powerful way to quickly find and manage the Roles within the application. You can find Roles in the application in several ways, starting with the Search functionality. Start typing and the role will appear if there is a match.","title":"Searching for Roles"},{"location":"Roles/Managing_Roles.html#editing-a-role","text":"Roles can be edited within AdminUI in order to edit the roles already setup in your application. By clicking the pencil icon, an Edit dialogue will appear enabling us to customise the role within the AdminUI application. Once you have made the edits you require, click \"Save\" to persist the changes to the Role you have saved. If the changes have been saved as required, you will observe a \"Changes Saved\" dialogue appear.","title":"Editing a Role"},{"location":"Roles/Managing_Roles.html#deleting-roles","text":"During the Edit Roles dialogue, a Delete button option will appear. If this is clicked, you will be warned as to whether you want to permanently delete this role. You can change your mind and close the dialogue or not delete, or click \"Delete\" to proceed with this deletion.","title":"Deleting Roles"},{"location":"Roles/Users_in_Role_Management.html","text":"Managing users in a role You can see the users associated with a role by selecting the user tab. The users in this list represent the users associated with the current role. Using the search input, you can filter the list. Using the 'Manage Users' button opens a new dialogue which allows you to perform multiple operations for associating and de-associating users from a role. Using the search input box, you can filter the list of users by their name. Removing Users Users in the current role are those who have tick when they appear in the list. To remove that user from a list, select the checkbox to uncheck the user. That user appears in the Removing list. Add Users Users who are not currently associated with a role appear in the list without the checkbox is active. To associate the user to the current role, select the checkbox, and the user appears in the Adding list. Saving Changes To save the changes select the 'Save' button","title":"Managing Users in a Role"},{"location":"Roles/Users_in_Role_Management.html#managing-users-in-a-role","text":"You can see the users associated with a role by selecting the user tab. The users in this list represent the users associated with the current role. Using the search input, you can filter the list. Using the 'Manage Users' button opens a new dialogue which allows you to perform multiple operations for associating and de-associating users from a role. Using the search input box, you can filter the list of users by their name.","title":"Managing users in a role"},{"location":"Roles/Users_in_Role_Management.html#removing-users","text":"Users in the current role are those who have tick when they appear in the list. To remove that user from a list, select the checkbox to uncheck the user. That user appears in the Removing list.","title":"Removing Users"},{"location":"Roles/Users_in_Role_Management.html#add-users","text":"Users who are not currently associated with a role appear in the list without the checkbox is active. To associate the user to the current role, select the checkbox, and the user appears in the Adding list.","title":"Add Users"},{"location":"Roles/Users_in_Role_Management.html#saving-changes","text":"To save the changes select the 'Save' button","title":"Saving Changes"},{"location":"Troubleshooting/Unable_to_contact_API.html","text":"If you experience the error message \u201cUnable to contact API\u201d, it means that the AdminUI backend cannot successfully communicate with the AdminUI API. To troubleshoot this issue, we recommend working through the following steps. To begin please make sure you have enabled logs for the API. To do so you can check the section on enabling logging. . These logs should contain an error detailing why the API could not be contacted. Does the Swagger UI work? You can verify that the API has been able to start-up by visiting the Swagger UI, available on the endpoint: https://<your-api-url>/swagger/index.html . Swagger UI loads The AdminUI API is running, but something is preventing the UI from contacting it. To find out why you will need to check the API logs. Swagger UI does not load The AdminUI API site has not been able to start-up. Typically when this happens you will see a web page with the following error: HTTP Error 500.30 - ANCM In-Process Start Failure Common issues include: Bootstrap issues When the bootstrap process fails at any point it will rollback to its previous state before the bootstrap ran. This is indicated in the logs by the message \"Bootstrap Failed - Rolling Back\". This usually happens when there is conflicting data in your database. If this is the case then you can check your logs for the error by going to your logs directory, if you haven't already enabled logs please see our enabling logging section. If this is the case please email us with your logs at support@identityserver.com Database connection One known problem is with SQL Express and SQL logins. When installing SQLExpress for the first time, it defaults to use Windows Authentication. This means that you can\u2019t log into any of the databases using SQL logins. To solve this problem, change this SQL Express setting to allow SQL logins. Another problem can be with improperly escaped SQL Express connection strings e.g. using 'localhost\\SQLExpress' instead of '.\\SQLExpress' would result in the same error. SqlException: A network-related or instance-specific error occurred while establishing a connection If you receive this error, the API cannot connect to the database. It may be that the connection string is invalid or that the website is unable to resolve the server name. SqlException: Login failed for user Check that the user name is correct and that the user has the correct permissions. If you receive this error, the API is not authorized to access the database. It may be that the user in the connection string is invalid or is not authorized to access the database. SqlException: A connection was successfully established with the server, but then an error occurred during the login process If you receive this error, the API is not authorized to access the database. In this case, it may be that the website user is trying to use SQL authentication (a username and password) but the database only supports Windows authentication. To resolve this, we recommend enabling SQL authentication in your database. This is often required when using SQL Server Express from IIS. Migrations SqlException Invalid object name 'AspNetClaimTypes' This means that the API is trying to connect to a user (identity) database that does not use AdminUI\u2019s database schema. AdminUI uses an extended version of the core ASP.NET Core Identity entity framework schema that provides strong typing for claim types and improved user and role searching. To resolve this, you will need to update the application currently in charge of user store migrations to use the AdminUI schema . Support If none of these steps work or you are unsure how to fix the error in the logs, please contact us at support@identityserver.com, detailing the issue you see, including any error logs.","title":"Unable to contact API"},{"location":"Troubleshooting/Unable_to_contact_API.html#does-the-swagger-ui-work","text":"You can verify that the API has been able to start-up by visiting the Swagger UI, available on the endpoint: https://<your-api-url>/swagger/index.html .","title":"Does the Swagger UI work?"},{"location":"Troubleshooting/Unable_to_contact_API.html#swagger-ui-loads","text":"The AdminUI API is running, but something is preventing the UI from contacting it. To find out why you will need to check the API logs.","title":"Swagger UI loads"},{"location":"Troubleshooting/Unable_to_contact_API.html#swagger-ui-does-not-load","text":"The AdminUI API site has not been able to start-up. Typically when this happens you will see a web page with the following error: HTTP Error 500.30 - ANCM In-Process Start Failure Common issues include:","title":"Swagger UI does not load"},{"location":"Troubleshooting/Unable_to_contact_API.html#bootstrap-issues","text":"When the bootstrap process fails at any point it will rollback to its previous state before the bootstrap ran. This is indicated in the logs by the message \"Bootstrap Failed - Rolling Back\". This usually happens when there is conflicting data in your database. If this is the case then you can check your logs for the error by going to your logs directory, if you haven't already enabled logs please see our enabling logging section. If this is the case please email us with your logs at support@identityserver.com","title":"Bootstrap issues"},{"location":"Troubleshooting/Unable_to_contact_API.html#database-connection","text":"One known problem is with SQL Express and SQL logins. When installing SQLExpress for the first time, it defaults to use Windows Authentication. This means that you can\u2019t log into any of the databases using SQL logins. To solve this problem, change this SQL Express setting to allow SQL logins. Another problem can be with improperly escaped SQL Express connection strings e.g. using 'localhost\\SQLExpress' instead of '.\\SQLExpress' would result in the same error. SqlException: A network-related or instance-specific error occurred while establishing a connection If you receive this error, the API cannot connect to the database. It may be that the connection string is invalid or that the website is unable to resolve the server name. SqlException: Login failed for user Check that the user name is correct and that the user has the correct permissions. If you receive this error, the API is not authorized to access the database. It may be that the user in the connection string is invalid or is not authorized to access the database. SqlException: A connection was successfully established with the server, but then an error occurred during the login process If you receive this error, the API is not authorized to access the database. In this case, it may be that the website user is trying to use SQL authentication (a username and password) but the database only supports Windows authentication. To resolve this, we recommend enabling SQL authentication in your database. This is often required when using SQL Server Express from IIS.","title":"Database connection"},{"location":"Troubleshooting/Unable_to_contact_API.html#migrations","text":"SqlException Invalid object name 'AspNetClaimTypes' This means that the API is trying to connect to a user (identity) database that does not use AdminUI\u2019s database schema. AdminUI uses an extended version of the core ASP.NET Core Identity entity framework schema that provides strong typing for claim types and improved user and role searching. To resolve this, you will need to update the application currently in charge of user store migrations to use the AdminUI schema .","title":"Migrations"},{"location":"Troubleshooting/Unable_to_contact_API.html#support","text":"If none of these steps work or you are unsure how to fix the error in the logs, please contact us at support@identityserver.com, detailing the issue you see, including any error logs.","title":"Support"},{"location":"Troubleshooting/Unable_to_contact_IdentityServer.html","text":"If you experience the error message \u201cUnable to contact IdentityServer\u201d, it means that the AdminUI backend cannot successfully communicate with IdentityServer. To troubleshoot this issue, we recommend working through the following steps. Does the OpenID Connect discovery document work? You can verify that your IdentityServer can start-up and access your database by navigating to the OpenID Connect discovery document in your browser, available on the IdentityServer endpoint: https://<your-identity-server>/.well-known/openid-configuration . Discovery document does not load If your discovery document does not load, you may instead see an error page containing details on what went wrong. If you do not see any error details, you will need to check the IdentityServer logs . Discovery document loads If your discovery document does load, then the next step is to determine why IdentityServer denied the request. Check the IdentityServer logs Depending on your IdentityServer setup, IdentityServer will be logging failed incoming requests. To enable logging, check out our logging documentation . If you are using your own IdentityServer, we recommend following the Microsoft documentation for logging. Check your configuration If you are not seeing any logged requests made to IdentityServer, it may be that AdminUI is not pointing at your IdentityServer. To confirm that AdminUI is configured correctly, check the AuthorityUrl setting for both the UI and API are the expected value in any web.config (when using IIS/Windows) and appsettings.json files (when using Linux or Kestrel). If you are using an Azure App Service, this can also be set in the App Service\u2019s configuration section. Check the AdminUI logs If you are not seeing any logged requests made to IdentityServer and the configuration looks correct, the next step is to check the AdminUI (UI website) logs . This will cover any issues with connecting to your IdentityServer, including certificate validation. Support If none of these steps work or you are unsure how to fix the error in the logs, please contact us at support@identityserver.com, detailing the issue you see, including any error logs.","title":"Unable to contact IdentityServer"},{"location":"Troubleshooting/Unable_to_contact_IdentityServer.html#does-the-openid-connect-discovery-document-work","text":"You can verify that your IdentityServer can start-up and access your database by navigating to the OpenID Connect discovery document in your browser, available on the IdentityServer endpoint: https://<your-identity-server>/.well-known/openid-configuration .","title":"Does the OpenID Connect discovery document work?"},{"location":"Troubleshooting/Unable_to_contact_IdentityServer.html#discovery-document-does-not-load","text":"If your discovery document does not load, you may instead see an error page containing details on what went wrong. If you do not see any error details, you will need to check the IdentityServer logs .","title":"Discovery document does not load"},{"location":"Troubleshooting/Unable_to_contact_IdentityServer.html#discovery-document-loads","text":"If your discovery document does load, then the next step is to determine why IdentityServer denied the request.","title":"Discovery document loads"},{"location":"Troubleshooting/Unable_to_contact_IdentityServer.html#check-the-identityserver-logs","text":"Depending on your IdentityServer setup, IdentityServer will be logging failed incoming requests. To enable logging, check out our logging documentation . If you are using your own IdentityServer, we recommend following the Microsoft documentation for logging.","title":"Check the IdentityServer logs"},{"location":"Troubleshooting/Unable_to_contact_IdentityServer.html#check-your-configuration","text":"If you are not seeing any logged requests made to IdentityServer, it may be that AdminUI is not pointing at your IdentityServer. To confirm that AdminUI is configured correctly, check the AuthorityUrl setting for both the UI and API are the expected value in any web.config (when using IIS/Windows) and appsettings.json files (when using Linux or Kestrel). If you are using an Azure App Service, this can also be set in the App Service\u2019s configuration section.","title":"Check your configuration"},{"location":"Troubleshooting/Unable_to_contact_IdentityServer.html#check-the-adminui-logs","text":"If you are not seeing any logged requests made to IdentityServer and the configuration looks correct, the next step is to check the AdminUI (UI website) logs . This will cover any issues with connecting to your IdentityServer, including certificate validation.","title":"Check the AdminUI logs"},{"location":"Troubleshooting/Unable_to_contact_IdentityServer.html#support","text":"If none of these steps work or you are unsure how to fix the error in the logs, please contact us at support@identityserver.com, detailing the issue you see, including any error logs.","title":"Support"},{"location":"Troubleshooting/Unable_to_log_in.html","text":"If you are unable to login, you can troubleshoot using the below steps Help! I\u2019m stuck in a redirect loop If you are stuck in a redirect loop between AdminUI and IdentityServer, this is because AdminUI does not trust or cannot validate the IdentityServer identity token. A common cause for this is when one or more of the applications are running on HTTP rather than HTTPS. This can cause the browser\u2019s SameSite cookie policy to be enforced and AdminUI\u2019s correlation cookie to be unavailable. This correlation cookie contains security data used to verify incoming requests to AdminUI\u2019s redirect endpoint and validate tokens. If this cookie is not present, AdminUI will redirect the user back to IdentityServer. To solve this, ensure all of your applications are running on HTTPS and can validate one another's TLS certificates. If your applications are all running over HTTPS and you are still experiencing a redirect loop then your web server or reverse proxy could be terminating TLS. You will need to modify your web server or reverse proxy to tell AdminUI what the original request was by using X-Forwarded headers, such as X-Forwarded-For and X-Forwarded-Proto. This will tell AdminUI what the original scheme was (e.g. HTTPS) and the domain (e.g. identityserver.com). Check out the Microsoft documentation for more information on these headers and how AdminUI supports them here . Another common cause for redirect loops is header size limitations. If your max header length is too small to accommodate the AdminUI session cookie, AdminUI will be unable to authenticate and will enter a redirect loop. To fix this, increase the maximum header size for your AdminUI site. We recommend a value of at least 128KB. Invalid client secret If you see an error page within AdminUI after redirecting from IdentityServer to AdminUI, it may be that AdminUI is using an incorrect client secret. This can be proven by checking the IdentityServer logs for a failed request against the token endpoint. To resolve this, ensure that the AdminUI and API sites have the same value for the AdminUIClientSecret configuration setting. Once these are the same, restart the API website for the IdentityServer configuration to be updated. Invalid redirect URI If you see an error page or an error log within IdentityServer that says the redirect URI is invalid, this means that the client configuration held by IdentityServer does not match your AdminUI instance. To resolve this, ensure that the AdminUI API site has the correct URL for the UiUrl configuration setting. Once this is correct, restart the API website for the IdentityServer configuration to be updated. Invalid client If you see an error page or error log within IdentityServer that says the client is invalid, this means that IdentityServer does not recognize the AdminUI client application. This could be due IdentityServer and AdminUI not using the same database for IdentityServer configuration. To resolve this, ensure that both the AdminUI API and your IdentityServer are using the same connection strings. Support If none of these steps work or you are unsure how to fix the error in the logs, please contact us at support@identityserver.com, detailing the issue you see, including any error logs.","title":"Unable to log in"},{"location":"Troubleshooting/Unable_to_log_in.html#help-im-stuck-in-a-redirect-loop","text":"If you are stuck in a redirect loop between AdminUI and IdentityServer, this is because AdminUI does not trust or cannot validate the IdentityServer identity token. A common cause for this is when one or more of the applications are running on HTTP rather than HTTPS. This can cause the browser\u2019s SameSite cookie policy to be enforced and AdminUI\u2019s correlation cookie to be unavailable. This correlation cookie contains security data used to verify incoming requests to AdminUI\u2019s redirect endpoint and validate tokens. If this cookie is not present, AdminUI will redirect the user back to IdentityServer. To solve this, ensure all of your applications are running on HTTPS and can validate one another's TLS certificates. If your applications are all running over HTTPS and you are still experiencing a redirect loop then your web server or reverse proxy could be terminating TLS. You will need to modify your web server or reverse proxy to tell AdminUI what the original request was by using X-Forwarded headers, such as X-Forwarded-For and X-Forwarded-Proto. This will tell AdminUI what the original scheme was (e.g. HTTPS) and the domain (e.g. identityserver.com). Check out the Microsoft documentation for more information on these headers and how AdminUI supports them here . Another common cause for redirect loops is header size limitations. If your max header length is too small to accommodate the AdminUI session cookie, AdminUI will be unable to authenticate and will enter a redirect loop. To fix this, increase the maximum header size for your AdminUI site. We recommend a value of at least 128KB.","title":"Help! I\u2019m stuck in a redirect loop"},{"location":"Troubleshooting/Unable_to_log_in.html#invalid-client-secret","text":"If you see an error page within AdminUI after redirecting from IdentityServer to AdminUI, it may be that AdminUI is using an incorrect client secret. This can be proven by checking the IdentityServer logs for a failed request against the token endpoint. To resolve this, ensure that the AdminUI and API sites have the same value for the AdminUIClientSecret configuration setting. Once these are the same, restart the API website for the IdentityServer configuration to be updated.","title":"Invalid client secret"},{"location":"Troubleshooting/Unable_to_log_in.html#invalid-redirect-uri","text":"If you see an error page or an error log within IdentityServer that says the redirect URI is invalid, this means that the client configuration held by IdentityServer does not match your AdminUI instance. To resolve this, ensure that the AdminUI API site has the correct URL for the UiUrl configuration setting. Once this is correct, restart the API website for the IdentityServer configuration to be updated.","title":"Invalid redirect URI"},{"location":"Troubleshooting/Unable_to_log_in.html#invalid-client","text":"If you see an error page or error log within IdentityServer that says the client is invalid, this means that IdentityServer does not recognize the AdminUI client application. This could be due IdentityServer and AdminUI not using the same database for IdentityServer configuration. To resolve this, ensure that both the AdminUI API and your IdentityServer are using the same connection strings.","title":"Invalid client"},{"location":"Troubleshooting/Unable_to_log_in.html#support","text":"If none of these steps work or you are unsure how to fix the error in the logs, please contact us at support@identityserver.com, detailing the issue you see, including any error logs.","title":"Support"},{"location":"User_settings_endpoints/User_settings.html","text":"Scopes To access the user settings endpoints, an access token issued by your IdentityServer implementation with the scope admin_ui_public . This access token must have been issued on behalf of a user and contain a sub claim. Authorization Rules In order to use the user settings endpoints, the requesting user, must be the same as the users being updated. Otherwise, a 403 Forbidden will be returned. This is matched using the sub claim issued within the requesting access token. Read To see what claims a user can edit, and their current values, you can call GET on the /UserSettings/{subject} endpoint. This will return the following json: \"subject\": \"string\", \"claims\": \"type\": \"string\", \"value\": \"string\" Update To update a users claims, you can call PUT on the /UserSettings endpoint. \"subject\": \"string\", \"claims\": \"type\": \"string\", \"value\": \"string\"","title":"User Settings Endpoints"},{"location":"User_settings_endpoints/User_settings.html#scopes","text":"To access the user settings endpoints, an access token issued by your IdentityServer implementation with the scope admin_ui_public . This access token must have been issued on behalf of a user and contain a sub claim.","title":"Scopes"},{"location":"User_settings_endpoints/User_settings.html#authorization-rules","text":"In order to use the user settings endpoints, the requesting user, must be the same as the users being updated. Otherwise, a 403 Forbidden will be returned. This is matched using the sub claim issued within the requesting access token.","title":"Authorization Rules"},{"location":"User_settings_endpoints/User_settings.html#read","text":"To see what claims a user can edit, and their current values, you can call GET on the /UserSettings/{subject} endpoint. This will return the following json: \"subject\": \"string\", \"claims\": \"type\": \"string\", \"value\": \"string\"","title":"Read"},{"location":"User_settings_endpoints/User_settings.html#update","text":"To update a users claims, you can call PUT on the /UserSettings endpoint. \"subject\": \"string\", \"claims\": \"type\": \"string\", \"value\": \"string\"","title":"Update"},{"location":"Users/Adding_users.html","text":"Adding Users From the Users page, click the \"Add a User\" button User Details Fill out the relevant User Details including: Username Email First Name Last Name Any additional required claims will also need to be entered. User Validation You will not be able to add a new user until the required field validation has passed. Save & Configure Once you have successfully entered all required information, you will be able to choose whether to \"Save\" or \"Save and Configure\" this User. Selecting \"Save\" will take you back to the Users screen, selecting \"Save and Configure\" will take you to the User details configuration screen to edit the user. Success You have now successfully added a user. If successful, you should see a Success notification, or you will be informed of any issues.","title":"Adding Users"},{"location":"Users/Adding_users.html#adding-users","text":"From the Users page, click the \"Add a User\" button","title":"Adding Users"},{"location":"Users/Adding_users.html#user-details","text":"Fill out the relevant User Details including: Username Email First Name Last Name Any additional required claims will also need to be entered.","title":"User Details"},{"location":"Users/Adding_users.html#user-validation","text":"You will not be able to add a new user until the required field validation has passed.","title":"User Validation"},{"location":"Users/Adding_users.html#save-configure","text":"Once you have successfully entered all required information, you will be able to choose whether to \"Save\" or \"Save and Configure\" this User. Selecting \"Save\" will take you back to the Users screen, selecting \"Save and Configure\" will take you to the User details configuration screen to edit the user.","title":"Save &amp; Configure"},{"location":"Users/Adding_users.html#success","text":"You have now successfully added a user. If successful, you should see a Success notification, or you will be informed of any issues.","title":"Success"},{"location":"Users/Deleting_Users.html","text":"Deleting a user If you choose to delete a user from the User Details page, click the delete button. You should then see a dialogue warning you that you are going to delete the user. At this point you can either cancel, or continue with the delete. Confirmation of Delete If the deletion of a user has been successful, a \"user deleted\" confirmation will appear","title":"Deleting Users"},{"location":"Users/Deleting_Users.html#deleting-a-user","text":"If you choose to delete a user from the User Details page, click the delete button. You should then see a dialogue warning you that you are going to delete the user. At this point you can either cancel, or continue with the delete.","title":"Deleting a user"},{"location":"Users/Deleting_Users.html#confirmation-of-delete","text":"If the deletion of a user has been successful, a \"user deleted\" confirmation will appear","title":"Confirmation of Delete"},{"location":"Users/Editing_users.html","text":"Editing a User Access the User Details screen by finding the user that you want to edit in the Users page list. This will take you to the User Details screen, where you can edit the required User details. You will notice that there are several key tabs, which we will cover in detail. Details Tab The default tab is the \"Details\" tab, where you will see the User ID, and be able to edit the following elements of a user: Username First name Last name Email Organization Any additional, custom required claims you have created You will also be able to set a user to \"Blocked\" or remove their blocked status and set them to \"Active\" again. Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved. Roles Tab Clicking on the Roles tab allows you to assign roles to a User. Roles administration is explained in more detail in the Roles section, however, you can assign Roles to a user from the Users dialogue. Using this screen you can assign avaliable roles to this user, select the arrow to move the selected roles from Available to Assigned. To remove roles from a user, select the roles you want to remove and click the arrow to move the role from \"Assigned\" to \"Available\". Additional Details Tab Within the User Details page, clicking on the Additional Details tab enables you to add relevant additional optional user details, known as Claims . Here you can assign and remove claims for a specific user. To add a claim click on the \"Add Claim\" button. This will open a dialog to create a claim. Select a claim type from the drop-down of the full list of User claim types, enter a value, and click add to assign the claim to the user. You should then see a success dialogue informing you that your claim has been added. You can choose to edit or delete any claim. Click the pencil icon to edit the claim, or the delete icon to remove the claim entirely from this user. Editing the claim will turn the field into a writeable text-box that will allow you to change the value of the claim. Applications tab Clicking on the Applications tab in the User Details page enables you to view all Applications that the selected User has given consent to. Select an application to see more details about the application including what scopes the application has access to. From here you can also revoke a users consent.","title":"Editing Users"},{"location":"Users/Editing_users.html#editing-a-user","text":"Access the User Details screen by finding the user that you want to edit in the Users page list. This will take you to the User Details screen, where you can edit the required User details. You will notice that there are several key tabs, which we will cover in detail.","title":"Editing a User"},{"location":"Users/Editing_users.html#details-tab","text":"The default tab is the \"Details\" tab, where you will see the User ID, and be able to edit the following elements of a user: Username First name Last name Email Organization Any additional, custom required claims you have created You will also be able to set a user to \"Blocked\" or remove their blocked status and set them to \"Active\" again. Once you have successfully made the edits you require, click Save, and you should then see a success dialogue informing you that your changes have been saved.","title":"Details Tab"},{"location":"Users/Editing_users.html#roles-tab","text":"Clicking on the Roles tab allows you to assign roles to a User. Roles administration is explained in more detail in the Roles section, however, you can assign Roles to a user from the Users dialogue. Using this screen you can assign avaliable roles to this user, select the arrow to move the selected roles from Available to Assigned. To remove roles from a user, select the roles you want to remove and click the arrow to move the role from \"Assigned\" to \"Available\".","title":"Roles Tab"},{"location":"Users/Editing_users.html#additional-details-tab","text":"Within the User Details page, clicking on the Additional Details tab enables you to add relevant additional optional user details, known as Claims . Here you can assign and remove claims for a specific user. To add a claim click on the \"Add Claim\" button. This will open a dialog to create a claim. Select a claim type from the drop-down of the full list of User claim types, enter a value, and click add to assign the claim to the user. You should then see a success dialogue informing you that your claim has been added. You can choose to edit or delete any claim. Click the pencil icon to edit the claim, or the delete icon to remove the claim entirely from this user. Editing the claim will turn the field into a writeable text-box that will allow you to change the value of the claim.","title":"Additional Details Tab"},{"location":"Users/Editing_users.html#applications-tab","text":"Clicking on the Applications tab in the User Details page enables you to view all Applications that the selected User has given consent to. Select an application to see more details about the application including what scopes the application has access to. From here you can also revoke a users consent.","title":"Applications tab"},{"location":"Users/Searching_for_users.html","text":"Searching for Users You can find Users in the application in several ways, starting with the Search functionality. Start entering the name of the user that you wish to search for, and options should appear as users matching the search are found: User Ordering You can also find Users by ordering the columns to get to the user you require. This can be achieved by clicking the caret on each column. The caret will alter to indicate the direction of the sort: User Selection by Status Users can be one of 3 statuses Active , Blocked or Deleted On the Users page, it is possible to sort users by their status by clicking on the relevant Status tab. This will filter out all users that are not of that status type.","title":"Searching for Users"},{"location":"Users/Searching_for_users.html#searching-for-users","text":"You can find Users in the application in several ways, starting with the Search functionality. Start entering the name of the user that you wish to search for, and options should appear as users matching the search are found:","title":"Searching for Users"},{"location":"Users/Searching_for_users.html#user-ordering","text":"You can also find Users by ordering the columns to get to the user you require. This can be achieved by clicking the caret on each column. The caret will alter to indicate the direction of the sort:","title":"User Ordering"},{"location":"Users/Searching_for_users.html#user-selection-by-status","text":"Users can be one of 3 statuses Active , Blocked or Deleted On the Users page, it is possible to sort users by their status by clicking on the relevant Status tab. This will filter out all users that are not of that status type.","title":"User Selection by Status"},{"location":"Users/SessionManagement.html","text":"Managing Server Side Sessions with AdminUI Server Side Sessions were a feature brought out in IdentityServer Duende 6.1. This feature allows you to store session state in the database rather than in a cookie. If you want to read more about server side sessions including how to enable them you can read the official duende release article Server side sessions can either be viewed under the \"Users\" section in the navigation or per user when editing a user e.g: On these pages you can: Filter sessions Find all sessions created since a given date Find all sessions expired before a given date Search by Subject Delete Records This just calls delete lol If you want more fully fledged deletion we offer a webhook so you can call off to an endpoint or whatever haha To view the records you will need any of these permissions: - All - All Read Only - User Manager - User Manager Read Only To delete records you need any of the following permissions: - All - User Manager Deleting a session By default AdminUI will only remove the session from the database. If you want to configure further actions to happen on delete AdminUI provides a Server Side Session webhook that will fire when a session is deleted. You can find out how to implement this feature in our webhooks section How to disable This feature is enabled by default. If you do not intend to use this feature you can disable it by configuring the \"EnableSessionManagement\" feature flag in your settings. To do this please refer to our configuration documentation .","title":"Session Management"},{"location":"Users/SessionManagement.html#managing-server-side-sessions-with-adminui","text":"Server Side Sessions were a feature brought out in IdentityServer Duende 6.1. This feature allows you to store session state in the database rather than in a cookie. If you want to read more about server side sessions including how to enable them you can read the official duende release article Server side sessions can either be viewed under the \"Users\" section in the navigation or per user when editing a user e.g: On these pages you can: Filter sessions Find all sessions created since a given date Find all sessions expired before a given date Search by Subject Delete Records This just calls delete lol If you want more fully fledged deletion we offer a webhook so you can call off to an endpoint or whatever haha To view the records you will need any of these permissions: - All - All Read Only - User Manager - User Manager Read Only To delete records you need any of the following permissions: - All - User Manager","title":"Managing Server Side Sessions with AdminUI"},{"location":"Users/SessionManagement.html#deleting-a-session","text":"By default AdminUI will only remove the session from the database. If you want to configure further actions to happen on delete AdminUI provides a Server Side Session webhook that will fire when a session is deleted. You can find out how to implement this feature in our webhooks section","title":"Deleting a session"},{"location":"Users/SessionManagement.html#how-to-disable","text":"This feature is enabled by default. If you do not intend to use this feature you can disable it by configuring the \"EnableSessionManagement\" feature flag in your settings. To do this please refer to our configuration documentation .","title":"How to disable"},{"location":"Users/Set_User_Password.html","text":"Evaluating AdminUI If you are using a demo license key, when you create a user we give you the ability to set a password for that user. We do this to simplify the creation of users while you are evaluating the product. However, we do not recommend this for production installations . In production When you are using a production key we do not give you the ability to set a password for the user on the Add User screen by default. Our recommendation is to use an email flow for the user to set their own password. You can enable this via a webhook as explained here . However, if, in your situation, you do want to enable the ability for an administrator to set the password for a new user, you can turn on this feature with the AddUserPassword as documented here","title":"Set User Password"},{"location":"Users/Set_User_Password.html#evaluating-adminui","text":"If you are using a demo license key, when you create a user we give you the ability to set a password for that user. We do this to simplify the creation of users while you are evaluating the product. However, we do not recommend this for production installations .","title":"Evaluating AdminUI"},{"location":"Users/Set_User_Password.html#in-production","text":"When you are using a production key we do not give you the ability to set a password for the user on the Add User screen by default. Our recommendation is to use an email flow for the user to set their own password. You can enable this via a webhook as explained here . However, if, in your situation, you do want to enable the ability for an administrator to set the password for a new user, you can turn on this feature with the AddUserPassword as documented here","title":"In production"},{"location":"Webhooks/webhook_endpoint_configuration.html","text":"Configuration You must create an endpoint that is secured and authenticated by your IdentityServer that uses the scope you have selected in the webhook configuration page for authorization. Once you have your endpoint configured, you can enable the webhook and set the config setting with the AdminUI API config with Url for your endpoint. If this field is set then on successful User creation this webhook will be triggered. Endpoint Requirements Password Reset, Reset MFA and User Registration Endpoint Requirements AdminUI expects these endpoints to meet the following requirements: Accept POST Accept JSON Accept an email, username and subjectid in the body Body { \"subjectid\": \"string\" \"email\": \"string\", \"username\": \"string\" } Delete Session Webhook Endpoint Requirements AdminUI expects the delete session endpoint to meet the following requirements: Accept DELETE Accept JSON Accept an sessionId as a route parameter. E.g: https://webhookhost/1234-5678 Response On a successful request a 200 OK response should be returned. Debugging If the call made to the endpoint returns anything other than a success code, if logging is correctly configured, a error will be logged by the API containing the returned status code.","title":"Endpoint Configuration"},{"location":"Webhooks/webhook_endpoint_configuration.html#configuration","text":"You must create an endpoint that is secured and authenticated by your IdentityServer that uses the scope you have selected in the webhook configuration page for authorization. Once you have your endpoint configured, you can enable the webhook and set the config setting with the AdminUI API config with Url for your endpoint. If this field is set then on successful User creation this webhook will be triggered.","title":"Configuration"},{"location":"Webhooks/webhook_endpoint_configuration.html#endpoint-requirements","text":"","title":"Endpoint Requirements"},{"location":"Webhooks/webhook_endpoint_configuration.html#password-reset-reset-mfa-and-user-registration-endpoint-requirements","text":"AdminUI expects these endpoints to meet the following requirements: Accept POST Accept JSON Accept an email, username and subjectid in the body","title":"Password Reset, Reset MFA and User Registration Endpoint Requirements"},{"location":"Webhooks/webhook_endpoint_configuration.html#body","text":"{ \"subjectid\": \"string\" \"email\": \"string\", \"username\": \"string\" }","title":"Body"},{"location":"Webhooks/webhook_endpoint_configuration.html#delete-session-webhook-endpoint-requirements","text":"AdminUI expects the delete session endpoint to meet the following requirements: Accept DELETE Accept JSON Accept an sessionId as a route parameter. E.g: https://webhookhost/1234-5678","title":"Delete Session Webhook Endpoint Requirements"},{"location":"Webhooks/webhook_endpoint_configuration.html#response","text":"On a successful request a 200 OK response should be returned.","title":"Response"},{"location":"Webhooks/webhook_endpoint_configuration.html#debugging","text":"If the call made to the endpoint returns anything other than a success code, if logging is correctly configured, a error will be logged by the API containing the returned status code.","title":"Debugging"},{"location":"Webhooks/webhooks.html","text":"Webhooks AdminUI contains three webhooks to extend AdminUI functionality and integrate it with your IdentityServer and custom Identity needs. These webhooks hold no functionality themselves but call secured endpoints to trigger outside functionality, this could within your IdentityServer instance or a separate API. Password reset webhook - This webhook allows AdminUI to trigger custom password reset logic contained elsewhere. User registration webhook - This webhook will trigger any additional account setup process your security solution might have. Reset mfa webhook - This webhook will trigger custom logic used to reset a user's Multi-Factor Authentication. Delete session webhook - This webhook will trigger when you press the delete button on a session in a session management table Webhook Configuration Page As of AdminUI 5.6, you can manage your webhook configuration within AdminUI. You can manage webhook configuration by navigating to the Webhooks tab in the Settings area of AdminUI. Here you can enable/disable the three webhooks, set the endpoint URLs, and choose the desired protecting scope. Triggering Password Reset and Reset MFA After navigating to a user details page, you will find the two buttons used to trigger either the Password Reset webhook or the Reset MFA webhook . If enabled in the Webhook Configuration page, clicking on the desired button will trigger the webhook. If the webhook has not been enabled in the Webhook Configuration page, clicking on the webhook button will direct you to documentation that will inform you on how to configure the webhook. Triggering User Registration Webhook If account creation succeeds and the User registration webhook has been enabled, then the webhook will trigger. If the user registration webhook has not been enabled user registration will still complete successfully, however the webhook will not be called. The recommended way to use this webhook is to send an email to the user with a link to activate their account and set their initial password. Triggering the Delete Session Webhook If setup this webhook fire when you click the red x on a record in a session management table. Information about this feature can be found earlier in the documentation This webhook will send an HTTP Delete to the url of your choosing, including the Session ID in the path. E.g: https://localhost:5003/4b3c19ac-cce4-47c5-ac0e-eb79da45944b For an example of how to implement this webhook with the default Duende session management implementation see our sample Authorization The webhooks will need to be to secured by your IdentityServer. You can choose a scope per endpoint in the Webhook Configuration page. To ensure your webhooks are secured against public use, they should check for a bearer token, issued by your IdentityServer installation, that contains this scope. The configuration of a webhook endpoint is detailed in the Webhook Endpoint Configuration page Client As of AdminUI 5.6, webhook client creation/deletion is handled for you by AdminUI. On enabling your first webhook, AdminUI will inform you that a client is about to be created. The client will try and use the ClientId and ClientSecret fields within your API configuration. If AdminUI cannot find any values for ClientId or ClientSecret configuration fields, it will use a default clientId ( admin_ui_webhooks ) and a default client secret. You can view the secret's unhashed plaintext value in the ConfigurationEntries table under the webhooks key. The client also uses the client_credentials grant type. Webhook Configuration Migration If you are upgrading AdminUI to a version above 5.6 and you are using webhooks, your webhook configuration will be migrated from your API configuration to the ConfigurationEntries table in your IdentityServer. This will happen during the first run of the API. If you have any values against the webhook URL's in your API config or if you have both a ClientId and ClientSecret , AdminUI will create a client for you to use as a webhook client. The client will use the default admin_ui_webhooks protecting scope.","title":"Webhooks"},{"location":"Webhooks/webhooks.html#webhooks","text":"AdminUI contains three webhooks to extend AdminUI functionality and integrate it with your IdentityServer and custom Identity needs. These webhooks hold no functionality themselves but call secured endpoints to trigger outside functionality, this could within your IdentityServer instance or a separate API. Password reset webhook - This webhook allows AdminUI to trigger custom password reset logic contained elsewhere. User registration webhook - This webhook will trigger any additional account setup process your security solution might have. Reset mfa webhook - This webhook will trigger custom logic used to reset a user's Multi-Factor Authentication. Delete session webhook - This webhook will trigger when you press the delete button on a session in a session management table","title":"Webhooks"},{"location":"Webhooks/webhooks.html#webhook-configuration-page","text":"As of AdminUI 5.6, you can manage your webhook configuration within AdminUI. You can manage webhook configuration by navigating to the Webhooks tab in the Settings area of AdminUI. Here you can enable/disable the three webhooks, set the endpoint URLs, and choose the desired protecting scope.","title":"Webhook Configuration Page"},{"location":"Webhooks/webhooks.html#triggering-password-reset-and-reset-mfa","text":"After navigating to a user details page, you will find the two buttons used to trigger either the Password Reset webhook or the Reset MFA webhook . If enabled in the Webhook Configuration page, clicking on the desired button will trigger the webhook. If the webhook has not been enabled in the Webhook Configuration page, clicking on the webhook button will direct you to documentation that will inform you on how to configure the webhook.","title":"Triggering Password Reset and Reset MFA"},{"location":"Webhooks/webhooks.html#triggering-user-registration-webhook","text":"If account creation succeeds and the User registration webhook has been enabled, then the webhook will trigger. If the user registration webhook has not been enabled user registration will still complete successfully, however the webhook will not be called. The recommended way to use this webhook is to send an email to the user with a link to activate their account and set their initial password.","title":"Triggering User Registration Webhook"},{"location":"Webhooks/webhooks.html#triggering-the-delete-session-webhook","text":"If setup this webhook fire when you click the red x on a record in a session management table. Information about this feature can be found earlier in the documentation This webhook will send an HTTP Delete to the url of your choosing, including the Session ID in the path. E.g: https://localhost:5003/4b3c19ac-cce4-47c5-ac0e-eb79da45944b For an example of how to implement this webhook with the default Duende session management implementation see our sample","title":"Triggering the Delete Session Webhook"},{"location":"Webhooks/webhooks.html#authorization","text":"The webhooks will need to be to secured by your IdentityServer. You can choose a scope per endpoint in the Webhook Configuration page. To ensure your webhooks are secured against public use, they should check for a bearer token, issued by your IdentityServer installation, that contains this scope. The configuration of a webhook endpoint is detailed in the Webhook Endpoint Configuration page","title":"Authorization"},{"location":"Webhooks/webhooks.html#client","text":"As of AdminUI 5.6, webhook client creation/deletion is handled for you by AdminUI. On enabling your first webhook, AdminUI will inform you that a client is about to be created. The client will try and use the ClientId and ClientSecret fields within your API configuration. If AdminUI cannot find any values for ClientId or ClientSecret configuration fields, it will use a default clientId ( admin_ui_webhooks ) and a default client secret. You can view the secret's unhashed plaintext value in the ConfigurationEntries table under the webhooks key. The client also uses the client_credentials grant type.","title":"Client"},{"location":"Webhooks/webhooks.html#webhook-configuration-migration","text":"If you are upgrading AdminUI to a version above 5.6 and you are using webhooks, your webhook configuration will be migrated from your API configuration to the ConfigurationEntries table in your IdentityServer. This will happen during the first run of the API. If you have any values against the webhook URL's in your API config or if you have both a ClientId and ClientSecret , AdminUI will create a client for you to use as a webhook client. The client will use the default admin_ui_webhooks protecting scope.","title":"Webhook Configuration Migration"}]}